{
  "env": null,
  "id": "7ea6221c-4599-428e-9565-d4f0e05c7803",
  "name": "msf-lime-mosul-staging",
  "description": "staging project for main MSF workflows\n",
  "color": null,
  "concurrency": null,
  "inserted_at": "2025-01-30T11:16:04Z",
  "updated_at": "2025-09-24T08:55:19Z",
  "parent_id": null,
  "scheduled_deletion": null,
  "project_credentials": {
    "mtuchi@openfn.org-mtuchi-github-token": {
      "id": "0fa0d3d1-0caa-4f8f-8952-f0b2e2ce51ea",
      "name": "mtuchi-github-token",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenMRS-Demo": {
      "id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08",
      "name": "OpenMRS Demo",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenFnSharepoint": {
      "id": "49fdae45-c33e-498a-9441-e0c0b4a61568",
      "name": "OpenFnSharepoint",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-MSF-DHIS2-UAT": {
      "id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f",
      "name": "MSF DHIS2 UAT",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-mtuchi-collections-config": {
      "id": "90cddfa1-9b77-4625-a812-2a04d061522c",
      "name": "mtuchi-collections-config",
      "owner": "mtuchi@openfn.org"
    },
    "aisha@openfn.org-MSF-OMRS-admin": {
      "id": "d2c62b09-c071-4cbe-95e5-b703aba863f3",
      "name": "MSF OMRS admin",
      "owner": "aisha@openfn.org"
    },
    "mtuchi@openfn.org-omrs-with-collections": {
      "id": "bc29d45e-4f5c-4d96-9d13-44a7ffc02133",
      "name": "omrs-with-collections",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-dhis2-with-collections": {
      "id": "2fd93de5-3ce7-4ddb-8ade-273113429219",
      "name": "dhis2-with-collections",
      "owner": "mtuchi@openfn.org"
    }
  },
  "history_retention_period": 365,
  "dataclip_retention_period": 365,
  "retention_policy": "retain_all",
  "version_history": [],
  "collections": {},
  "workflows": {
    "get-metadata-collections": {
      "id": "6be0f9f1-2933-403a-b3b1-4272ce0a3bc5",
      "name": "get-metadata-collections",
      "inserted_at": "2025-07-14T10:22:38.081646Z",
      "lock_version": 21,
      "triggers": {
        "webhook": {
          "enabled": false,
          "id": "3b67cdd7-b64f-45fb-87fc-5f6487159c5f",
          "type": "webhook"
        }
      },
      "jobs": {
        "Get-and-set-metadata-collections": {
          "id": "4586e5d2-8775-456a-81d2-1809601b38c8",
          "name": "Get and set metadata collections",
          "body": "// Check out the Job Writing Guide for help getting started:\n// https://docs.openfn.org/documentation/jobs/job-writing-guide\n\n// collections.remove(\"metadata-mappings\", \"mappings-*\")\n\n//  collections.remove(\"metadata-mappings\", \"mapping*\")\n\n collections.get(\"metadata_mappings\", \"mappingSets\") // getting collections from metadata project\n\n collections.set(\"mosul-metadata-mappings\", \"mappingSets\", state => {\n  return state.data\n })\n\ncollections.get(\"mosul-metadata-mappings\", \"mappingSets\") \n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        }
      },
      "edges": {
        "webhook->Get-and-set-metadata-collections": {
          "enabled": true,
          "id": "809a825b-da5e-4f02-857a-7d08017e42c4",
          "target_job_id": "4586e5d2-8775-456a-81d2-1809601b38c8",
          "source_trigger_id": "3b67cdd7-b64f-45fb-87fc-5f6487159c5f",
          "condition_type": "always"
        }
      }
    },
    "wf2-omrs-dhis2": {
      "id": "24c5c1d4-a07a-4d5a-a6c7-649825bf7e7a",
      "name": "wf2-omrs-dhis2",
      "inserted_at": "2025-09-24T08:55:19.205186Z",
      "lock_version": 138,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "a30ec52a-4ecc-4dbe-8b44-61c779f6f879",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Patients": {
          "id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "name": "Get Patients",
          "body": "cursor($.lastRunDateTime || \"2025-03-20T06:01:24.000Z\");\n\ncursor(\"today\", {\n  key: \"lastRunDateTime\",\n  format: (c) => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: \"IQ\", v: \"full\", limit: \"100\" });\nfn((state) => {\n  const { cursor, data } = state;\n  console.log(\"Filtering patients since cursor:\", cursor);\n  console.log('Patient fetched', data.results.length)\n\n  state.patients = data.results.filter(({ auditInfo }) => {\n    const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n    return lastModified > cursor;\n  });\n  state.searchPatientUuids = state.patients.map((p) => p.uuid);\n  console.log(\"# of patients to sync to dhis2 ::\", state.patients.length);\n\n  return state;\n});\n\n// Fetch all encounters\nhttp\n  .get(\"/ws/fhir2/R4/Encounter\", {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then((state) => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find((l) => l.relation === \"next\")\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split(\"/openmrs\")[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then((state) => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\nfn((state) => {\n  console.log(\n    \"Total # of encounters fetched: \",\n    state.allResponse?.entry?.length\n  );\n\n  const uuids = [\n    ...new Set(\n      state.allResponse?.entry?.map((p) =>\n        p.resource?.subject?.reference?.replace(\"Patient/\", \"\")\n      )\n    ),\n  ];\n  state.encounterPatientUuids = [...new Set(uuids)];\n\n  return state;\n});\n\nfn((state) => {\n  const {\n    cursor,\n    lastRunDateTime,\n    patients,\n    searchPatientUuids,\n    encounterPatientUuids,\n  } = state;\n\n  const onlyInSearchPatient = searchPatientUuids.filter(\n    (id) => !encounterPatientUuids.includes(id)\n  );\n\n  const onlyInR4Encounter = encounterPatientUuids.filter(\n    (id) => !searchPatientUuids.includes(id)\n  );\n  const inbothResults = searchPatientUuids.filter((id) =>\n    encounterPatientUuids.includes(id)\n  );\n  const patientUuids = [...new Set(searchPatientUuids, encounterPatientUuids)];\n\n  console.log('inbothResults', inbothResults.length)\n  console.log('patient-search-array', onlyInSearchPatient.length)\n  console.log('r4-encounter-array', onlyInR4Encounter.length)\n  console.log('combined uuids', patientUuids.length)\n\n  return { cursor, lastRunDateTime, patients, patientUuids };\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Mappings": {
          "id": "6f787076-7706-4104-834e-29340029c5ee",
          "name": "Mappings",
          "body": "const isValidUUID = id => {\n  if (!id || typeof id !== 'string') return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\ncollections.get('mosul-metadata-mappings-staging').then(state => {\n  state.optsMap = state.data\n    .filter(i => i.key.includes('optsMap-value-'))\n    .map(i => i.value);\n\n  state.identifiers = state.data\n    .filter(i => i.key.includes('identifiers-value-'))\n    .map(i => i.value);\n  state.syncedAt = state.data.find(i => i.key === 'syncedAt')?.value;\n  state.formMetadata = state.data.find(i => i.key === 'formMetadata')?.value;\n  state.placeOflivingMap = state.data.find(i => i.key === 'placeOflivingMap')?.value;\n  state.sourceFile = state.data.filter(i => i.key === 'sourceFile')?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    i => i.key === 'fileDateModified'\n  )?.[0]?.value;\n  state.formMaps = state.data.find(i => i.key === 'formMaps')?.value;\n\n  // TODO: Remove state.optionSetKey, when needed \n  // Build from state.formMaps\n  state.optionSetKey = state.data.filter(\n    i => i.key === 'optionSetKey'\n  )?.[0]?.value;\n\n\n  delete state.data\n  delete state.references\n  return state;\n});\n\nfn(state => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      form =>\n        isValidUUID(form['OMRS form.uuid']) &&\n        form['OMRS Form Version'] === 'v4-2025'\n    )\n    .map(form => form['OMRS form.uuid']);\n  rest.formUuids = formMetadata\n    .filter(form => isValidUUID(form['OMRS form.uuid']) &&\n      form['Workflow'] === 'WF2')\n    .map(form => form['OMRS form.uuid']);\n\n\n  rest.patientProgramStage = \"vN61drMkGqO\"\n\n  // rest.orgUnit = \"sUpt0j2GmBD\"\n  rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n    'dhis2 attribute id'\n  ];\n  // rest.program = \"dWdzxMuKa8Z\"\n  rest.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n    'dhis2 attribute id'\n  ];\n  // rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n\nfn(state => {\n  state.genderOptions = state.optsMap\n    .filter(o => o['OptionSet name'] === 'Sex - Patient')\n    .reduce((acc, value) => {\n      acc[value['value.uuid - External ID']] = value['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        },
        "Upsert-TEIs": {
          "id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "name": "Upsert TEIs",
          "body": "const buildPatientsUpsert = (omrsPatient, teiData, mappingConfig) => {\n  const genderMap = {\n    M: \"male\",\n    O: \"unknown\",\n    F: \"female\",\n    U: \"unknown\",\n  };\n  const {\n    orgUnit,\n    program,\n    optsMap,\n    formMaps,\n    placeOflivingMap,\n    patientProgramStage,\n    dhis2PatientNumber,\n    openmrsAutoId,\n  } = mappingConfig;\n\n  const isNewPatient = teiData.length === 0;\n  const dateCreated = omrsPatient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find((i) => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const enrollments = [\n    {\n      orgUnit,\n      program,\n      programStage: patientProgramStage, //'MdTtRixaC1B',\n      enrollmentDate: dateCreated,\n    },\n  ];\n\n  const findOptsUuid = (uuid) =>\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value?.uuid ||\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value;\n\n  const findOptCode = (optUuid) =>\n    optsMap.find((o) => o[\"value.uuid - External ID\"] === optUuid)?.[\n    \"DHIS2 Option Code\"\n    ];\n\n  const patientMap = formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map((d) => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: \"fa7uwpCKIwa\",\n      value: omrsPatient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: \"Jt9BhFZkvP2\",\n      value: omrsPatient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: \"P4wdYGkldeG\", //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(omrsPatient.identifiers, dhis2PatientNumber) ||\n        findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: \"ZBoxuExmxcZ\", //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId),\n    },\n    {\n      attribute: \"AYbfTPYMNJH\", //\"OpenMRS Patient UID\"\n      value: omrsPatient.uuid,\n    },\n\n    {\n      attribute: \"T1iX2NuPyqS\",\n      value: omrsPatient.person.age,\n    },\n    {\n      attribute: \"WDp4nVor9Z7\",\n      value: omrsPatient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: \"rBtrjV1Mqkz\", //Place of living\n      value: placeOflivingMap[omrsPatient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter((a) => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter((a) => a.value);\n\n  const payload = {\n    query: {\n      ou: orgUnit,\n      program,\n      filter: [`AYbfTPYMNJH:Eq:${omrsPatient.uuid}`], //upsert on omrs.patient.uid\n    },\n    data: {\n      program,\n      orgUnit,\n      trackedEntityType: \"cHlzCA2MuEF\",\n      attributes: [...filteredAttr, ...filteredStatusAttr],\n    },\n  };\n\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (isNewPatient) {\n    payload.data.attributes.push({\n      attribute: \"qptKDiv9uPl\",\n      value: genderMap[omrsPatient.person.gender],\n    });\n    console.log(\"create enrollment\");\n    payload.data.enrollments = enrollments;\n  }\n\n  return payload;\n};\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\neach(\n  $.patients,\n  get(\"tracker/trackedEntities\", {\n    orgUnit: $.orgUnit,\n    filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],\n    program: $.program,\n  }).then(async (state) => {\n    const patient = state.references.at(-1);\n    console.log(patient.uuid, \"patient uuid\");\n\n    const patientMapping = buildPatientsUpsert(patient, state.data.instances, {\n      placeOflivingMap: state.placeOflivingMap,\n      orgUnit: state.orgUnit,\n      program: state.program,\n      patientProgramStage: state.patientProgramStage,\n      formMaps: state.formMaps,\n      optsMap: state.optsMap,\n      dhis2PatientNumber: state.dhis2PatientNumber,\n      openmrsAutoId: state.openmrsAutoId,\n    });\n    state.patientsUpsert ??= [];\n    state.patientsUpsert.push(patientMapping);\n\n    await delay(2000);\n    return state;\n  })\n);\n\n// Upsert TEIs to DHIS2\neach(\n  $.patientsUpsert,\n  upsert(\"trackedEntityInstances\", $.data.query, (state) => {\n    console.log(state.data.data);\n    return state.data.data;\n  })\n);\nfn((state) => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    identifiers,\n    ...next\n  } = state;\n  next.patientUuids = patients.map(p => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Encounters": {
          "id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "name": "Get Encounters",
          "body": "// Fetch patient encounters\neach(\n  $.patientUuids,\n  get('encounter', { patient: $.data, v: 'full' }).then(state => {\n    state.allEncounters ??= [];\n    state.allEncounters.push(\n      // v2FormsUuids are for mental health forms\n      // ...state.data.results.filter(e =>\n      //   state.v2FormUuids.includes(e?.form?.uuid)\n      // )\n      ...state.data.results.filter(e =>\n        state.formUuids.includes(e?.form?.uuid)\n      )\n    );\n\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map(formUuid =>\n      state.data.results\n        .filter(\n          e =>\n            e.auditInfo.dateCreated >= state.cursor &&\n            e?.form?.uuid === formUuid\n        )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    const encounters = filteredEncounters.map(pe => {\n      const isLatestForm = pe.find(e => {\n        return state.formMaps[e?.form?.uuid]?.syncType === 'latest'\n      })\n      if (isLatestForm) {\n        return [isLatestForm]\n      } else {\n        const allPatientEncounter = pe.filter(e => state.formMaps[e?.form?.uuid]?.syncType === 'all')\n        return allPatientEncounter\n      }\n    }).flat()\n\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n\n    return state;\n  })\n);\n\nfn(state => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map(\n      ({ uuid, patient, obs, form, encounterDatetime }) => ({\n        uuid,\n        patient,\n        obs,\n        form,\n        encounterDatetime,\n      })\n    )\n    console.log(next.encounters.length, '# of new encounters to sync to dhis2');\n  } else {\n    console.log('No encounters found for cursor: ', next.cursor);\n  }\n  next.allEncounters = next.allEncounters?.map(\n    ({ uuid, patient, obs, form, encounterDatetime }) => ({\n      uuid,\n      patient,\n      obs,\n      form,\n      encounterDatetime,\n    })\n  );\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nfn(state => {\n  // Group encounters by patient UUID\n  state.encountersByPatient = state.encounters.reduce((acc, obj) => {\n    const key = obj.patient.uuid;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n\n  return state;\n})\n\neach(state => Object.keys(state.encountersByPatient), get('tracker/trackedEntities', {\n  orgUnit: $.orgUnit,\n  program: $.program,\n  filter: [`AYbfTPYMNJH:Eq:${$.data}`]\n}).then(state => {\n  const patientUid = state.references.at(-1)\n\n  const tei = state.data?.instances?.[0];\n  if (tei?.trackedEntity) {\n    console.log('Parent TEI found:', tei.trackedEntity)\n    state.parentTeis ??= {};\n    state.parentTeis[patientUid] = tei;\n  } else {\n    console.log('Parent TEI Not Found for Patient:', patientUid)\n    state.missingParentTeis ??= {}\n    state.missingParentTeis[patientUid] = state.encountersByPatient[patientUid]\n  }\n  return state\n}))\n\neach(\n  $.encounters,\n  get('tracker/trackedEntities', state => ({\n    orgUnit: state.formMaps[state.data.form.uuid].orgUnit,\n    program: state.formMaps[state.data.form.uuid].programId,\n    filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n    fields: '*,enrollments[*],enrollments[events[*]], relationships[*]',\n  })).then(async state => {\n    const encounter = state.references.at(-1);\n    console.log(encounter.patient.uuid, 'Encounter patient uuid');\n\n    const { trackedEntity, enrollments } = state.data?.instances?.[0] || {};\n    if (trackedEntity) {\n      state.childTeis ??= {};\n      state.childTeis[encounter.patient.uuid] = {\n        trackedEntity,\n        events: enrollments?.[0]?.events,\n        enrollment: enrollments?.[0]?.enrollment,\n      };\n    } else {\n      state.teisToCreate ??= {}\n      const { attributes, trackedEntityType } = state.parentTeis[encounter.patient.uuid]\n      const program = state.formMaps[encounter.form.uuid].programId\n      const orgUnit = state.formMaps[encounter.form.uuid].orgUnit\n\n      state.teisToCreate[encounter.patient.uuid] = {\n        trackedEntityType,\n        enrollments: [{\n          orgUnit,\n          program,\n          enrollmentDate: new Date().toISOString().split('T')[0],\n        }],\n        attributes,\n        orgUnit,\n        program\n      }\n    }\n\n    await delay(2000);\n    return state;\n  })\n);\n\neach(state => {\n  return state?.teisToCreate ? Object.entries(state?.teisToCreate) : []\n}, create('trackedEntityInstances', state => {\n  const payload = state.data[1]\n  return payload\n}).then(state => {\n  const [patient, payload] = state.references.at(-1)\n  const trackedEntity = state.data?.response?.importSummaries[0]?.reference\n  state.childTeis ??= {}\n  state.createdTeis ??= []\n  state.createdTeis.push(trackedEntity)\n  state.childTeis[patient] = { trackedEntity }\n  return state\n}))\n\neach($?.createdTeis || [], get(`tracker/trackedEntities/${$.data}`, { fields: 'attributes[*],enrollments,trackedEntity' }).then(state => {\n  const { trackedEntity, enrollments, attributes } = state.data || {};\n  console.log(state.data)\n  const patientUuid = attributes.find(a => a.attribute === 'AYbfTPYMNJH').value\n\n  console.log('Fetched Teis', state.data)\n  state.childTeis ??= {};\n  state.childTeis[patientUuid] = {\n    trackedEntity,\n    events: enrollments?.[0]?.events,\n    enrollment: enrollments?.[0]?.enrollment,\n  };\n\n  return state\n}))\n\n\nfnIf($.childTeis && $.parentTeis, state => {\n  const { childTeis, parentTeis } = state\n  state.relationshipsMapping = Object.keys(childTeis).map(uuid => {\n    const childTei = childTeis[uuid].trackedEntity\n    const parentTei = parentTeis[uuid].trackedEntity\n\n    if (childTei != parentTei) {\n      return {\n        \"from\": {\n          \"trackedEntityInstance\": {\n            \"trackedEntityInstance\": parentTei\n          }\n        },\n        \"to\": {\n          \"trackedEntityInstance\": {\n            \"trackedEntityInstance\": childTei\n          }\n        },\n        \"relationshipType\": \"cJJTZ51EK24\"\n      }\n    }\n\n  }).filter(Boolean)\n  return state\n})\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Events": {
          "id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "name": "Create Events",
          "body": "// Create or update events for each encounter\ncreate(\n  'tracker',\n  {\n    events: state => {\n      console.log(\n        'Creating events for: ',\n        JSON.stringify(state.eventsMapping, null, 2)\n      );\n      return state.eventsMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: 'UID',\n      importStrategy: 'CREATE_AND_UPDATE',\n    },\n  }\n);\n\nconst findlatestAnswer = (encounters, conceptUuid) => {\n  const latestAnswer = encounters.reduce((acc, e) => {\n    const answer = e.obs.find((o) => o.concept.uuid === conceptUuid);\n    if (answer) {\n      const personUuid = answer.person.uuid;\n      if (\n        !acc[personUuid] ||\n        new Date(answer.obsDatetime) > new Date(acc[personUuid].obsDatetime)\n      ) {\n        acc[personUuid] = { ...answer, formUuid: e.form.uuid };\n      }\n    }\n    return acc;\n  }, {});\n\n  return Object.values(latestAnswer);\n};\n\nfn((state) => {\n  const {\n    encounters,\n    childTeis,\n    parentTeis,\n    program,\n    orgUnit,\n    optsMap,\n    // Lighten state by removing unused properties\n    formMaps,\n    optionSetKey,\n    eventsMapping,\n    formUuids,\n    references,\n    ...next\n  } = state;\n\n  const genderMap = optsMap\n    .filter((o) => o[\"DHIS2 DE UID\"] === \"qptKDiv9uPl\")\n    .reduce((acc, obj) => {\n      acc[obj[\"value.display - Answers\"]] = obj[\"DHIS2 Option Code\"];\n      return acc;\n    }, {});\n\n  const latestGenderUpdate = findlatestAnswer(\n    encounters,\n    \"ec42d68d-3e23-43de-b8c5-a03bb538e7c7\"\n  );\n\n  const genderUpdated = latestGenderUpdate\n    .map((answer) => {\n      const parentTei = parentTeis[answer?.person?.uuid].trackedEntity\n      const childTei = childTeis[answer?.person?.uuid].trackedEntity\n\n      const mappings = [];\n      const sharedMapping = {\n        trackedEntityType: \"cHlzCA2MuEF\",\n        attributes: [\n          {\n            attribute: \"qptKDiv9uPl\", //gender\n            value: genderMap[answer.value.display],\n          },\n          {\n            attribute: \"AYbfTPYMNJH\", //OpenMRS Patient UID to use to upsert TEI\n            value: answer.person.uuid,\n          },\n        ],\n      };\n      if (!childTei) {\n        console.log(\"No TEI found for person\", answer.person.uuid);\n      }\n      if (childTei) {\n        mappings.push({\n          ...sharedMapping,\n          trackedEntity: childTei,\n          program: formMaps[answer.formUuid].programId,\n          orgUnit: formMaps[answer.formUuid].orgUnit,\n        });\n      }\n      if (parentTei) {\n        mappings.push({\n          ...sharedMapping,\n          trackedEntity: parentTei,\n          program,\n          orgUnit,\n        });\n      }\n      return mappings\n    })\n    .filter(Boolean)\n    .flat();\n\n  const latestEducationUpdate = findlatestAnswer(\n    encounters,\n    \"cc3a5a7a-abfe-4630-b0c0-c1275c6cbb54\"\n  );\n\n  // console.log({ latestEducationUpdate })\n  const educationUpdated = latestEducationUpdate\n    .map((answer) => {\n      const parentTei = parentTeis[answer?.person?.uuid]?.trackedEntity\n      const childTei = childTeis[answer?.person?.uuid]?.trackedEntity\n      console.log({ parentTei, childTei })\n      const mappings = []\n      const sharedMapping = {\n        trackedEntityType: \"cHlzCA2MuEF\",\n        attributes: [\n          {\n            attribute: \"Dggll4f9Efj\", //education\n            value: optsMap.find(\n              (o) => o[\"value.display - Answers\"] === answer.value.display\n            )?.[\"DHIS2 Option Code\"], //map to DHIS2 Option Code in optsMap\n          },\n        ],\n      }\n      if (!childTei) {\n        console.log(\"No TEI found for person\", answer.person.uuid);\n      }\n\n      if (parentTei) {\n        mappings.push({\n          trackedEntity: parentTei,\n          program,\n          orgUnit,\n          ...sharedMapping\n        })\n      }\n      if (childTei) {\n        mappings.push({\n          trackedEntity: childTei,\n          program: formMaps[answer.formUuid].programId,\n          orgUnit: formMaps[answer.formUuid].orgUnit,\n          ...sharedMapping\n        })\n      }\n\n      return mappings\n    })\n    .filter(Boolean)\n    .flat();\n\n  return {\n    ...next,\n    teisToUpdate: [...genderUpdated, ...educationUpdated],\n  };\n});\n\nfnIf(\n  (state) => state.teisToUpdate.length === 0,\n  ({ lastRunDateTime }) => ({ lastRunDateTime })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Update-TEIs": {
          "id": "2b12eded-b70a-4f94-8fd2-5fe07a533461",
          "name": "Update TEIs",
          "body": "// Update TEIs\ncreate(\n  'tracker',\n  { trackedEntities: $.teisToUpdate },\n  { params: { async: false, importStrategy: 'UPDATE' } }\n);\n\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Event-Mappings": {
          "id": "e62747ec-9cdf-4613-8400-780605fb569e",
          "name": "Event Mappings",
          "body": "const processAnswer = (\n  answer,\n  conceptUuid,\n  dataElement,\n  optsMap,\n  optionSetKey,\n  formUuid\n) => {\n  if (typeof answer.value === \"object\") {\n    const isDiagnosisByPsychologist =\n      conceptUuid === \"722dd83a-c1cf-48ad-ac99-45ac131ccc96\" &&\n      dataElement === \"pN4iQH4AEzk\";\n    if (isDiagnosisByPsychologist) {\n      console.log(\"Yes done by psychologist..\");\n      return \"\" + answer.value.uuid === \"278401ee-3d6f-4c65-9455-f1c16d0a7a98\";\n    }\n\n    const isTrueOnlyQuestion =\n      conceptUuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\" &&\n      dataElement === \"G0hLyxqgcO7\";\n\n    if (isTrueOnlyQuestion) {\n      console.log(\"True only question detected..\", dataElement);\n      return answer.value.uuid === \"681cf0bc-5213-492a-8470-0a0b3cc324dd\"\n        ? \"true\"\n        : undefined;\n    }\n\n    const optionKey = `${formUuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      (o) =>\n        o[\"value.uuid - External ID\"] === answer.value.uuid &&\n        o[\"DHIS2 Option Set UID\"] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.[\"DHIS2 Option Code\"] ||\n      opt?.[\"DHIS2 Option name\"] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    // console.log(`matchingOption value: \"${matchingOption}\" for`);\n    // console.log({\n    //   optionKey,\n    //   conceptUid: answer.concept.uuid,\n    //   'answer.value.uid': answer.value.uuid,\n    //   'answer.value.display': answer.value.display,\n    //   matchingOption,\n    //   matchingOptionSet,\n    // });\n\n    if (matchingOption === \"FALSE\" || matchingOption === \"No\") {\n      return \"false\";\n    }\n    if (matchingOption === \"TRUE\" || matchingOption === \"Yes\") {\n      return \"true\";\n    }\n\n    return matchingOption || \"\";\n  }\n\n  return answer.value;\n};\n\nconst processNoAnswer = (encounter, conceptUuid, dataElement) => {\n  const isEncounterDate =\n    conceptUuid === \"encounter-date\" &&\n    [\"CXS4qAJH2qD\", \"I7phgLmRWQq\", \"yUT7HyjWurN\", \"EOFi7nk2vNM\"].includes(\n      dataElement\n    );\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace(\"+0000\", \"\");\n  }\n  return \"\";\n};\n\nconst findAnswerByConcept = (encounter, conceptUuid) => {\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  return answer?.value?.display;\n};\n\n// Helper functions for finding observations\nconst findObsByConcept = (encounter, conceptUuid) =>\n  encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n\n// Concept UUIDs\nconst CONCEPTS = {\n  BASELINE_CONCEPT: \"22809b19-54ca-4d88-8d26-9577637c184e\",\n  PRIORITY_1: \"45b39cbf-0fb2-4682-8544-8aaf3e07a744\",\n  PRIORITY_2: \"ee1b7973-e931-494e-a9cb-22b814b4d8ed\",\n  PRIORITY_3: \"92a92f62-3ff6-4944-9ea9-a7af23949bad\",\n  OTHER_SPECIFY: \"e08d532b-e56c-43dc-b831-af705654d2dc\",\n  PRECIPITATING_EVENT_1: \"d5e3d927-f7ce-4fdd-ac4e-6ad0b510b608\",\n  PRECIPITATING_EVENT_2: \"54a9b20e-bce5-4d4a-8c9c-e0248a182586\",\n  PRECIPITATING_EVENT_3: \"e0d4e006-85b5-41cb-8a21-e013b1978b8b\",\n  PRECIPITATING_EVENT_OTHER: \"790b41ce-e1e7-11e8-b02f-0242ac130002\",\n};\n\n// DHIS2 Data Elements\nconst DATA_ELEMENTS = {\n  BASELINE: \"pN4iQH4AEzk\",\n  PRIORITY_1_OTHER: \"pj5hIE6iyAR\",\n  PRIORITY_2_OTHER: \"Em5zvpdd5ha\",\n  PRIORITY_3_OTHER: \"aWsxYkJR8Ua\",\n  PRECIPITATING_EVENT_1_OTHER: \"m8qis4iUOTo\",\n  PRECIPITATING_EVENT_2_OTHER: \"mNK6CITsdWD\",\n  PRECIPITATING_EVENT_3_OTHER: \"jocqmYW394G\",\n};\n\n// Prepare DHIS2 data model for create events\nfn((state) => {\n  const handleMissingRecord = (data, state) => {\n    const { uuid, display } = data.patient;\n\n    console.log(uuid, \"Patient is missing trackedEntity && enrollment\");\n\n    state.missingRecords ??= {};\n    state.missingRecords[uuid] ??= {\n      encounters: [],\n      patient: display,\n    };\n\n    state.missingRecords[uuid].encounters.push(data.uuid);\n  };\n\n  state.eventsMapping = state.encounters\n    .map((encounter) => {\n      const form = state.formMaps[encounter.form.uuid];\n      if (!form?.dataValueMap) {\n        return null;\n      }\n      const { trackedEntity, enrollment, events } =\n        state.TEIs[encounter.patient.uuid] || {};\n\n      if (!trackedEntity || !enrollment) {\n        handleMissingRecord(encounter, state);\n        return null;\n      }\n      let formDataValues = Object.keys(form.dataValueMap)\n        .map((dataElement) => {\n          const conceptUuid = form.dataValueMap[dataElement];\n          const obsAnswer = encounter.obs.find(\n            (o) => o.concept.uuid === conceptUuid\n          );\n          const answer = obsAnswer;\n          const value = answer\n            ? processAnswer(\n              answer,\n              conceptUuid,\n              dataElement,\n              state.optsMap,\n              state.optionSetKey,\n              encounter.form.uuid\n            )\n            : processNoAnswer(encounter, conceptUuid, dataElement);\n          if (value) {\n            return { dataElement, value };\n          }\n        })\n        .filter((d) => d);\n\n      let customMapping = [];\n\n      if (\n        encounter.form.description.includes(\"F11-Family Planning Assessment\")\n      ) {\n        const answers = encounter.obs.filter(\n          (o) => o.concept.uuid === \"30b2d692-6a05-401f-8ede-13e027b8a436\"\n        );\n\n        const mappingConfig = [\n          { dataElement: \"DYTLOoEKRas\", index: 0 },\n          { dataElement: \"ddTrzQtQUGz\", index: 1 },\n          { dataElement: \"fuNs3Uzspsm\", index: 2 },\n        ];\n\n        mappingConfig.forEach((config) => {\n          if (answers[config.index]) {\n            customMapping.push({\n              dataElement: config.dataElement,\n              value: state.optsMap.find(\n                (o) =>\n                  o[\"value.display - Answers\"] ===\n                  answers[config.index]?.value?.display\n              )?.[\"DHIS2 Option Code\"],\n            });\n          }\n        });\n      }\n      if (encounter.form.description.includes(\"F13-PNC\")) {\n        const answers = encounter.obs.filter(\n          (o) => o.concept.uuid === \"22809b19-54ca-4d88-8d26-9577637c184e\"\n        );\n\n        // Define mapping configurations\n        const mappingConfig = [\n          { dataElement: \"ErtqJsZINyX\", index: 0 },\n          { dataElement: \"wWAMdsjks50\", index: 1 },\n          { dataElement: \"Dh1ocjojOrC\", index: 2 },\n          { dataElement: \"KR03PHkzVw1\", index: 3 },\n          { dataElement: \"kDA55sgLAwY\", index: 4 },\n        ];\n\n        // Only add mappings for answers that exist\n        mappingConfig.forEach((config) => {\n          if (answers[config.index] !== undefined) {\n            customMapping.push({\n              dataElement: config.dataElement,\n              value: state.optsMap.find(\n                (o) =>\n                  o[\"value.display - Answers\"] ===\n                  answers[config.index]?.value?.display\n              )?.[\"DHIS2 Option Code\"],\n            });\n          }\n        });\n      }\n\n      if (encounter.form.description.includes(\"F29-MHPSS Baseline v2\")) {\n        customMapping.push({\n          dataElement: DATA_ELEMENTS.BASELINE,\n          value: findAnswerByConcept(encounter, CONCEPTS.BASELINE_CONCEPT)\n            ? true\n            : false,\n        });\n\n        const priority1 = findObsByConcept(encounter, CONCEPTS.PRIORITY_1);\n        if (priority1 && priority1?.value?.display === \"Other\") {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_1_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const priority2 = findObsByConcept(encounter, CONCEPTS.PRIORITY_2);\n        if (priority2 && priority2?.value?.display === \"Other\") {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_2_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const priority3 = findObsByConcept(encounter, CONCEPTS.PRIORITY_3);\n        if (priority3 && priority3?.value?.display === \"Other\") {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_3_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const precipitatingEvent1 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_1\n        );\n        const otherValue = encounter.obs.find((o) =>\n          o.display.includes(\"Past / Precipitating Events - Other\")\n        );\n\n        if (\n          precipitatingEvent1 &&\n          precipitatingEvent1?.value?.uuid === otherValue?.value?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            (o) => o[\"value.uuid - External ID\"] === otherValue?.value?.uuid\n          );\n\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_1_OTHER,\n            value: opt?.[\"DHIS2 Option Code\"],\n          });\n        }\n\n        const precipitatingEvent2 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_2\n        );\n\n        if (\n          precipitatingEvent2 &&\n          precipitatingEvent2?.value?.uuid === otherValue?.value?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            (o) => o[\"value.uuid - External ID\"] === otherValue?.value?.uuid\n          );\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_2_OTHER,\n            value: opt?.[\"DHIS2 Option Code\"],\n          });\n        }\n\n        const precipitatingEvent3 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_3\n        );\n\n        if (\n          precipitatingEvent3 &&\n          precipitatingEvent3?.value?.uuid === otherValue?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            (o) => o[\"value.uuid - External ID\"] === otherValue?.value?.uuid\n          );\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_3_OTHER,\n            value: opt?.[\"DHIS2 Option Code\"],\n          });\n        }\n      }\n\n      if (encounter.form.description.includes(\"F30-MHPSS Follow-up v2\")) {\n        const missedSession = (encounter) => {\n          if (\n            encounter.obs.find(\n              (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n            )?.value?.display === \"No\"\n          ) {\n            return encounter.encounterDatetime.replace(\"+0000\", \"\");\n          }\n          const lastFollowupEncounter = state.allEncounters.find(\n            (e) =>\n              e.form.description.includes(\"F30-MHPSS Follow-up v2\") &&\n              e.patient.uuid === encounter.patient.uuid &&\n              e.uuid !== encounter.uuid &&\n              e.obs.find(\n                (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n              )?.value?.display === \"No\"\n          );\n\n          if (lastFollowupEncounter) {\n            return lastFollowupEncounter.encounterDatetime.replace(\"+0000\", \"\");\n          }\n\n          const f29Encounter = state.allEncounters.find(\n            (e) =>\n              e.form.description.includes(\"F29-MHPSS Baseline v2\") &&\n              e.patient.uuid === encounter.patient.uuid\n          );\n          if (f29Encounter) {\n            return f29Encounter.encounterDatetime.replace(\"+0000\", \"\");\n          }\n          return undefined;\n        };\n        const mapping = [\n          {\n            dataElement: \"jtKIoKducvE\",\n            value: missedSession(encounter),\n          },\n        ];\n        customMapping.push(...mapping);\n      }\n      if (encounter.form.description.includes(\"F32-mhGAP Follow-up v2\")) {\n        const missedSession = (encounter) => {\n          if (\n            encounter.obs.find(\n              (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n            )?.value?.display === \"No\"\n          ) {\n            return encounter.encounterDatetime.replace(\"+0000\", \"\");\n          }\n          const lastFollowupEncounter = state.allEncounters.find(\n            (e) =>\n              e.form.description.includes(\"F32-mhGAP Follow-up v2\") &&\n              e.patient.uuid === encounter.patient.uuid &&\n              e.uuid !== encounter.uuid &&\n              e.obs.find(\n                (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n              )?.value?.display === \"No\"\n          );\n\n          if (lastFollowupEncounter) {\n            return lastFollowupEncounter.encounterDatetime.replace(\"+0000\", \"\");\n          }\n\n          const f31Encounter = state.allEncounters.find(\n            (e) =>\n              e.form.description.includes(\"F31-mhGAP Baseline v2\") &&\n              e.patient.uuid === encounter.patient.uuid\n          );\n\n          if (f31Encounter) {\n            return f31Encounter.encounterDatetime.replace(\"+0000\", \"\");\n          }\n        };\n        const changeInDiagnosis = (encounter) => {\n          const patientUuid = encounter.patient.uuid;\n          const previousChangeInDiagnosis = state.allEncounters\n            .find(\n              (e) =>\n                e.patient.uuid === patientUuid &&\n                e.form.description.includes(\"F32-mhGAP Follow-up v2\") &&\n                encounter.uuid !== e.uuid\n            )\n            ?.obs.find(\n              (o) => o.concept.uuid === \"22809b19-54ca-4d88-8d26-9577637c184e\"\n            )?.value?.display;\n\n          const currentChangeInDiagnosis = encounter.obs.find(\n            (o) => o.concept.uuid === \"22809b19-54ca-4d88-8d26-9577637c184e\"\n          )?.value?.display;\n\n          if (\n            previousChangeInDiagnosis &&\n            previousChangeInDiagnosis !== currentChangeInDiagnosis\n          ) {\n            return true;\n          }\n\n          return false;\n        };\n        const mapping = [\n          {\n            dataElement: \"fMqEZpiRVZV\",\n            value: missedSession(encounter),\n          },\n          {\n            dataElement: \"XBVRRpgkEvE\",\n            value: changeInDiagnosis(encounter),\n          },\n        ];\n        customMapping.push(...mapping);\n      }\n      if (\n        encounter.form.description.includes(\"F33-MHPSS Closure v2\") ||\n        encounter.form.description.includes(\"F34-mhGAP Closure v2\")\n      ) {\n        const lastScore = encounter.obs.find(\n          (o) => o.concept.uuid === \"90b3d09c-d296-44d2-8292-8e04377fe027\"\n        )?.value;\n\n        const filterOutScore = state.allEncounters.filter((e) => {\n          const obs = e.obs.find(\n            (o) => o.concept.display === \"Mental Health Outcome Scale\"\n          );\n          return e.uuid !== encounter.uuid && obs && obs?.value !== 0;\n        });\n\n        const firstScore = filterOutScore\n          .sort((a, b) => {\n            return (\n              new Date(a.encounterDatetime) - new Date(b.encounterDatetime)\n            );\n          })\n          .at(0)\n          ?.obs.find(\n            (o) => o.concept.display === \"Mental Health Outcome Scale\"\n          )?.value;\n\n        customMapping.push({\n          dataElement: \"b8bjS7ah8Qi\",\n          value: lastScore - firstScore,\n        });\n      }\n      formDataValues = formDataValues.filter(\n        (item) =>\n          item.dataElement !== DATA_ELEMENTS.PRIORITY_1_OTHER &&\n          item.dataElement !== \"KjgDauY9v4J\" &&\n          item.dataElement !== \"DYTLOoEKRas\"\n      );\n\n      return {\n        event: events.find((e) => e.programStage === form.programStage)?.event,\n        program: state.formMaps[encounter.form.uuid]?.programId,\n        orgUnit: state.formMaps[encounter.form.uuid]?.orgUnit,\n        trackedEntity,\n        enrollment,\n        occurredAt: encounter.encounterDatetime.replace(\"+0000\", \"\"),\n        programStage: form.programStage,\n        dataValues: [...formDataValues, ...customMapping],\n      };\n    })\n    .filter(Boolean);\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Create-TEIs-Relationship": {
          "id": "bb4e349e-d6ae-4794-8a6e-2da44b55c263",
          "name": "Create TEIs Relationship",
          "body": "// Check if relationship exist\neach($.relationshipsMapping, get('tracker/relationships', { trackedEntity: $.data.from.trackedEntityInstance.trackedEntityInstance }).then(state => {\n  const relationship = state.references.at(-1)\n  const toTei = relationship.to.trackedEntityInstance.trackedEntityInstance\n  const hasRelationship = state.data.instances.find(r => r.to.trackedEntity.trackedEntity === toTei)\n  state.relationshipsToCreate ??= []\n  if (!hasRelationship) {\n    state.relationshipsToCreate.push(relationship)\n  }\n  return state\n}))\n\n// Creating relationship between parent and child tei\neach($.relationshipsToCreate, create('relationships', $.data))\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        }
      },
      "edges": {
        "cron->Get-Patients": {
          "enabled": true,
          "id": "57a8ef61-a75f-4af2-8152-371d871e21bb",
          "target_job_id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "source_trigger_id": "a30ec52a-4ecc-4dbe-8b44-61c779f6f879",
          "condition_type": "always"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "33cdeb8c-524d-4a9a-8530-647907096741",
          "target_job_id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "source_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state.encounters.length > 0\n"
        },
        "Get-Patients->Mappings": {
          "enabled": true,
          "id": "e2f4678d-270b-430c-82f6-b5553c641def",
          "target_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "source_job_id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "condition_type": "on_job_success"
        },
        "Mappings->Upsert-TEIs": {
          "enabled": true,
          "id": "cec97e34-8c98-473c-87f0-f68391d38f3b",
          "target_job_id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "source_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "c051248f-741e-4eba-8880-bb6a4ddf8883",
          "target_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "source_job_id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Mappings->Get-Encounters": {
          "enabled": true,
          "id": "e48fdb3b-7287-4572-8888-ea1b1206b23d",
          "target_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "source_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        },
        "Create-Events->Update-TEIs": {
          "enabled": true,
          "id": "457fb90b-4b2d-4090-8a95-8539e781044c",
          "target_job_id": "2b12eded-b70a-4f94-8fd2-5fe07a533461",
          "source_job_id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "condition_type": "js_expression",
          "condition_label": "has-gender-updated",
          "condition_expression": "state?.teisToUpdate?.length > 0\n"
        },
        "Event-Mappings->Create-Events": {
          "enabled": true,
          "id": "75db1f32-bff0-4db5-8265-12682e7097f0",
          "target_job_id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "source_job_id": "e62747ec-9cdf-4613-8400-780605fb569e",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors\n"
        },
        "Get-TEIs-and-Map-Answers->Create-TEIs-Relationship": {
          "enabled": true,
          "id": "4d2e6fe6-f7d1-48c5-863c-9d7c886ac0e2",
          "target_job_id": "bb4e349e-d6ae-4794-8a6e-2da44b55c263",
          "source_job_id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "condition_type": "js_expression",
          "condition_label": "relationship-mapping",
          "condition_expression": "state?.relationshipsMapping?.length > 0\n"
        },
        "Create-TEIs-Relationship->Event-Mappings": {
          "enabled": true,
          "id": "14519ad2-8496-4f43-89dd-a9942ac3d077",
          "target_job_id": "e62747ec-9cdf-4613-8400-780605fb569e",
          "source_job_id": "bb4e349e-d6ae-4794-8a6e-2da44b55c263",
          "condition_type": "js_expression",
          "condition_label": "has-child-teis",
          "condition_expression": "state.childTeis && !state.errors\n"
        }
      }
    },
    "wf1-dhis2-omrs-migration": {
      "id": "37e14ed6-2caa-4ee2-8d8a-84bcbbd901e0",
      "name": "wf1-dhis2-omrs-migration",
      "inserted_at": "2025-09-24T08:55:19.225309Z",
      "lock_version": 42,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "836df7a7-d15f-4fc6-8f3d-5bb85c823218",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Fetch-Metadata": {
          "id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "name": "Fetch Metadata",
          "body": "cursor($.manualCursor || $.lastRunDateTime).then((state) => {\n  console.log(\"Date cursor to filter TEI extract ::\", state.cursor);\n  return state;\n});\n\ncursor(\"now\", {\n  key: \"lastRunDateTime\",\n  format: (c) => {\n    const offset = 2; // GMT+2 (Geneva time)\n    c.setHours(c.getHours() + offset);\n    return c.toISOString().replace(\"Z\", \"\");\n  },\n}).then((state) => {\n  console.log(\"Next sync start date:\", state.lastRunDateTime);\n  return state;\n});\n\ncollections.get(\"mosul-metadata-mappings-staging\").then((state) => {\n  state.optsMap = state.data\n    .filter((i) => i.key.includes(\"optsMap-value-\"))\n    .map((i) => i.value);\n\n  state.identifiers = state.data\n    .filter((i) => i.key.includes(\"identifiers-value-\"))\n    .map((i) => i.value);\n\n  state.fileDateModified = state.data.filter(\n    (i) => i.key === \"fileDateModified\"\n  )?.[0]?.value;\n\n  state.formMaps = state.data.find((i) => i.key === \"formMaps\")?.value;\n\n  delete state.data;\n  delete state.references;\n  return state;\n});\n\nfn(({ identifiers, optsMap, formMaps, ...state }) => {\n  state.genderOptions = {\n    male: \"M\",\n    female: \"F\",\n    unknown: \"U\",\n    transgender_female: \"O\",\n    transgender_male: \"O\",\n    prefer_not_to_answer: \"O\",\n    gender_variant_non_conforming: \"O\",\n  };\n  // state.orgUnit = identifiers.find((i) => i.type === \"ORG_UNIT\")?.[\n  //   \"dhis2 attribute id\"\n  // ];\n  // state.program = identifiers.find((i) => i.type === \"PROGRAM\")?.[\n  //   \"dhis2 attribute id\"\n  // ];\n  state.orgUnit = \"sUpt0j2GmBD\"\n\n  state.program = \"dWdzxMuKa8Z\"\n  state.nationalityMap = optsMap\n    .filter((o) => o[\"DHIS2 DE full name\"] === \"Nationality\")\n    .reduce((acc, value) => {\n      acc[value[\"DHIS2 Option Code\"]] = value[\"value.uuid - External ID\"];\n      return acc;\n    }, {});\n\n  state.statusMap = optsMap\n    .filter((o) => {\n      const fullName = o[\"DHIS2 DE full name\"];\n      return fullName && fullName.includes(\" status\");\n    })\n    .reduce((acc, value) => {\n      acc[value[\"DHIS2 Option Code\"]] = value[\"value.uuid - External ID\"];\n      return acc;\n    }, {});\n\n  state.patientAttributes = Object.entries(formMaps.patient.dataValueMap)\n  .filter(([key]) => key !== \"qptKDiv9uPl\")\n  .reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n  state.dhis2PatientNumber = identifiers.find(\n    (i) => i.type === \"DHIS2_PATIENT_NUMBER\"\n  )?.[\"omrs identifierType\"]; //DHIS2 ID or DHIS2 Patient Number\n\n  state.dhis2PatientNumberAttributeId = identifiers.find(\n    (i) => i.type === \"DHIS2_PATIENT_NUMBER\"\n  )?.[\"dhis2 attribute id\"]; //DHIS2 ID or DHIS2 Patient Number\n\n  state.openmrsAutoId = identifiers.find((i) => i.type === \"OPENMRS_AUTO_ID\")?.[\n    \"omrs identifierType\"\n  ]; //MSF ID or OpenMRS Patient Number\n\n  state.openmrsAutoIdAttributeId = identifiers.find(\n    (i) => i.type === \"OPENMRS_AUTO_ID\"\n  )?.[\"dhis2 attribute id\"]; //MSF ID or OpenMRS Patient Number\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Get-Teis-and-Locations": {
          "id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "name": "Get Teis and Locations",
          "body": "const findDuplicatePatient = teis => {\n  const seen = new Map();\n  const duplicates = new Set();\n\n  teis.forEach(tei => {\n    const patientNumber = tei.attributes.find(\n      attr => attr.code === 'patient_number'\n    )?.value;\n\n    if (seen.get(patientNumber)) {\n      duplicates.add(patientNumber);\n    } else {\n      seen.set(patientNumber, tei);\n    }\n  });\n\n  return duplicates;\n};\n// Get teis that are \"active\" in the target program\nget('tracker/trackedEntities', {\n  orgUnit: $.orgUnit,\n  program: $.program,\n  programStatus: 'ACTIVE',\n  updatedAfter: $.cursor,\n  skipPaging: true,\n});\n\nfn(state => {\n  console.log('# of TEIs found before filter ::', state.data.instances.length);\n  const uniqueTeis = [];\n  const duplicatePatients = [];\n  const missingPatientNumber = [];\n  const teisWithOMRSID = [];\n\n  const filteredTeis = state.data.instances.filter(\n    tei => tei.updatedAt >= state.cursor\n  );\n\n  console.log('Filtered TEIs ::', filteredTeis.length);\n  const duplicateIds = findDuplicatePatient(filteredTeis);\n\n  filteredTeis.forEach(tei => {\n    const patientNumber = tei.attributes.find(\n      attr => attr.code === 'patient_number'\n    )?.value;\n    const patientUid = tei.attributes.find(\n      attr => attr.code === 'patient_uid' || attr.displayName === 'OpenMRS patient UID'\n    )?.value;\n\n    if (patientUid) {\n      console.log(\n        `Skipping TEI:: ${tei.trackedEntity}. Found existing patient uid.`\n      );\n      teisWithOMRSID.push(tei)\n    }\n\n    if (!patientNumber) {\n      missingPatientNumber.push(tei);\n    } else if (duplicateIds.has(patientNumber)) {\n      duplicatePatients.push(tei);\n    } else {\n      uniqueTeis.push(tei);\n    }\n  });\n\n  console.log('# of Unique TEIs to migrate to OMRS ::', uniqueTeis.length);\n  console.log('# Duplicate Patients found::', duplicatePatients.length);\n\n  // return { uniqueTeis, duplicatePatients, filteredTeis, missingPatientNumber };\n  return {\n    ...state,\n    data: {},\n    references: [],\n    uniqueTeis,\n    teisWithOMRSID,\n    duplicatePatients,\n    missingPatientNumber,\n  };\n});\n\nget('optionGroups/kdef7pUey9f', {\n  fields: 'id,displayName,options[id,displayName,code]',\n});\n\nfn(({ data, ...state }) => {\n  state.locations = data;\n  return state;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Patients": {
          "id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "name": "Create Patients",
          "body": "//Define gender options and prepare newPatientUuid and identifiers\nfn(state => {\n  const { uniqueTeis } = state;\n  if (uniqueTeis.length > 0)\n    console.log('# of TEIs to send to OpenMRS: ', uniqueTeis.length);\n  if (uniqueTeis.length === 0)\n    console.log('No data fetched in step prior to sync.');\n\n  return state;\n});\n\n//First we generate a unique OpenMRS ID for each patient\neach(\n  $.uniqueTeis,\n  post(\n    'idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier'\n  ).then(state => {\n    state.identifiers ??= [];\n    state.identifiers.push(state.data.identifier);\n    return state;\n  })\n);\n\n// Then we map uniqueTeis to openMRS data model\nfn(state => {\n  const {\n    uniqueTeis,\n    nationalityMap,\n    genderOptions,\n    identifiers,\n    statusMap,\n    locations,\n  } = state;\n\n  const getValueForCode = (attributes, code) => {\n    const result = attributes.find(attribute => attribute.code === code);\n    return result ? result.value : undefined;\n  };\n\n  const calculateDOB = age => {\n    if (!age) return age;\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const birthYear = currentYear - age;\n\n    const birthday = new Date(\n      birthYear,\n      currentDate.getMonth(),\n      currentDate.getDay()\n    );\n\n    return birthday.toISOString().replace(/\\.\\d+Z$/, '+0000');\n  };\n\n  state.patients = uniqueTeis.map((d, i) => {\n    const patientNumber =\n      getValueForCode(d.attributes, 'patient_number') || d.trackedEntity; // Add random number for testing + Math.random()\n\n    const lonlat = d.attributes.find(a => a.attribute === 'rBtrjV1Mqkz')?.value;\n    const location = lonlat\n      ? locations.options.find(o => o.code === lonlat)?.displayName\n      : undefined;\n\n    let countyDistrict, cityVillage;\n\n    if (location) {\n      const match = location.match(/^(.*?)\\s*\\((.*?)\\)/);\n      if (match) {\n        [, countyDistrict, cityVillage] = match;\n        cityVillage = cityVillage.split('-')[0].trim(); // Remove country code and trim\n      }\n    }\n\n    // const attributes = d.attributes\n    //   .filter(a => a.attribute in state.patientAttributes)\n    //   .map(a => {\n    //     let value = a.value;\n\n    //     if (a.displayName === 'Nationality') {\n    //       value = nationalityMap[a.value];\n    //     } else if (a.displayName.includes(' status')) {\n    //       value = statusMap[a.value];\n    //     }\n\n    //     if (value) {\n    //       return {\n    //         attributeType: state.patientAttributes[a.attribute].trim(),\n    //         value,\n    //       };\n    //     }\n    //   })\n    //   .filter(Boolean);\n\n    return {\n      patientNumber,\n      person: {\n        age: getValueForCode(d.attributes, 'age'),\n        gender: genderOptions[getValueForCode(d.attributes, 'sex')] ?? 'U',\n        birthdate:\n          d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ??\n          calculateDOB(getValueForCode(d.attributes, 'age')),\n        // d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ?\n        // calculateDOB(getValueForCode(d.attributes, 'age')) : '1900-01-01',\n        birthdateEstimated: d.attributes.find(\n          a => a.attribute === 'WDp4nVor9Z7'\n        )\n          ? true\n          : false,\n        names: [\n          {\n            familyName:\n              d.attributes.find(a => a.attribute === 'fa7uwpCKIwa')?.value ??\n              'unknown',\n            givenName:\n              d.attributes.find(a => a.attribute === 'Jt9BhFZkvP2')?.value ??\n              'unknown',\n          },\n        ],\n        addresses: [\n          {\n            country: 'Iraq',\n            stateProvince: 'Ninewa',\n            countyDistrict,\n            cityVillage,\n          },\n        ],\n        // attributes,\n      },\n      identifiers: [\n        {\n          identifier: identifiers[i], //OMRS-generated identifier - see above\n          identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location old:44c3efb0-2583-4c80-a79e-1f756a03c0a1\n          preferred: true,\n        },\n        {\n          // uuid: d.trackedEntity,\n          identifier: patientNumber, //Patient Number from DHIS2\n          identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f', //Old Identification number\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location\n          preferred: false, //default value for this identifiertype\n        },\n      ],\n    };\n  });\n\n  return state;\n});\n\n// Creating patients in openMRS\neach(\n  $.patients,\n  upsert(\n    'patient',\n    {\n      q: $.data.patientNumber,\n      limit: 1,\n      startIndex: 0\n    },\n    state => {\n      const { patientNumber, ...patient } = state.data;\n      console.log(\n        'Upserting patient record...',\n        JSON.stringify(patient, null, 2)\n      );\n      return patient;\n    },\n    state => {\n      state.newPatientUuid ??= [];\n      //console.log('state.references ::', state.references)\n      state.newPatientUuid.push({\n        patient_number: state.references.at(-1)?.patientNumber,\n        omrs_patient_number: state.references\n          .at(-1)\n          ?.identifiers.find(\n            i => (i.identifierType === `${state.openmrsAutoId}`)\n          ),\n        uuid: state.data.uuid,\n      });\n      return state;\n    }\n  )\n);\n\n// Clean up state\nfn(({ data, references, ...state }) => state);\n",
          "adaptor": "@openfn/language-openmrs@4.2.0",
          "project_credential_id": "d2c62b09-c071-4cbe-95e5-b703aba863f3"
        },
        "Update-Teis": {
          "id": "f4702169-b017-43da-8e66-5ee3bfa305fb",
          "name": "Update Teis",
          "body": "fn(state => {\n  if (state.newPatientUuid.length === 0) {\n    console.log('No data fetched in step prior to sync.');\n  }\n\n  console.log(\n    'newPatientUuid ::',\n    JSON.stringify(state.newPatientUuid, null, 2)\n  );\n  return state;\n});\n\n// Update TEI on DHIS2\neach(\n  $.newPatientUuid,\n  upsert(\n    'trackedEntityInstances',\n    {\n      ou: $.orgUnit,\n      program: $.program,\n      filter: [`${$.dhis2PatientNumberAttributeId}:Eq:${$.data.patient_number}`],\n    },\n    state => {\n      const payload = {\n        orgUnit: state.orgUnit,\n        program: state.program,\n        trackedEntityType: 'cHlzCA2MuEF',\n        attributes: [\n          {\n            attribute: `${state.dhis2PatientNumberAttributeId}`,\n            value: `${state.data.patient_number}`,\n          }, //DHIS2 patient number to use as lookup key\n          { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n          {\n            attribute: `${state.openmrsAutoIdAttributeId}`,\n            value: `${state.data.omrs_patient_number.identifier}`,\n          }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n        ],\n      }\n\n      console.log('final payload to send to dhis2:', payload)\n      return payload;\n    }\n  )\n  // {\n  //   orgUnit: $.orgUnit,\n  //   program: $.program,\n  //   trackedEntityType: 'cHlzCA2MuEF',\n  //   attributes: [\n  //     {\n  //       attribute: `${$.dhis2PatientNumberAttributeId}`,\n  //       value: `${state.data.patient_number}`,\n  //     }, //DHIS2 patient number to use as lookup key\n  //     { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n  //     {\n  //       attribute: `${state.openmrsAutoIdAttributeId}`,\n  //       value: `${state.data.omrs_patient_number.identifier}`,\n  //     }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n  //   ],\n  // },\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Alert-Admin-of-Duplicate-TEIs": {
          "id": "eaa87fc7-1b9c-4c23-85ef-894fed073145",
          "name": "Alert Admin of Duplicate TEIs",
          "body": "fn(state => {\n  const code = 'DUPLICATE_PATIENT_NUMBERS';\n  const description = `Found ${state.duplicatePatients.length} TIEs with duplicate patient numbers`;\n  const message = `${code}: ${description}`;\n  const patientNumbers = state.duplicatePatients.map(\n    patient =>\n      patient.attributes.find(attr => attr.code === 'patient_number').value\n  );\n\n  const details = {\n    code,\n    description,\n    duplicatePatientNumbers: patientNumbers,\n  };\n  const e = new Error(message);\n  e.details = details;\n  console.error(e.details);\n  throw e;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Validate-TEIs-with-OMRS-Id": {
          "id": "97edd4ca-1cef-48af-827d-fd8d2450c4fe",
          "name": "Validate TEIs with OMRS Id",
          "body": "fn((state) => {\n  state.patientUuids = state.teisWithOMRSID.map((patient) => {\n    return patient.attributes.find(\n      (attr) => attr.displayName === \"OpenMRS patient UID\"\n    )?.value;\n  });\n  state.notFound ??= [];\n  return state;\n});\n\neach(\n  $.patientUuids,\n  get(`patient/${$.data}`).catch((error, state) => {\n    if (error) {\n      const tei = state.teisWithOMRSID.find(\n        (tei) =>\n          tei.attributes.find(\n            (attr) => attr.displayName === \"OpenMRS patient UID\"\n          )?.value === state.data\n      );\n      state.notFound.push({ patient: state.data, tei: tei.trackedEntity });\n    }\n    return state;\n  })\n);\n\nfnIf($.notFound.length > 0, (state) => {\n  const details = state.notFound\n    .map(\n      ({ patient, tei }) =>\n        `Patient not found in OMRS for TEI:${tei} with OMRS ID: ${patient}.`\n    )\n    .join(\"\\n\");\n  const e = new Error(details);\n  throw e;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.2.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        }
      },
      "edges": {
        "cron->Fetch-Metadata": {
          "enabled": true,
          "id": "4f025e3a-80af-47ff-8c25-8891eff0c486",
          "target_job_id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "source_trigger_id": "836df7a7-d15f-4fc6-8f3d-5bb85c823218",
          "condition_type": "always"
        },
        "Fetch-Metadata->Get-Teis-and-Locations": {
          "enabled": true,
          "id": "947f7f92-1205-4fda-8595-4d8025786c35",
          "target_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "source_job_id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "condition_type": "on_job_success"
        },
        "Get-Teis-and-Locations->Create-Patients": {
          "enabled": true,
          "id": "b4e06a4a-f873-407f-824a-39ad2006ccb9",
          "target_job_id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "source_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.uniqueTeis.length > 0 && !state.errors\n"
        },
        "Create-Patients->Update-Teis": {
          "enabled": true,
          "id": "05d88b14-52e6-4f24-8acc-ed0ba455c942",
          "target_job_id": "f4702169-b017-43da-8e66-5ee3bfa305fb",
          "source_job_id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "condition_type": "on_job_success"
        },
        "Get-Teis-and-Locations->Alert-Admin-of-Duplicate-TEIs": {
          "enabled": true,
          "id": "c0260aec-64c9-4f5b-8327-bca677cfdcba",
          "target_job_id": "eaa87fc7-1b9c-4c23-85ef-894fed073145",
          "source_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "condition_type": "js_expression",
          "condition_label": "has-duplicate-patients",
          "condition_expression": "state.duplicatePatients.length > 0 && !state.errors\n"
        },
        "Get-Teis-and-Locations->Validate-TEIs-with-OMRS-Id": {
          "enabled": true,
          "id": "3c86df64-2a6a-42d0-8107-affe53db8190",
          "target_job_id": "97edd4ca-1cef-48af-827d-fd8d2450c4fe",
          "source_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "condition_type": "js_expression",
          "condition_label": "has-teisWithOMRSID",
          "condition_expression": "!state.errors && state. teisWithOMRSID.length > 0\n"
        }
      }
    },
    "wf3-omrs-dhis2": {
      "id": "fb49b01d-dba8-420a-9f4c-b9ca20984ee5",
      "name": "wf3-omrs-dhis2",
      "inserted_at": "2025-09-24T09:40:49.677758Z",
      "lock_version": 38,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "cd9ea573-fb86-4ec4-8c39-200c7de22dfb",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Mappings-from-Collection": {
          "id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "name": "Get Mappings from Collection",
          "body": "const isValidUUID = id => {\n  if (!id || typeof id !== 'string') return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\ncollections.get('mosul-metadata-mappings-staging').then(state => {\n  state.optsMap = state.data\n    .filter(i => i.key.includes('optsMap-value-'))\n    .map(i => i.value);\n\n  state.identifiers = state.data\n    .filter(i => i.key.includes('identifiers-value-'))\n    .map(i => i.value);\n  state.syncedAt = state.data.find(i => i.key === 'syncedAt')?.value;\n  state.formMetadata = state.data.find(i => i.key === 'formMetadata')?.value; // filter form maps where formmap.workflow == \"WF3\"\n  state.placeOflivingMap = state.data.find(i => i.key === 'placeOflivingMap')?.value;\n  state.sourceFile = state.data.filter(i => i.key === 'sourceFile')?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    i => i.key === 'fileDateModified'\n  )?.[0]?.value;\n  state.optionSetKey = state.data.filter(\n    i => i.key === 'optionSetKey'\n  )?.[0]?.value;\n  state.formMaps = state.data.find(i => i.key === 'formMaps')?.value;\n  delete state.data\n  delete state.references\n  return state;\n});\n\n\nfn(state => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      form =>\n        isValidUUID(form['OMRS form.uuid']) &&\n        form['OMRS Form Version'] === 'v4-2025'\n    )\n    .map(form => form['OMRS form.uuid']);\n  rest.formUuids = formMetadata\n    .filter(form => isValidUUID(form['OMRS form.uuid']) &&\n      form['Workflow'] === 'WF3')\n    .map(form => form['OMRS form.uuid']);\n\n  // rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n  //   'dhis2 attribute id'\n  // ];\n\n  rest.orgUnit = \"sUpt0j2GmBD\"\n\n\n  rest.program = \"dWdzxMuKa8Z\"\n\n  rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n\n\nfn(state => {\n  state.genderOptions = state.optsMap\n    .filter(o => o['OptionSet name'] === 'Sex - Patient')\n    .reduce((acc, value) => {\n      acc[value['value.uuid - External ID']] = value['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.3.0",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        },
        "Get-Encounters": {
          "id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "name": "Get Encounters",
          "body": "// Fetch all encounters\nhttp\n  .get('/ws/fhir2/R4/Encounter', {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then(state => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find(l => l.relation === 'next')\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split('/openmrs')[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then(state => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\n\n\nfn(state => {\n  console.log(\n    'Total # of encounters fetched: ',\n    state.allResponse?.entry?.length\n  );\n\n  state.patientUuids = [\n    ...new Set(\n      state.allResponse?.entry?.map(p =>\n        p.resource.subject.reference.replace('Patient/', '')\n      )\n    ),\n  ];\n\n  return state;\n});\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n// Fetch patient encounters\neach(\n  $.patientUuids,\n  get('encounter', { patient: $.data, v: 'full' }).then(state => {\n\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map(formUuid =>\n      state?.data?.results.filter(\n        e =>\n          e.auditInfo.dateCreated >= state.cursor &&\n          e?.form?.uuid === formUuid\n      )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    const encounters = filteredEncounters.map(e => e[0]).filter(e => e);\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n    delay(1500)\n\n    return state;\n  })\n);\n\nfn(state => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map(\n      ({ uuid, patient, obs, form, encounterDatetime }) => ({\n        uuid,\n        patient,\n        obs,\n        form,\n        encounterDatetime,\n      })\n    );\n    console.log(next.encounters.length, '# of new encounters to sync to dhis2');\n  } else {\n    console.log('No encounters found for cursor: ', next.cursor);\n  }\n\n\n  // Group encounters by patient UUID\n  next.encountersByPatient = next.encounters?.reduce((acc, obj) => {\n    const key = obj.patient.uuid;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Create-Events": {
          "id": "2d668d2e-c513-4b58-88bb-8a2d3261d9a2",
          "name": "Create Events",
          "body": "// Create or update events for each encounter create(\ncreate(\"tracker\",\n  {\n    events: (state) => {\n      console.log(\n        \"Creating events for: \",\n        JSON.stringify(state.eventsMapping, null, 2)\n      );\n      return state.eventsMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: \"UID\",\n      importStrategy: \"CREATE_AND_UPDATE\",\n    },\n  }\n);\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Custom-Logic-for-Events": {
          "id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "name": "Custom Logic for Events",
          "body": "const f08Form = \"f0bb3bf7-4e0a-3545-afce-a6b33b0378e4\";\nconst f09Form = \"6e1e468b-00b1-3e5d-a8cf-00f45b8fe261\";\n\nconst processAnswer = (\n  answer,\n  conceptUuid,\n  dataElement,\n  optsMap,\n  optionSetKey\n) => {\n  if (typeof answer.value === \"object\") {\n    const optionKey = `${answer.formUuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      (o) =>\n        o[\"value.uuid - External ID\"] === answer.value.uuid &&\n        o[\"DHIS2 Option Set UID\"] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.[\"DHIS2 Option Code\"] ||\n      opt?.[\"DHIS2 Option name\"] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    // console.log(`matchingOption value: \"${matchingOption}\" for`);\n    // console.log({\n    //   optionKey,\n    //   conceptUid: answer.concept.uuid,\n    //   'answer.value.uid': answer.value.uuid,\n    //   'answer.value.display': answer.value.display,\n    //   matchingOption,\n    //   matchingOptionSet,\n    // });\n\n    if (matchingOption === \"FALSE\" || matchingOption === \"No\") {\n      return \"false\";\n    }\n    if (matchingOption === \"TRUE\" || matchingOption === \"Yes\") {\n      return \"true\";\n    }\n\n    return matchingOption || \"\";\n  }\n\n  return answer.value;\n};\n\nconst processNoAnswer = (encounter, conceptUuid, dataElement) => {\n  const isEncounterDate =\n    conceptUuid === \"encounter-date\" &&\n    [\"CXS4qAJH2qD\", \"I7phgLmRWQq\", \"yUT7HyjWurN\", \"EOFi7nk2vNM\"].includes(\n      dataElement\n    );\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace(\"+0000\", \"\");\n  }\n  return \"\";\n};\n\nconst findAnswerByConcept = (encounter, conceptUuid) => {\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  return answer?.value?.display;\n};\n\n// Helper functions for finding observations\nconst findObsByConcept = (encounter, conceptUuid) =>\n  encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n\n// Helper function to process dataValues from an encounter\nfunction processEncounterDataValues(encounter, form, state) {\n  return Object.keys(form.dataValueMap)\n    .map((dataElement) => {\n      const conceptUuid = form.dataValueMap[dataElement];\n      const obsAnswer = encounter.obs.find(\n        (o) => o.concept.uuid === conceptUuid\n      );\n\n      const answer = {\n        ...obsAnswer,\n        formUuid: encounter.form.uuid,\n      };\n      const value = answer\n        ? processAnswer(\n          answer,\n          conceptUuid,\n          dataElement,\n          state.optsMap,\n          state.optionSetKey\n        )\n        : processNoAnswer(encounter, conceptUuid, dataElement);\n\n      return { dataElement, value };\n    })\n    .filter((d) => d);\n}\n\nfn((state) => {\n  state.eventsMapping = Object.entries(state.encountersByPatient)\n    .map(([patientUuid, encounters]) => {\n      // Skip if we don't have exactly 2 encounters\n      if (encounters.length !== 2) return null;\n\n\n      // Get the forms for both encounters\n      const form1 = state.formMaps[encounters[0].form.uuid];\n      const form2 = state.formMaps[encounters[1].form.uuid];\n\n      // Skip if either form doesn't have dataValueMap\n      if (!form1?.dataValueMap || !form2?.dataValueMap) return null;\n      const f8Encounter = encounters.find(e => e.form.uuid === f08Form)\n      const obsDatetime = findObsByConcept(f8Encounter, '7f00c65d-de60-467a-8964-fe80c7a85ef0')?.obsDatetime\n\n      const datePart = obsDatetime.substring(0, 10);\n      const timePart = obsDatetime.substring(11, 19);\n      const f8Mapping = [\n        {\n          dataElement: \"yprMS34o8s3\",\n          value: f8Encounter.encounterDatetime\n        },\n        {\n          dataElement: \"iQio7NYSA3m\",\n          value: datePart\n        },\n        {\n          dataElement: \"yprMS34o8s3\",\n          value: timePart\n        }\n      ]\n\n\n      const tei = state.TEIs[patientUuid];\n      console.log({ tei, patientUuid })\n\n      const attributeMap = {\n        \"Lg1LrNf9LQR\": \"qptKDiv9uPl\",\n        \"OVo3FxLURtH\": \"k26cdlS78i9\",\n        \"f3n6kIB9IbI\": \"Rv8WM2mTuS5\",\n        \"oc9zlhOoWmP\": \"YUIQIA2ClN6\",\n        \"DbyD9bbGIvE\": \"Qq6xQ2s6LO8\",\n        \"fiPFww1viBB\": \"rBtrjV1Mqkz\",\n        \"FsL5BjQocuo\": \"Xvzc9e0JJmp\"\n      };\n\n      const f9Mapping = Object.entries(attributeMap)\n        .map(([dataElement, attributeId]) => {\n          const value = tei?.attributes?.find(attr => attr.attribute === attributeId)?.value;\n\n          return { dataElement, value };\n        })\n        .filter(Boolean);\n\n      // Combine dataValues from both encounters\n      const formDataValues = [\n        ...f8Mapping,\n        ...f9Mapping,\n        ...processEncounterDataValues(encounters[0], form1, state),\n        ...processEncounterDataValues(encounters[1], form2, state),\n      ].filter(d => d.value)\n\n      // Use properties from the first encounter for the event metadata\n      // (or choose which encounter to use for each field)\n      return {\n        program: form1.programId,\n        orgUnit: form1.orgUnit,\n        occurredAt: encounters[0].encounterDatetime.replace(\"+0000\", \"\"),\n        programStage: form1.programStage,\n        dataValues: formDataValues,\n        trackedEntityInstance: patientUuid,\n      };\n    })\n    .filter(Boolean);\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Get-Patients": {
          "id": "51485ee3-05c2-4690-8da6-9b962b6c19d5",
          "name": "Get Patients",
          "body": "// Enable test mode\nconst testMode = false\n\ncursor($.lastRunDateTime || $.manualCursor || '2025-03-20T06:01:24.000Z');\n\ncursor('today', {\n  key: 'lastRunDateTime',\n  format: c => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: 'IQ', v: 'full', includeVoide: true, limit: '100' });\n\nfn(state => {\n  const { cursor, data, lastRunDateTime } = state;\n  console.log('Filtering patients since cursor:', cursor);\n\n  const patients = data.results.filter(({ auditInfo }) => {\n    const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n    return lastModified > cursor;\n  });\n  console.log('# of patients to sync to dhis2 ::', patients.length);\n  console.log(\n    'uuids of patients to sync to dhis2 ::',\n    patients.map(p => p.uuid)\n  );\n\n  return { cursor, lastRunDateTime, patients, testMode };\n});\n\n// get patient - log number of patient that are fetched\n\n// get collections neccessary for patient mapping\n\n// map patient here - this will be passed down to next step\n\n// delete the initial patient object and only pass on the mapped one\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Upsert-TEIs": {
          "id": "f628007a-5a2c-463f-9de3-d2e465f95aae",
          "name": "Upsert TEIs",
          "body": "const buildPatientsUpsert = (state, patient, isNewPatient) => {\n  const { placeOflivingMap, genderOptions } = state;\n  const dateCreated = patient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find(i => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const enrollments = [\n    {\n      orgUnit: state.orgUnit,\n      program: state.program, // searching by MH program but change this EMR\n      programStage: state.patientProgramStage, //'MdTtRixaC1B',\n      enrollmentDate: dateCreated,\n    },\n  ];\n\n  const findOptsUuid = uuid =>\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value\n      ?.uuid ||\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value;\n\n  const findOptCode = optUuid =>\n    state.optsMap.find(o => o['value.uuid - External ID'] === optUuid)?.[\n      'DHIS2 Option Code'\n    ];\n\n  const patientMap = state.formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map(d => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: 'fa7uwpCKIwa',\n      value: patient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: 'Jt9BhFZkvP2',\n      value: patient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: 'P4wdYGkldeG', //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(patient.identifiers, state.dhis2PatientNumber) ||\n        findIdentifierByUuid(patient.identifiers, state.openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: 'ZBoxuExmxcZ', //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(patient.identifiers, state.openmrsAutoId),\n    },\n    {\n      attribute: 'AYbfTPYMNJH', //\"OpenMRS Patient UID\"\n      value: patient.uuid,\n    },\n    {\n      attribute: 'qptKDiv9uPl',\n      value: genderOptions[patient.person.gender],\n    },\n    {\n      attribute: 'T1iX2NuPyqS',\n      value: patient.person.age,\n    },\n    {\n      attribute: 'WDp4nVor9Z7',\n      value: patient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: 'rBtrjV1Mqkz', //Place of living\n      value: placeOflivingMap[patient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter(a => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter(a => a.value);\n  //console.log('standardAttr ::', JSON.stringify(standardAttr, null,2))\n  //console.log('filteredAttr ::', JSON.stringify(filteredAttr, null,2))\n\n  const payload = {\n    query: {\n      ou: state.orgUnit,\n      program: state.program,\n      filter: [`AYbfTPYMNJH:Eq:${patient.uuid}`], //upsert on omrs.patient.uid\n    },\n    data: {\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntityType: 'cHlzCA2MuEF',\n      attributes: [...filteredAttr, ...filteredStatusAttr],\n    },\n  };\n\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (isNewPatient) {\n    console.log('create enrollment');\n    payload.data.enrollments = enrollments;\n  }\n\n  return payload;\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\neach(\n  $.patients,\n  get(\n    'tracker/trackedEntities',\n    {\n      orgUnit: $.orgUnit,\n      filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],\n      program: $.program,\n    },\n    {},\n    async state => {\n      const patient = state.references.at(-1);\n      console.log(patient.uuid, 'patient uuid');\n\n      const isNewPatient = state.data.instances.length === 0;\n\n      state.patientsUpsert ??= [];\n      state.patientsUpsert.push(\n        buildPatientsUpsert(state, patient, isNewPatient)\n      );\n      await delay(2000);\n      return state;\n    }\n  )\n);\n\n// Upsert TEIs to DHIS2\neach(\n  $.patientsUpsert,\n  upsert('trackedEntityInstances', $.data.query, $.data.data)\n);\nfn(state => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    genderOptions,\n    identifiers,\n    ...next\n  } = state;\n\n  next.patientUuids = patients.map(p => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "7a1831ef-a388-4565-bf44-d603fdd19871",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n//TODO: Group the encounters by patient and then get the TEI for each patient\neach(\n  $.encounters,\n  get('tracker/trackedEntities', state => ({\n    orgUnit: $.orgUnit,\n    program: $.program,\n    // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n    fields: '*,enrollments[*],enrollments[events[*]], attributes[*]',\n  })).then(async state => {\n    const encounter = state.references.at(-1);\n    console.log(encounter.patient.uuid, 'Encounter patient uuid');\n\n    const { trackedEntity, enrollments, attributes } = state.data?.instances?.[0] || {};\n    if (trackedEntity && enrollments) {\n      state.TEIs ??= {};\n      state.TEIs[encounter.patient.uuid] = {\n        trackedEntity,\n        events: enrollments[0]?.events,\n        enrollment: enrollments[0]?.enrollment,\n        attributes\n      };\n    }\n\n    await delay(2000);\n    return state;\n  })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Tie": {
          "id": "47c1397c-a146-4511-bada-7ab0bd07b123",
          "name": "Get Tie",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst patientUid = \"d464433d-41d5-482f-808c-7fe364847352\"\n//TODO: Group the encounters by patient and then get the TEI for each patient\nget('tracker/trackedEntities', state => ({\n  orgUnit: \"sUpt0j2GmBD\",\n  program: \"dWdzxMuKa8Z\",\n  // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  filter: [`AYbfTPYMNJH:Eq:${patientUid}`],\n  fields: '*,enrollments[*],enrollments[events[*]], attributes[*]',\n})).then(async state => {\n  \n  console.log(patientUid, 'Encounter patient uuid');\n\n  const { trackedEntity, enrollments, attributes } = state.data?.instances?.[0] || {};\n  if (trackedEntity && enrollments) {\n    state.TEIs ??= {};\n    state.TEIs[patientUid] = {\n      trackedEntity,\n      events: enrollments[0]?.events,\n      enrollment: enrollments[0]?.enrollment,\n      attributes\n    };\n  }\n\n  await delay(2000);\n  return state;\n})\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        }
      },
      "edges": {
        "Custom-Logic-for-Events->Create-Events": {
          "enabled": true,
          "id": "168e2969-4f85-4c05-843c-445ca7102086",
          "target_job_id": "2d668d2e-c513-4b58-88bb-8a2d3261d9a2",
          "source_job_id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors && !state.testMode\n"
        },
        "Get-Mappings-from-Collection->Get-Encounters": {
          "enabled": true,
          "id": "d9d6c1fb-627e-491e-88b1-ed2575e77de3",
          "target_job_id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "source_job_id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        },
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "1d37cfc8-1a71-4cc8-809d-583d6d8b8fca",
          "target_job_id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "source_job_id": "f628007a-5a2c-463f-9de3-d2e465f95aae",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Get-Patients->Get-Mappings-from-Collection": {
          "enabled": true,
          "id": "15dc93e4-fb96-4cc5-b0c3-c0bd544bdc6d",
          "target_job_id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "source_job_id": "51485ee3-05c2-4690-8da6-9b962b6c19d5",
          "condition_type": "on_job_success"
        },
        "Get-TEIs-and-Map-Answers->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "9eb6f99d-434c-4b47-ab4b-058a5930435c",
          "target_job_id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "source_job_id": "7a1831ef-a388-4565-bf44-d603fdd19871",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.TEIs && !state.errors\n"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "bd5834d4-b481-47f0-b497-c56dbd05ed03",
          "target_job_id": "7a1831ef-a388-4565-bf44-d603fdd19871",
          "source_job_id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state?.encounters?.length > 0\n"
        },
        "cron->Get-Patients": {
          "enabled": true,
          "id": "d681f4f9-4e4f-415f-a52c-a6fcd9f2740b",
          "target_job_id": "51485ee3-05c2-4690-8da6-9b962b6c19d5",
          "source_trigger_id": "cd9ea573-fb86-4ec4-8c39-200c7de22dfb",
          "condition_type": "always"
        },
        "Get-Mappings-from-Collection->Upsert-TEIs": {
          "enabled": true,
          "id": "7b001148-c273-49f5-9582-09979cbd4ca9",
          "target_job_id": "f628007a-5a2c-463f-9de3-d2e465f95aae",
          "source_job_id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Get-Tie->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "80f9eb77-8bc4-4557-8c9b-907ab7408473",
          "target_job_id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "source_job_id": "47c1397c-a146-4511-bada-7ab0bd07b123",
          "condition_type": "js_expression",
          "condition_label": "test-mode",
          "condition_expression": "state.testMode\n"
        }
      }
    },
    "wf3-omrs-dhis2-143": {
      "id": "6cf04c6e-2906-4ffd-b277-bfd1f3a8eb49",
      "name": "wf3-omrs-dhis2-143",
      "inserted_at": "2025-09-24T16:18:15.035771Z",
      "lock_version": 2,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "460fb29f-b62c-4895-8beb-eabd6db1dfaa",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Mappings-from-Collection": {
          "id": "670fcfc4-15d2-4165-8298-e1b18051abc9",
          "name": "Get Mappings from Collection",
          "body": "const isValidUUID = (id) => {\n  if (!id || typeof id !== \"string\") return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\ncollections.get(\"mosul-metadata-mappings-staging\").then((state) => {\n  state.optsMap = state.data\n    .filter((i) => i.key.includes(\"optsMap-value-\"))\n    .map((i) => i.value);\n\n  state.identifiers = state.data\n    .filter((i) => i.key.includes(\"identifiers-value-\"))\n    .map((i) => i.value);\n  state.syncedAt = state.data.find((i) => i.key === \"syncedAt\")?.value;\n  state.formMetadata = state.data.find((i) => i.key === \"formMetadata\")?.value;\n  state.placeOflivingMap = state.data.find(\n    (i) => i.key === \"placeOflivingMap\"\n  )?.value;\n  state.sourceFile = state.data.filter(\n    (i) => i.key === \"sourceFile\"\n  )?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    (i) => i.key === \"fileDateModified\"\n  )?.[0]?.value;\n  state.formMaps = state.data.find((i) => i.key === \"formMaps\")?.value;\n\n  // TODO: Remove state.optionSetKey, when needed\n  // Build from state.formMaps\n  state.optionSetKey = state.data.filter(\n    (i) => i.key === \"optionSetKey\"\n  )?.[0]?.value;\n\n  delete state.data;\n  delete state.references;\n  return state;\n});\n\nfn((state) => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      (form) =>\n        isValidUUID(form[\"OMRS form.uuid\"]) &&\n        form[\"OMRS Form Version\"] === \"v4-2025\"\n    )\n    .map((form) => form[\"OMRS form.uuid\"]);\n  rest.formUuids = formMetadata\n    .filter(\n      (form) =>\n        isValidUUID(form[\"OMRS form.uuid\"]) && form[\"Workflow\"] === \"WF3\"\n    )\n    .map((form) => form[\"OMRS form.uuid\"]);\n\n  // rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n  //   'dhis2 attribute id'\n  // ];\n\n  rest.orgUnit = \"sUpt0j2GmBD\";\n\n  rest.program = \"dWdzxMuKa8Z\";\n\n  rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    (i) => i.type === \"DHIS2_PATIENT_NUMBER\"\n  )?.[\"omrs identifierType\"]; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find((i) => i.type === \"OPENMRS_AUTO_ID\")?.[\n    \"omrs identifierType\"\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n",
          "adaptor": "@openfn/language-common@2.3.0",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        },
        "Get-Encounters": {
          "id": "f5714271-8296-4787-8b5b-75e1de3c5325",
          "name": "Get Encounters",
          "body": "function removeLinks(data) {\n  if (Array.isArray(data)) {\n    return data.map(removeLinks);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const { links, ...rest } = data;\n    return Object.fromEntries(\n      Object.entries(rest).map(([key, value]) => [key, removeLinks(value)])\n    );\n  }\n\n  return data;\n}\n\nfunction removeNulls(data) {\n  if (Array.isArray(data)) {\n    return data.filter((item) => item !== null).map(removeNulls);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const result = {};\n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null) {\n        result[key] = removeNulls(value);\n      }\n    }\n    return result;\n  }\n\n  return data;\n}\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n// Fetch patient encounters\neach(\n  $.patientUuids,\n  get(\"encounter\", { patient: $.data, v: \"full\" }).then((state) => {\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map((formUuid) =>\n      state?.data?.results\n        .filter(\n          (e) =>\n            e.auditInfo.dateCreated >= state.cursor &&\n            e?.form?.uuid === formUuid\n        )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    // Why we only keep the latest one form encounter?\n    const encounters = filteredEncounters.map((e) => e[0]).filter((e) => e);\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n    delay(1500);\n\n    return state;\n  })\n);\n\nfn((state) => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map((encounter) => {\n      const { uuid, patient, obs, form, encounterDatetime } = removeLinks(\n        removeNulls(encounter)\n      );\n\n      return {\n        uuid,\n        patient: {\n          uuid: patient.uuid,\n          display: patient.display,\n        },\n        obs: obs.map((o) => {\n          return {\n            uuid: o.uuid,\n            concept: o.concept,\n            display: o.display,\n            formFieldPath: o.formFieldPath,\n            value: o.value,\n          };\n        }),\n        form: {\n          uuid: form.uuid,\n          display: form.display,\n          description: form.description,\n          name: form.name,\n        },\n        encounterDatetime,\n      };\n    });\n    console.log(next.encounters.length, \"# of new encounters to sync to dhis2\");\n  } else {\n    console.log(\"No encounters found for cursor: \", next.cursor);\n  }\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Create-Events": {
          "id": "9f87b3cd-2595-4d4c-8f30-a3aa1724c16f",
          "name": "Create Events",
          "body": "// Create or update events for each encounter create(\ncreate(\n  \"tracker\",\n  {\n    events: (state) => {\n      console.log(\n        \"Creating events for: \",\n        JSON.stringify(state.eventsMapping, null, 2)\n      );\n      return state.eventsMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: \"UID\",\n      importStrategy: \"CREATE_AND_UPDATE\",\n    },\n  }\n);\n\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Custom-Logic-for-Events": {
          "id": "8fcc9c0f-f395-4b94-894a-6c38092a453c",
          "name": "Custom Logic for Events",
          "body": "const f08Form = \"f0bb3bf7-4e0a-3545-afce-a6b33b0378e4\";\nconst f09Form = \"6e1e468b-00b1-3e5d-a8cf-00f45b8fe261\";\nconst f27Form = \"ac97ec76-5647-3153-b4e1-2eceae121e50\";\nconst f28Form = \"893ef4b7-5ad1-39e7-8515-eab308ccd636\";\n\nconst findAnswerByConcept = (encounter, conceptUuid) => {\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  return answer?.value?.display;\n};\n\n// Helper functions for finding observations\nconst findObsByConcept = (encounter, conceptUuid) => {\n  const [conceptId, questionId] = conceptUuid.split(\"-rfe-\");\n  const answer = encounter.obs.find(\n    (o) =>\n      o.concept.uuid === conceptId &&\n      (questionId ? o.formFieldPath === `rfe-${questionId}` : true)\n  );\n  return answer;\n};\n\nconst findDataValue = (encounter, dataElement, metadataMap) => {\n  const { optsMap, optionSetKey, form } = metadataMap;\n  const [conceptUuid, questionId] =\n    form.dataValueMap[dataElement]?.split(\"-rfe-\");\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  const isObjectAnswer = answer && typeof answer.value === \"object\";\n  const isStringAnswer = answer && typeof answer.value === \"string\";\n\n  if (isStringAnswer) {\n    return answer.value;\n  }\n\n  if (isObjectAnswer) {\n    const optionKey = questionId\n      ? `${encounter.form.uuid}-${answer.concept.uuid}-rfe-${questionId}`\n      : `${encounter.form.uuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      (o) =>\n        o[\"value.uuid - External ID\"] === answer.value.uuid &&\n        o[\"DHIS2 Option Set UID\"] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.[\"DHIS2 Option Code\"] ||\n      opt?.[\"DHIS2 Option name\"] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    if ([\"FALSE\", \"No\"].includes(matchingOption)) return \"false\";\n    if ([\"TRUE\", \"Yes\"].includes(matchingOption)) return \"true\";\n\n    return matchingOption;\n  }\n\n  const isEncounterDate =\n    conceptUuid === \"encounter-date\" &&\n    [\"CXS4qAJH2qD\", \"I7phgLmRWQq\", \"yUT7HyjWurN\", \"EOFi7nk2vNM\"].includes(\n      dataElement\n    );\n\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace(\"+0000\", \"\");\n  }\n\n  return \"\";\n};\n// Helper function to process dataValues from an encounter\nfunction processEncounterDataValues(encounter, form, state) {\n  return Object.keys(form.dataValueMap)\n    .map((dataElement) => {\n      const value = findDataValue(encounter, dataElement, {\n        optsMap: state.optsMap,\n        optionSetKey: state.optionSetKey,\n        form,\n      });\n\n      return { dataElement, value };\n    })\n    .filter((d) => d);\n}\n\nconst MILLISECONDS_PER_YEAR = 365.25 * 24 * 60 * 60 * 1000;\nconst calculateAge = (dob) =>\n  Math.floor((new Date() - new Date(dob)) / MILLISECONDS_PER_YEAR);\n\nfn((state) => {\n  // Group encounters by patient UUID\n  const encountersByPatient = state.encounters?.reduce((acc, obj) => {\n    const key = obj.patient.uuid;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n\n  state.eventsMapping = Object.entries(encountersByPatient)\n    .map(([patientUuid, encounters]) => {\n      // Skip if we don't have exactly 2 encounters\n      if (encounters.length !== 2) return null;\n\n      // Get the forms for both encounters\n      const form1 = state.formMaps[encounters[0].form.uuid];\n      const form2 = state.formMaps[encounters[1].form.uuid];\n\n      // Skip if either form doesn't have dataValueMap\n\n      if (!form1?.dataValueMap || !form2?.dataValueMap) {\n        return null;\n      }\n      let encountersMapping = [];\n      const f8Encounter = encounters.find((e) => e.form.uuid === f08Form);\n\n      if (f8Encounter) {\n        const obsDatetime = findObsByConcept(\n          f8Encounter,\n          \"7f00c65d-de60-467a-8964-fe80c7a85ef0\"\n        )?.obsDatetime;\n\n        const datePart = obsDatetime.substring(0, 10);\n        const timePart = obsDatetime.substring(11, 19);\n        const f8Mapping = [\n          {\n            dataElement: \"yprMS34o8s3\",\n            value: f8Encounter.encounterDatetime,\n          },\n          {\n            dataElement: \"iQio7NYSA3m\",\n            value: datePart,\n          },\n          {\n            dataElement: \"yprMS34o8s3\",\n            value: timePart,\n          },\n        ];\n        encountersMapping.push(...f8Mapping);\n      }\n\n      const f27Encounter = encounters.find((e) => e.form.uuid === f27Form);\n\n      if (f27Encounter) {\n        const admissionDate = findObsByConcept(\n          f27Encounter,\n          \"7f00c65d-de60-467a-8964-fe80c7a85ef0\"\n        )?.value;\n\n        const f27Mapping = [\n          {\n            dataElement: \"eYvDzr2m8f5\",\n            value: admissionDate,\n          },\n        ];\n        encountersMapping.push(...f27Mapping);\n      }\n\n      const tei = state.TEIs[patientUuid];\n      if (tei) {\n        const attributeMap = {\n          Lg1LrNf9LQR: \"qptKDiv9uPl\",\n          OVo3FxLURtH: \"k26cdlS78i9\",\n          f3n6kIB9IbI: \"Rv8WM2mTuS5\",\n          oc9zlhOoWmP: \"YUIQIA2ClN6\",\n          DbyD9bbGIvE: \"Qq6xQ2s6LO8\",\n          fiPFww1viBB: \"rBtrjV1Mqkz\",\n          FsL5BjQocuo: \"Xvzc9e0JJmp\",\n          //F28 DSHI2 UID\n          WP5vr8KB2lH: \"qptKDiv9uPl\",\n          Y7qzoa4Qaiz: \"YUIQIA2ClN6\",\n          XCUd9xOGXkn: \"Qq6xQ2s6LO8\",\n          onKT21rxH6Z: \"rBtrjV1Mqkz\",\n          sCKCNreiqEA: \"Xvzc9e0JJmp\",\n        };\n\n        const attributeMapping = Object.entries(attributeMap)\n          .map(([dataElement, attributeId]) => {\n            const value = tei?.attributes?.find(\n              (attr) => attr.attribute === attributeId\n            )?.value;\n\n            return { dataElement, value };\n          })\n          .filter(Boolean);\n\n        let age = tei?.attributes?.find(\n          (attr) => attr.attribute === \"T1iX2NuPyqS\"\n        )?.value;\n\n        if (!age) {\n          const birthdate = tei?.attributes?.find(\n            (attr) => attr.attribute === \"WDp4nVor9Z7\"\n          )?.value;\n          age = calculateAge(birthdate);\n        }\n\n        const f28Mapping = [\n          {\n            dataElement: \"NWOnMq8h4w1\",\n            value: age,\n          },\n        ];\n        encountersMapping.push(...attributeMapping, ...f28Mapping);\n      }\n\n      // Combine dataValues from both encounters\n      const formDataValues = [\n        ...encountersMapping,\n        ...processEncounterDataValues(encounters[0], form1, state),\n        ...processEncounterDataValues(encounters[1], form2, state),\n      ].filter((d) => d.value);\n\n      // Use properties from the first encounter for the event metadata\n      // (or choose which encounter to use for each field)\n      return {\n        program: form1.programId,\n        orgUnit: form1.orgUnit,\n        occurredAt: encounters[0].encounterDatetime.replace(\"+0000\", \"\"),\n        programStage: form1.programStage,\n        dataValues: formDataValues,\n        trackedEntityInstance: patientUuid,\n      };\n    })\n    .filter(Boolean);\n\n  return state;\n});\n\nfn((state) => {\n  return {\n    eventsMapping: state.eventsMapping,\n  };\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Get-Patients": {
          "id": "1781967e-add7-4286-84b8-4b126e698a87",
          "name": "Get Patients",
          "body": "function removeLinks(data) {\n  if (Array.isArray(data)) {\n    return data.map(removeLinks);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const { links, ...rest } = data;\n    return Object.fromEntries(\n      Object.entries(rest).map(([key, value]) => [key, removeLinks(value)])\n    );\n  }\n\n  return data;\n}\n\nfunction removeNulls(data) {\n  if (Array.isArray(data)) {\n    return data.filter((item) => item !== null).map(removeNulls);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const result = {};\n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null) {\n        result[key] = removeNulls(value);\n      }\n    }\n    return result;\n  }\n\n  return data;\n}\ncursor($.lastRunDateTime || $.manualCursor || \"2025-03-20T06:01:24.000Z\");\n\ncursor(\"today\", {\n  key: \"lastRunDateTime\",\n  format: (c) => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({\n  q: \"IQ146-25-012-289\",\n  v: \"full\",\n  includeVoide: true,\n  limit: \"100\",\n});\n\nfn((state) => {\n  const { cursor, data, lastRunDateTime } = state;\n  console.log(\"Filtering patients since cursor:\", cursor);\n\n  state.patients = data.results\n    .filter(({ auditInfo }) => {\n      const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n      return lastModified > cursor;\n    })\n    .map((p) => {\n      const { uuid, auditInfo, identifiers, person } = removeLinks(\n        removeNulls(p)\n      );\n      const { dateCreated } = auditInfo;\n      const { age, birthdate, gender, names, addresses, attributes } = person;\n\n      return {\n        uuid,\n        person: {\n          age,\n          birthdate,\n          gender,\n          names,\n          addresses: [addresses.find((a) => a.cityVillage)],\n          attributes,\n        },\n        identifiers,\n        auditInfo: { dateCreated },\n      };\n    });\n  state.searchPatientUuids = state.patients.map((p) => p.uuid);\n  console.log(\"# of patients to sync to dhis2 ::\", state.patients.length);\n\n  return state;\n});\n\n// Fetch all encounters\nhttp\n  .get(\"/ws/fhir2/R4/Encounter\", {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then((state) => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find((l) => l.relation === \"next\")\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split(\"/openmrs\")[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then((state) => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\nfn((state) => {\n  console.log(\n    \"Total # of encounters fetched: \",\n    state.allResponse?.entry?.length\n  );\n\n  const uuids = [\n    ...new Set(\n      state.allResponse?.entry?.map((p) =>\n        p.resource?.subject?.reference?.replace(\"Patient/\", \"\")\n      )\n    ),\n  ];\n  state.encounterPatientUuids = [...new Set(uuids)];\n\n  return state;\n});\n\nfn((state) => {\n  const {\n    cursor,\n    lastRunDateTime,\n    patients,\n    searchPatientUuids,\n    encounterPatientUuids,\n  } = state;\n\n  const onlyInSearchPatient = searchPatientUuids.filter(\n    (id) => !encounterPatientUuids.includes(id)\n  );\n\n  const onlyInR4Encounter = encounterPatientUuids.filter(\n    (id) => !searchPatientUuids.includes(id)\n  );\n  const inbothResults = searchPatientUuids.filter((id) =>\n    encounterPatientUuids.includes(id)\n  );\n  const patientUuids = [...new Set(searchPatientUuids, encounterPatientUuids)];\n\n  console.log(\"inbothResults\", inbothResults.length);\n  console.log(\"patient-search-array\", onlyInSearchPatient.length);\n  console.log(\"r4-encounter-array\", onlyInR4Encounter.length);\n  console.log(\"combined uuids\", patientUuids.length);\n\n  return { cursor, lastRunDateTime, patients, patientUuids };\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Upsert-TEIs": {
          "id": "09e2ef30-140a-4dae-8972-351cf449119d",
          "name": "Upsert TEIs",
          "body": "const buildTeiMapping = (omrsPatient, patientTei, mappingConfig) => {\n  const genderMap = {\n    M: \"male\",\n    O: \"unknown\",\n    F: \"female\",\n    U: \"unknown\",\n  };\n  const {\n    orgUnit,\n    program,\n    optsMap,\n    formMaps,\n    placeOflivingMap,\n    patientProgramStage,\n    dhis2PatientNumber,\n    openmrsAutoId,\n  } = mappingConfig;\n\n  const enrolledAt = omrsPatient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find((i) => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const findOptsUuid = (uuid) =>\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value?.uuid ||\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value;\n\n  const findOptCode = (optUuid) =>\n    optsMap.find((o) => o[\"value.uuid - External ID\"] === optUuid)?.[\n      \"DHIS2 Option Code\"\n    ];\n\n  const patientMap = formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map((d) => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: \"fa7uwpCKIwa\",\n      value: omrsPatient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: \"Jt9BhFZkvP2\",\n      value: omrsPatient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: \"P4wdYGkldeG\", //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(omrsPatient.identifiers, dhis2PatientNumber) ||\n        findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: \"ZBoxuExmxcZ\", //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId),\n    },\n    {\n      attribute: \"AYbfTPYMNJH\", //\"OpenMRS Patient UID\"\n      value: omrsPatient.uuid,\n    },\n\n    {\n      attribute: \"T1iX2NuPyqS\",\n      value: omrsPatient.person.age,\n    },\n    {\n      attribute: \"WDp4nVor9Z7\",\n      value: omrsPatient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: \"rBtrjV1Mqkz\", //Place of living\n      value: placeOflivingMap[omrsPatient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter((a) => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter((a) => a.value);\n\n  const payload = {\n    program,\n    orgUnit,\n    attributes: [...filteredAttr, ...filteredStatusAttr],\n  };\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (!patientTei) {\n    payload.trackedEntityType = \"cHlzCA2MuEF\";\n    const enrollments = [\n      {\n        orgUnit,\n        program,\n        enrolledAt,\n        programStage: patientProgramStage, //'MdTtRixaC1B',\n      },\n    ];\n    payload.attributes.push({\n      attribute: \"qptKDiv9uPl\",\n      value: genderMap[omrsPatient.person.gender],\n    });\n    console.log(\"create enrollment\");\n    payload.enrollments = enrollments;\n  } else {\n    payload.trackedEntity = patientTei.trackedEntity;\n    payload.trackedEntityType = patientTei.trackedEntityType;\n  }\n\n  return payload;\n};\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nget(\"tracker/trackedEntities\", {\n  orgUnit: $.orgUnit,\n  filter: (state) => [\n    `AYbfTPYMNJH:IN:${state.patients.map((patient) => patient.uuid).join(\";\")}`,\n  ],\n  program: $.program,\n});\n\nfn((state) => {\n  const findTeiByUuid = (patientUuid) => {\n    return state.data.instances.find((tei) => {\n      return (\n        tei.attributes.find(\n          (attribute) => attribute.attribute === \"AYbfTPYMNJH\"\n        )?.value === patientUuid\n      );\n    });\n  };\n\n  state.patientsMapping = state.patients.map((patient) => {\n    const patientTei = findTeiByUuid(patient.uuid);\n\n    return buildTeiMapping(patient, patientTei, {\n      placeOflivingMap: state.placeOflivingMap,\n      orgUnit: state.orgUnit,\n      program: state.program,\n      patientProgramStage: state.patientProgramStage,\n      formMaps: state.formMaps,\n      optsMap: state.optsMap,\n      dhis2PatientNumber: state.dhis2PatientNumber,\n      openmrsAutoId: state.openmrsAutoId,\n    });\n  });\n\n  return state;\n});\n\n// Bulk upsert\ncreate(\n  \"tracker\",\n  { trackedEntities: $.patientsMapping },\n  {\n    params: {\n      atomicMode: \"ALL\",\n      async: false,\n    },\n  }\n);\n\nfn((state) => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    identifiers,\n    ...next\n  } = state;\n  next.patientUuids = patients.map((p) => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "809dc65f-3f7e-4078-8a64-09f1e83021f1",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n//TODO: Group the encounters by patient and then get the TEI for each patient\neach(\n  $.encounters,\n  get(\"tracker/trackedEntities\", (state) => ({\n    orgUnit: $.orgUnit,\n    program: $.program,\n    // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n    fields: \"*,enrollments[*],enrollments[events[*]], attributes[*]\",\n  })).then(async (state) => {\n    const encounter = state.references.at(-1);\n    console.log(encounter.patient.uuid, \"Encounter patient uuid\");\n\n    const { trackedEntity, enrollments, attributes } =\n      state.data?.instances?.[0] || {};\n    if (trackedEntity && enrollments) {\n      state.TEIs ??= {};\n      state.TEIs[encounter.patient.uuid] = {\n        trackedEntity,\n        events: enrollments[0]?.events,\n        enrollment: enrollments[0]?.enrollment,\n        attributes,\n      };\n    }\n\n    await delay(2000);\n    return state;\n  })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Tie": {
          "id": "71460d9a-a8d0-46b7-8090-325820844853",
          "name": "Get Tie",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst patientUid = \"d464433d-41d5-482f-808c-7fe364847352\"\n//TODO: Group the encounters by patient and then get the TEI for each patient\nget('tracker/trackedEntities', state => ({\n  orgUnit: \"sUpt0j2GmBD\",\n  program: \"dWdzxMuKa8Z\",\n  // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  filter: [`AYbfTPYMNJH:Eq:${patientUid}`],\n  fields: '*,enrollments[*],enrollments[events[*]], attributes[*]',\n})).then(async state => {\n  \n  console.log(patientUid, 'Encounter patient uuid');\n\n  const { trackedEntity, enrollments, attributes } = state.data?.instances?.[0] || {};\n  if (trackedEntity && enrollments) {\n    state.TEIs ??= {};\n    state.TEIs[patientUid] = {\n      trackedEntity,\n      events: enrollments[0]?.events,\n      enrollment: enrollments[0]?.enrollment,\n      attributes\n    };\n  }\n\n  await delay(2000);\n  return state;\n})\n",
          "adaptor": "@openfn/language-dhis2@7.1.3",
          "project_credential_id": null
        }
      },
      "edges": {
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "2584c541-a282-487c-89db-4c772a93e9fd",
          "target_job_id": "f5714271-8296-4787-8b5b-75e1de3c5325",
          "source_job_id": "09e2ef30-140a-4dae-8972-351cf449119d",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Get-Patients->Get-Mappings-from-Collection": {
          "enabled": true,
          "id": "e0143ebf-688e-4207-8a23-763660635079",
          "target_job_id": "670fcfc4-15d2-4165-8298-e1b18051abc9",
          "source_job_id": "1781967e-add7-4286-84b8-4b126e698a87",
          "condition_type": "on_job_success"
        },
        "Get-TEIs-and-Map-Answers->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "31164d27-0a83-4c0b-8a14-07d07d3e5247",
          "target_job_id": "8fcc9c0f-f395-4b94-894a-6c38092a453c",
          "source_job_id": "809dc65f-3f7e-4078-8a64-09f1e83021f1",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.TEIs && !state.errors\n"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "d144977a-ba5c-4eb7-899a-7cb80f40131d",
          "target_job_id": "809dc65f-3f7e-4078-8a64-09f1e83021f1",
          "source_job_id": "f5714271-8296-4787-8b5b-75e1de3c5325",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state?.encounters?.length > 0\n"
        },
        "cron->Get-Patients": {
          "enabled": true,
          "id": "fae8a456-2b7f-4e2d-88b3-663c0172af92",
          "target_job_id": "1781967e-add7-4286-84b8-4b126e698a87",
          "source_trigger_id": "460fb29f-b62c-4895-8beb-eabd6db1dfaa",
          "condition_type": "always"
        },
        "Get-Mappings-from-Collection->Upsert-TEIs": {
          "enabled": true,
          "id": "04ef3440-9849-46eb-8bff-9806e5567aae",
          "target_job_id": "09e2ef30-140a-4dae-8972-351cf449119d",
          "source_job_id": "670fcfc4-15d2-4165-8298-e1b18051abc9",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Get-Tie->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "2f6a896d-8ba5-4f94-8a8f-56175586aa09",
          "target_job_id": "8fcc9c0f-f395-4b94-894a-6c38092a453c",
          "source_job_id": "71460d9a-a8d0-46b7-8090-325820844853",
          "condition_type": "js_expression",
          "condition_label": "test-mode",
          "condition_expression": "state.testMode\n"
        },
        "Custom-Logic-for-Events->Create-Events": {
          "enabled": true,
          "id": "e9c01f8e-2b0d-454e-8a69-3914d6648a08",
          "target_job_id": "9f87b3cd-2595-4d4c-8f30-a3aa1724c16f",
          "source_job_id": "8fcc9c0f-f395-4b94-894a-6c38092a453c",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors && !state.testMode\n"
        },
        "Get-Mappings-from-Collection->Get-Encounters": {
          "enabled": true,
          "id": "4ed7f752-f415-498a-8512-40a9e6d8a837",
          "target_job_id": "f5714271-8296-4787-8b5b-75e1de3c5325",
          "source_job_id": "670fcfc4-15d2-4165-8298-e1b18051abc9",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        }
      }
    },
    "wf2-omrs-dhis2-137": {
      "id": "648e9d15-3ccf-4751-aa83-94627d6de843",
      "name": "wf2-omrs-dhis2-137",
      "inserted_at": "2025-09-25T09:40:27.590171Z",
      "lock_version": 8,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "d10691b1-666f-4e0f-8064-40d4ce8fdc32",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Patients": {
          "id": "9cc0cbea-ba1a-4555-83a1-a191944f303e",
          "name": "Get Patients",
          "body": "function removeLinks(data) {\n  if (Array.isArray(data)) {\n    return data.map(removeLinks);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const { links, ...rest } = data;\n    return Object.fromEntries(\n      Object.entries(rest).map(([key, value]) => [key, removeLinks(value)])\n    );\n  }\n\n  return data;\n}\n\nfunction removeNulls(data) {\n  if (Array.isArray(data)) {\n    return data.filter((item) => item !== null).map(removeNulls);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const result = {};\n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null) {\n        result[key] = removeNulls(value);\n      }\n    }\n    return result;\n  }\n\n  return data;\n}\n\ncursor($.lastRunDateTime || \"2025-03-20T06:01:24.000Z\");\n\ncursor(\"today\", {\n  key: \"lastRunDateTime\",\n  format: (c) => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: \"IQ146-25-012-292\", v: \"full\", limit: \"100\" });\nfn((state) => {\n  const { cursor, data } = state;\n  console.log(\"Filtering patients since cursor:\", cursor);\n  console.log(\"Patient fetched\", data.results.length);\n\n  state.patients = data.results\n    .filter(({ auditInfo }) => {\n      const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n      return lastModified > cursor;\n    })\n    .map((p) => {\n      const { uuid, auditInfo, identifiers, person } = removeLinks(\n        removeNulls(p)\n      );\n      const { dateCreated } = auditInfo;\n      const { age, birthdate, gender, names, addresses, attributes } = person;\n\n      return {\n        uuid,\n        person: {\n          age,\n          birthdate,\n          gender,\n          names,\n          addresses: [addresses.find((a) => a.cityVillage)],\n          attributes,\n        },\n        identifiers,\n        auditInfo: { dateCreated },\n      };\n    });\n  state.searchPatientUuids = state.patients.map((p) => p.uuid);\n  console.log(\"# of patients to sync to dhis2 ::\", state.patients.length);\n\n  return state;\n});\n\n// Fetch all encounters\nhttp\n  .get(\"/ws/fhir2/R4/Encounter\", {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then((state) => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find((l) => l.relation === \"next\")\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split(\"/openmrs\")[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then((state) => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\nfn((state) => {\n  console.log(\n    \"Total # of encounters fetched: \",\n    state.allResponse?.entry?.length\n  );\n\n  const uuids = [\n    ...new Set(\n      state.allResponse?.entry?.map((p) =>\n        p.resource?.subject?.reference?.replace(\"Patient/\", \"\")\n      )\n    ),\n  ];\n  state.encounterPatientUuids = [...new Set(uuids)];\n\n  return state;\n});\n\nfn((state) => {\n  const {\n    cursor,\n    lastRunDateTime,\n    patients,\n    searchPatientUuids,\n    encounterPatientUuids,\n  } = state;\n\n  const onlyInSearchPatient = searchPatientUuids.filter(\n    (id) => !encounterPatientUuids.includes(id)\n  );\n\n  const onlyInR4Encounter = encounterPatientUuids.filter(\n    (id) => !searchPatientUuids.includes(id)\n  );\n  const inbothResults = searchPatientUuids.filter((id) =>\n    encounterPatientUuids.includes(id)\n  );\n  const patientUuids = [...new Set(searchPatientUuids, encounterPatientUuids)];\n\n  console.log(\"inbothResults\", inbothResults.length);\n  console.log(\"patient-search-array\", onlyInSearchPatient.length);\n  console.log(\"r4-encounter-array\", onlyInR4Encounter.length);\n  console.log(\"combined uuids\", patientUuids.length);\n\n  return { cursor, lastRunDateTime, patients, patientUuids };\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Mappings": {
          "id": "0a6f5426-9c6d-4214-8e05-55cb9e368e14",
          "name": "Mappings",
          "body": "const isValidUUID = (id) => {\n  if (!id || typeof id !== \"string\") return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\ncollections.get(\"mosul-metadata-mappings-staging\").then((state) => {\n  state.optsMap = state.data\n    .filter((i) => i.key.includes(\"optsMap-value-\"))\n    .map((i) => i.value);\n\n  state.identifiers = state.data\n    .filter((i) => i.key.includes(\"identifiers-value-\"))\n    .map((i) => i.value);\n  state.syncedAt = state.data.find((i) => i.key === \"syncedAt\")?.value;\n  state.formMetadata = state.data.find((i) => i.key === \"formMetadata\")?.value;\n  state.placeOflivingMap = state.data.find(\n    (i) => i.key === \"placeOflivingMap\"\n  )?.value;\n  state.sourceFile = state.data.filter(\n    (i) => i.key === \"sourceFile\"\n  )?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    (i) => i.key === \"fileDateModified\"\n  )?.[0]?.value;\n  state.formMaps = state.data.find((i) => i.key === \"formMaps\")?.value;\n\n  // TODO: Remove state.optionSetKey, when needed\n  // Build from state.formMaps\n  state.optionSetKey = state.data.filter(\n    (i) => i.key === \"optionSetKey\"\n  )?.[0]?.value;\n\n  delete state.data;\n  delete state.references;\n  return state;\n});\n\nfn((state) => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      (form) =>\n        isValidUUID(form[\"OMRS form.uuid\"]) &&\n        form[\"OMRS Form Version\"] === \"v4-2025\"\n    )\n    .map((form) => form[\"OMRS form.uuid\"]);\n  rest.formUuids = formMetadata\n    .filter(\n      (form) =>\n        isValidUUID(form[\"OMRS form.uuid\"]) && form[\"Workflow\"] === \"WF2\"\n    )\n    .map((form) => form[\"OMRS form.uuid\"]);\n\n  rest.patientProgramStage = \"vN61drMkGqO\";\n\n  rest.orgUnit = \"sUpt0j2GmBD\";\n  // rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n  //   'dhis2 attribute id'\n  // ];\n  rest.program = \"dWdzxMuKa8Z\";\n  // rest.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n  //   'dhis2 attribute id'\n  // ];\n  // rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    (i) => i.type === \"DHIS2_PATIENT_NUMBER\"\n  )?.[\"omrs identifierType\"]; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find((i) => i.type === \"OPENMRS_AUTO_ID\")?.[\n    \"omrs identifierType\"\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        },
        "Upsert-TEIs": {
          "id": "5f47a65c-b739-46d7-8fa3-8a722458d4a3",
          "name": "Upsert TEIs",
          "body": "const buildTeiMapping = (omrsPatient, patientTei, mappingConfig) => {\n  const genderMap = {\n    M: \"male\",\n    O: \"unknown\",\n    F: \"female\",\n    U: \"unknown\",\n  };\n  const {\n    orgUnit,\n    program,\n    optsMap,\n    formMaps,\n    placeOflivingMap,\n    patientProgramStage,\n    dhis2PatientNumber,\n    openmrsAutoId,\n  } = mappingConfig;\n\n  const enrolledAt = omrsPatient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find((i) => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const findOptsUuid = (uuid) =>\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value?.uuid ||\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value;\n\n  const findOptCode = (optUuid) =>\n    optsMap.find((o) => o[\"value.uuid - External ID\"] === optUuid)?.[\n      \"DHIS2 Option Code\"\n    ];\n\n  const patientMap = formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map((d) => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: \"fa7uwpCKIwa\",\n      value: omrsPatient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: \"Jt9BhFZkvP2\",\n      value: omrsPatient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: \"P4wdYGkldeG\", //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(omrsPatient.identifiers, dhis2PatientNumber) ||\n        findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: \"ZBoxuExmxcZ\", //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId),\n    },\n    {\n      attribute: \"AYbfTPYMNJH\", //\"OpenMRS Patient UID\"\n      value: omrsPatient.uuid,\n    },\n\n    {\n      attribute: \"T1iX2NuPyqS\",\n      value: omrsPatient.person.age,\n    },\n    {\n      attribute: \"WDp4nVor9Z7\",\n      value: omrsPatient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: \"rBtrjV1Mqkz\", //Place of living\n      value: placeOflivingMap[omrsPatient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter((a) => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter((a) => a.value);\n\n  const payload = {\n    program,\n    orgUnit,\n    attributes: [...filteredAttr, ...filteredStatusAttr],\n  };\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (!patientTei) {\n    payload.trackedEntityType = \"cHlzCA2MuEF\";\n    const enrollments = [\n      {\n        orgUnit,\n        program,\n        enrolledAt,\n        programStage: patientProgramStage, //'MdTtRixaC1B',\n      },\n    ];\n    payload.attributes.push({\n      attribute: \"qptKDiv9uPl\",\n      value: genderMap[omrsPatient.person.gender],\n    });\n    console.log(\"create enrollment\");\n    payload.enrollments = enrollments;\n  } else {\n    payload.trackedEntity = patientTei.trackedEntity;\n    payload.trackedEntityType = patientTei.trackedEntityType;\n  }\n\n  return payload;\n};\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nget(\"tracker/trackedEntities\", {\n  orgUnit: $.orgUnit,\n  filter: (state) => [\n    `AYbfTPYMNJH:IN:${state.patients.map((patient) => patient.uuid).join(\";\")}`,\n  ],\n  program: $.program,\n});\n\nfn((state) => {\n  const findTeiByUuid = (patientUuid) => {\n    return state.data.instances.find((tei) => {\n      return (\n        tei.attributes.find(\n          (attribute) => attribute.attribute === \"AYbfTPYMNJH\"\n        )?.value === patientUuid\n      );\n    });\n  };\n\n  state.patientsMapping = state.patients.map((patient) => {\n    const patientTei = findTeiByUuid(patient.uuid);\n\n    return buildTeiMapping(patient, patientTei, {\n      placeOflivingMap: state.placeOflivingMap,\n      orgUnit: state.orgUnit,\n      program: state.program,\n      patientProgramStage: state.patientProgramStage,\n      formMaps: state.formMaps,\n      optsMap: state.optsMap,\n      dhis2PatientNumber: state.dhis2PatientNumber,\n      openmrsAutoId: state.openmrsAutoId,\n    });\n  });\n\n  return state;\n});\n\n// Bulk upsert\ncreate(\n  \"tracker\",\n  { trackedEntities: $.patientsMapping },\n  {\n    params: {\n      atomicMode: \"ALL\",\n      async: false,\n    },\n  }\n);\n\nfn((state) => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    identifiers,\n    ...next\n  } = state;\n  next.patientUuids = patients.map((p) => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Encounters": {
          "id": "ea92d31b-95a2-4683-85d5-f591513dbccc",
          "name": "Get Encounters",
          "body": "function removeLinks(data) {\n  if (Array.isArray(data)) {\n    return data.map(removeLinks);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const { links, ...rest } = data;\n    return Object.fromEntries(\n      Object.entries(rest).map(([key, value]) => [key, removeLinks(value)])\n    );\n  }\n\n  return data;\n}\n\nfunction removeNulls(data) {\n  if (Array.isArray(data)) {\n    return data.filter((item) => item !== null).map(removeNulls);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const result = {};\n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null) {\n        result[key] = removeNulls(value);\n      }\n    }\n    return result;\n  }\n\n  return data;\n}\n// Fetch patient encounters\neach(\n  $.patientUuids,\n  get(\"encounter\", { patient: $.data, v: \"full\" }).then((state) => {\n    state.allEncounters ??= [];\n    state.allEncounters.push(\n      // v2FormsUuids are for mental health forms\n      // ...state.data.results.filter(e =>\n      //   state.v2FormUuids.includes(e?.form?.uuid)\n      // )\n      ...state.data.results.filter((e) =>\n        state.formUuids.includes(e?.form?.uuid)\n      )\n    );\n\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map((formUuid) =>\n      state.data.results\n        .filter(\n          (e) =>\n            e.auditInfo.dateCreated >= state.cursor &&\n            e?.form?.uuid === formUuid\n        )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    const encounters = filteredEncounters\n      .map((pe) => {\n        const isLatestForm = pe.find((e) => {\n          return state.formMaps[e?.form?.uuid]?.syncType === \"latest\";\n        });\n        if (isLatestForm) {\n          return [isLatestForm];\n        } else {\n          const allPatientEncounter = pe.filter(\n            (e) => state.formMaps[e?.form?.uuid]?.syncType === \"all\"\n          );\n          return allPatientEncounter;\n        }\n      })\n      .flat();\n\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n\n    return state;\n  })\n);\n\nfn((state) => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map((encounter) => {\n      const { uuid, patient, obs, form, encounterDatetime } = removeLinks(\n        removeNulls(encounter)\n      );\n\n      return {\n        uuid,\n        patient: {\n          uuid: patient.uuid,\n          display: patient.display,\n        },\n        obs: obs.map((o) => {\n          return {\n            uuid: o.uuid,\n            concept: o.concept,\n            display: o.display,\n            formFieldPath: o.formFieldPath,\n            value: o.value,\n          };\n        }),\n        form: {\n          uuid: form.uuid,\n          display: form.display,\n          description: form.description,\n          name: form.name,\n        },\n        encounterDatetime,\n      };\n    });\n    console.log(next.encounters.length, \"# of new encounters to sync to dhis2\");\n  } else {\n    console.log(\"No encounters found for cursor: \", next.cursor);\n  }\n  next.allEncounters = next.allEncounters?.map((encounter) => {\n    const { uuid, patient, obs, form, encounterDatetime } = removeLinks(\n      removeNulls(encounter)\n    );\n\n    return {\n      uuid,\n      patient: {\n        uuid: patient.uuid,\n        display: patient.display,\n      },\n      obs: obs.map((o) => {\n        return {\n          uuid: o.uuid,\n          concept: o.concept,\n          display: o.display,\n          formFieldPath: o.formFieldPath,\n          value: o.value,\n        };\n      }),\n      form: {\n        uuid: form.uuid,\n        display: form.display,\n        description: form.description,\n        name: form.name,\n      },\n      encounterDatetime,\n    };\n  });\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Get-Parent-and-Child-TEIs": {
          "id": "29e87d9d-53c4-47bf-885d-19a70b839120",
          "name": "Get Parent and Child TEIs",
          "body": "const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst teiByPatientUuid = (patientUuid, teis) => {\n  return teis.find((tei) => {\n    const omrsPatientUuid = tei.attributes.find(\n      ({ attribute }) => attribute === \"AYbfTPYMNJH\"\n    )?.value;\n\n    return omrsPatientUuid === patientUuid;\n  });\n};\n\nfn((state) => {\n  // Group encounters by patient UUID\n  state.encountersByPatient = state.encounters.reduce((acc, obj) => {\n    const key = obj.patient.uuid;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n\n  return state;\n});\n\nget(\"tracker/trackedEntities\", {\n  orgUnit: $.orgUnit,\n  program: $.program,\n  filter: (state) => [\n    `AYbfTPYMNJH:IN:${Object.keys(state.encountersByPatient).join(\";\")}`,\n  ],\n});\n\nfn((state) => {\n  state.parentTeis ??= {};\n  state.missingParentTeis ??= {};\n\n  Object.keys(state.encountersByPatient).forEach((patientUuid) => {\n    const parentTei = teiByPatientUuid(patientUuid, state.data.instances);\n    if (parentTei?.trackedEntity) {\n      console.log(\"Parent TEI found:\", parentTei.trackedEntity);\n\n      state.parentTeis[patientUuid] = {\n        trackedEntity: parentTei.trackedEntity,\n        attributes: parentTei.attributes,\n        trackedEntityType: parentTei.trackedEntityType,\n      };\n    } else {\n      console.log(\"Parent TEI Not Found for Patient:\", patientUuid);\n      state.missingParentTeis[patientUuid] =\n        state.encountersByPatient[patientUuid];\n    }\n  });\n\n  return state;\n});\n\nfn((state) => {\n  state.ouProgramEncounters = state.encounters.reduce((acc, obj) => {\n    const formUuid = obj.form.uuid;\n    const patientUuid = obj.patient.uuid;\n    const orgUnit = state.formMaps[formUuid].orgUnit;\n    const program = state.formMaps[formUuid].programId;\n    const key = `${orgUnit}-${program}`;\n    if (!acc[key]) {\n      acc[key] = {\n        orgUnit,\n        program,\n        patientUuids: [patientUuid],\n      };\n    }\n    if (!acc[key].patientUuids.includes(patientUuid)) {\n      acc[key].patientUuids.push(patientUuid);\n    }\n    return acc;\n  }, {});\n\n  return state;\n});\n\neach(\n  (state) => Object.values(state.ouProgramEncounters),\n  get(\"tracker/trackedEntities\", (state) => {\n    const { orgUnit, program, patientUuids } = state.data;\n    return {\n      orgUnit,\n      program,\n      filter: [`AYbfTPYMNJH:IN:${patientUuids.join(\";\")}`],\n      fields: \"*,enrollments[*],enrollments[events[*]], relationships[*]\",\n    };\n  }).then(async (state) => {\n    await delay(2000);\n    return state;\n  })\n);\n\nfn((state) => {\n  state.childTeis ??= {};\n  state.encounters.forEach((encounter) => {\n    const patientUuid = encounter.patient.uuid;\n    const tei = teiByPatientUuid(patientUuid, state.data.instances);\n    console.log({ instances: state.data.instances.length, tei, patientUuid });\n    if (tei?.trackedEntity) {\n      console.log(\"Child TEI found:\", tei.trackedEntity);\n\n      state.childTeis[patientUuid] = tei;\n    }\n\n    if (!tei && !state.childTeis[patientUuid]) {\n      console.log(\"Child TEI not found for patient:\", patientUuid);\n      const { attributes, trackedEntityType } = state.parentTeis[patientUuid];\n      const program = state.formMaps[encounter.form.uuid].programId;\n      const orgUnit = state.formMaps[encounter.form.uuid].orgUnit;\n\n      state.childTeis[patientUuid] = {\n        trackedEntityType,\n        enrollments: [\n          {\n            orgUnit,\n            program,\n            enrolledAt: new Date().toISOString().split(\"T\")[0],\n            attributes: attributes.filter((attribute) =>\n              [\n                \"P4wdYGkldeG\", //DHIS2 ID ==> \"Patient Number\"\n              ].includes(attribute.attribute)\n            ),\n          },\n        ],\n        attributes,\n        orgUnit,\n        program,\n      };\n    }\n  });\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Events": {
          "id": "bc9ae464-bc1c-42ef-8d8d-24614ce5e4f1",
          "name": "Create Events",
          "body": "// Create or update events for each encounter\ncreate(\n  \"tracker\",\n  {\n    events: (state) => {\n      console.log(\n        \"Creating events for: \",\n        JSON.stringify(state.eventsMapping, null, 2)\n      );\n      return state.eventsMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: \"UID\",\n      importStrategy: \"CREATE_AND_UPDATE\",\n    },\n  }\n);\n\nconst findlatestAnswer = (encounters, conceptUuid) => {\n  const latestAnswer = encounters.reduce((acc, e) => {\n    const answer = e.obs.find((o) => o.concept.uuid === conceptUuid);\n    if (answer) {\n      const personUuid = answer.person.uuid;\n      if (\n        !acc[personUuid] ||\n        new Date(answer.obsDatetime) > new Date(acc[personUuid].obsDatetime)\n      ) {\n        acc[personUuid] = { ...answer, formUuid: e.form.uuid };\n      }\n    }\n    return acc;\n  }, {});\n\n  return Object.values(latestAnswer);\n};\n\nfn((state) => {\n  const {\n    encounters,\n    childTeis,\n    parentTeis,\n    program,\n    orgUnit,\n    optsMap,\n    // Lighten state by removing unused properties\n    formMaps,\n    optionSetKey,\n    eventsMapping,\n    formUuids,\n    references,\n    ...next\n  } = state;\n\n  const genderMap = optsMap\n    .filter((o) => o[\"DHIS2 DE UID\"] === \"qptKDiv9uPl\")\n    .reduce((acc, obj) => {\n      acc[obj[\"value.display - Answers\"]] = obj[\"DHIS2 Option Code\"];\n      return acc;\n    }, {});\n\n  const latestGenderUpdate = findlatestAnswer(\n    encounters,\n    \"ec42d68d-3e23-43de-b8c5-a03bb538e7c7\"\n  );\n\n  const genderUpdated = latestGenderUpdate\n    .map((answer) => {\n      const parentTei = parentTeis[answer?.person?.uuid].trackedEntity;\n      const childTei = childTeis[answer?.person?.uuid].trackedEntity;\n\n      const mappings = [];\n      const sharedMapping = {\n        trackedEntityType: \"cHlzCA2MuEF\",\n        attributes: [\n          {\n            attribute: \"qptKDiv9uPl\", //gender\n            value: genderMap[answer.value.display],\n          },\n          {\n            attribute: \"AYbfTPYMNJH\", //OpenMRS Patient UID to use to upsert TEI\n            value: answer.person.uuid,\n          },\n        ],\n      };\n      if (!childTei) {\n        console.log(\"No TEI found for person\", answer.person.uuid);\n      }\n      if (childTei) {\n        mappings.push({\n          ...sharedMapping,\n          trackedEntity: childTei,\n          program: formMaps[answer.formUuid].programId,\n          orgUnit: formMaps[answer.formUuid].orgUnit,\n        });\n      }\n      if (parentTei) {\n        mappings.push({\n          ...sharedMapping,\n          trackedEntity: parentTei,\n          program,\n          orgUnit,\n        });\n      }\n      return mappings;\n    })\n    .filter(Boolean)\n    .flat();\n\n  const latestEducationUpdate = findlatestAnswer(\n    encounters,\n    \"cc3a5a7a-abfe-4630-b0c0-c1275c6cbb54\"\n  );\n\n  // console.log({ latestEducationUpdate })\n  const educationUpdated = latestEducationUpdate\n    .map((answer) => {\n      const parentTei = parentTeis[answer?.person?.uuid]?.trackedEntity;\n      const childTei = childTeis[answer?.person?.uuid]?.trackedEntity;\n      console.log({ parentTei, childTei });\n      const mappings = [];\n      const sharedMapping = {\n        trackedEntityType: \"cHlzCA2MuEF\",\n        attributes: [\n          {\n            attribute: \"Dggll4f9Efj\", //education\n            value: optsMap.find(\n              (o) => o[\"value.display - Answers\"] === answer.value.display\n            )?.[\"DHIS2 Option Code\"], //map to DHIS2 Option Code in optsMap\n          },\n        ],\n      };\n      if (!childTei) {\n        console.log(\"No TEI found for person\", answer.person.uuid);\n      }\n\n      if (parentTei) {\n        mappings.push({\n          trackedEntity: parentTei,\n          program,\n          orgUnit,\n          ...sharedMapping,\n        });\n      }\n      if (childTei) {\n        mappings.push({\n          trackedEntity: childTei,\n          program: formMaps[answer.formUuid].programId,\n          orgUnit: formMaps[answer.formUuid].orgUnit,\n          ...sharedMapping,\n        });\n      }\n\n      return mappings;\n    })\n    .filter(Boolean)\n    .flat();\n\n  return {\n    ...next,\n    teisToUpdate: [...genderUpdated, ...educationUpdated],\n  };\n});\n\nfnIf(\n  (state) => state.teisToUpdate.length === 0,\n  ({ lastRunDateTime }) => ({ lastRunDateTime })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Update-TEIs": {
          "id": "3d50b0ba-7959-4a1b-8468-99ffd140a2ba",
          "name": "Update TEIs",
          "body": "// Update TEIs\ncreate(\n  \"tracker\",\n  { trackedEntities: $.teisToUpdate },\n  { params: { async: false, importStrategy: \"UPDATE\" } }\n);\n\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Event-Mappings": {
          "id": "c31699da-9417-464f-84de-b3295a49720b",
          "name": "Event Mappings",
          "body": "const findAnswerByConcept = (encounter, conceptUuid) => {\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  return answer?.value?.display;\n};\n\n// Helper functions for finding observations\nconst findObsByConcept = (encounter, conceptUuid) => {\n  const [conceptId, questionId] = conceptUuid.split(\"-rfe-\");\n  const answer = encounter.obs.find(\n    (o) =>\n      o.concept.uuid === conceptId &&\n      (questionId ? o.formFieldPath === `rfe-${questionId}` : true)\n  );\n  return answer;\n};\n\nfunction f11(encounter, optsMap) {\n  if (encounter.form.description.includes(\"F11-Family Planning Assessment\")) {\n    const answers = encounter.obs.filter(\n      (o) => o.concept.uuid === \"30b2d692-6a05-401f-8ede-13e027b8a436\"\n    );\n\n    const mappingConfig = [\n      { dataElement: \"DYTLOoEKRas\", index: 0 },\n      { dataElement: \"ddTrzQtQUGz\", index: 1 },\n      { dataElement: \"fuNs3Uzspsm\", index: 2 },\n    ];\n\n    return mappingConfig.map((config) => {\n      if (answers[config.index]) {\n        return {\n          dataElement: config.dataElement,\n          value: optsMap.find(\n            (o) =>\n              o[\"value.display - Answers\"] ===\n              answers[config.index]?.value?.display\n          )?.[\"DHIS2 Option Code\"],\n        };\n      }\n    });\n  }\n}\nfunction f13(encounter, optsMap) {\n  if (encounter.form.description.includes(\"F13-PNC\")) {\n    const answers = encounter.obs.filter(\n      (o) => o.concept.uuid === \"22809b19-54ca-4d88-8d26-9577637c184e\"\n    );\n\n    // Define mapping configurations\n    const mappingConfig = [\n      { dataElement: \"ErtqJsZINyX\", index: 0 },\n      { dataElement: \"wWAMdsjks50\", index: 1 },\n      { dataElement: \"Dh1ocjojOrC\", index: 2 },\n      { dataElement: \"KR03PHkzVw1\", index: 3 },\n      { dataElement: \"kDA55sgLAwY\", index: 4 },\n    ];\n\n    // Only add mappings for answers that exist\n    return mappingConfig.map((config) => {\n      if (answers[config.index] !== undefined) {\n        return {\n          dataElement: config.dataElement,\n          value: optsMap.find(\n            (o) =>\n              o[\"value.display - Answers\"] ===\n              answers[config.index]?.value?.display\n          )?.[\"DHIS2 Option Code\"],\n        };\n      }\n    });\n  }\n}\n\nfunction f16(encounter) {\n  const answers = encounter.obs.filter(\n    (o) => o.concept.uuid === \"877aa979-c02f-4890-8156-836d52696f09\"\n  );\n  if (encounter.form.description.includes(\"F16-Operative Report\") && answers) {\n    const [date, time] = encounter.encounterDatetime.split(\"T\");\n    return [\n      {\n        dataElement: \"ZQgbPvQ7dWC\",\n        value: date,\n      },\n      {\n        dataElement: \"onsyxszD8X7\",\n        value: time,\n      },\n    ];\n  }\n}\n\nfunction f17(encounter) {\n  const answers = findObsByConcept(\n    encounter,\n    \"7f00c65d-de60-467a-8964-fe80c7a85ef0\"\n  );\n\n  const mappings = [\n    // Always fill with the value 'hour' -> code = 'hour', UID = 'vYF6BoRQlXj'\n    {\n      dataElement: \"vYF6BoRQlXj\",\n      value: \"hour\",\n    },\n  ];\n  if (\n    encounter.form.description.includes(\"F17-Surgery admission form\") &&\n    answers\n  ) {\n    const [date, time] = encounter.encounterDatetime.split(\"T\");\n    mappings.push([\n      {\n        dataElement: \"DEGa7RaIDTo\",\n        value: date,\n      },\n      {\n        dataElement: \"aUSp8oQZIWu\",\n        value: date,\n      },\n      {\n        dataElement: \"mDOUf2zzwS2\",\n        value: time,\n      },\n    ]);\n  }\n  return mappings;\n}\n\nfunction f18(encounter, encounters) {\n  const isDischarge = findObsByConcept(\n    encounter,\n    \"13cea1c8-e426-411f-95b4-33651fc4325d\"\n  );\n\n  if (\n    encounter.form.description.includes(\"F18-Surgery discharge form\") &&\n    isDischarge\n  ) {\n    const lastAdmission = formEncounters(\n      \"F17-Surgery admission form\",\n      encounters\n    )\n      .at(-1)\n      ?.encounterDatetime.replace(\"+0000\", \"\");\n    return [\n      {\n        dataElement: \"zt3Ocipob8I\",\n        value: lastAdmission,\n      },\n    ];\n  }\n}\n\nfunction f29(encounter, optsMap) {\n  const CONCEPTS = {\n    OTHER_SPECIFY: \"e08d532b-e56c-43dc-b831-af705654d2dc\",\n    PRECIPITATING_EVENT_OTHER: \"790b41ce-e1e7-11e8-b02f-0242ac130002\", // Todo: no used anywhere\n  };\n  const mappings = [];\n  if (encounter.form.description.includes(\"F29-MHPSS Baseline v2\")) {\n    mappings.push({\n      dataElement: \"pN4iQH4AEzk\",\n      value: findAnswerByConcept(\n        encounter,\n        \"22809b19-54ca-4d88-8d26-9577637c184e\"\n      )\n        ? true\n        : false,\n    });\n\n    const priority1 = findObsByConcept(\n      encounter,\n      \"45b39cbf-0fb2-4682-8544-8aaf3e07a744\"\n    );\n    if (priority1 && priority1?.value?.display === \"Other\") {\n      mappings.push({\n        dataElement: \"pj5hIE6iyAR\",\n        value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n      });\n    }\n\n    const priority2 = findObsByConcept(\n      encounter,\n      \"ee1b7973-e931-494e-a9cb-22b814b4d8ed\"\n    );\n    if (priority2 && priority2?.value?.display === \"Other\") {\n      mappings.push({\n        dataElement: \"Em5zvpdd5ha\",\n        value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n      });\n    }\n\n    const priority3 = findObsByConcept(\n      encounter,\n      \"92a92f62-3ff6-4944-9ea9-a7af23949bad\"\n    );\n    if (priority3 && priority3?.value?.display === \"Other\") {\n      mappings.push({\n        dataElement: \"aWsxYkJR8Ua\",\n        value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n      });\n    }\n\n    const precipitatingEvent1 = findObsByConcept(\n      encounter,\n      \"d5e3d927-f7ce-4fdd-ac4e-6ad0b510b608\"\n    );\n    const otherValue = encounter.obs.find((o) =>\n      o.display.includes(\"Past / Precipitating Events - Other\")\n    );\n\n    if (\n      precipitatingEvent1 &&\n      precipitatingEvent1?.value?.uuid === otherValue?.value?.uuid\n    ) {\n      const opt = optsMap.find(\n        (o) => o[\"value.uuid - External ID\"] === otherValue?.value?.uuid\n      );\n\n      mappings.push({\n        dataElement: \"m8qis4iUOTo\",\n        value: opt?.[\"DHIS2 Option Code\"],\n      });\n    }\n\n    const precipitatingEvent2 = findObsByConcept(\n      encounter,\n      \"54a9b20e-bce5-4d4a-8c9c-e0248a182586\"\n    );\n\n    if (\n      precipitatingEvent2 &&\n      precipitatingEvent2?.value?.uuid === otherValue?.value?.uuid\n    ) {\n      const opt = optsMap.find(\n        (o) => o[\"value.uuid - External ID\"] === otherValue?.value?.uuid\n      );\n      mappings.push({\n        dataElement: \"mNK6CITsdWD\",\n        value: opt?.[\"DHIS2 Option Code\"],\n      });\n    }\n\n    const precipitatingEvent3 = findObsByConcept(\n      encounter,\n      \"e0d4e006-85b5-41cb-8a21-e013b1978b8b\"\n    );\n\n    if (\n      precipitatingEvent3 &&\n      precipitatingEvent3?.value?.uuid === otherValue?.uuid\n    ) {\n      const opt = optsMap.find(\n        (o) => o[\"value.uuid - External ID\"] === otherValue?.value?.uuid\n      );\n      mappings.push({\n        dataElement: \"jocqmYW394G\",\n        value: opt?.[\"DHIS2 Option Code\"],\n      });\n    }\n  }\n  return mappings;\n}\n\nfunction f30f29(encounter, allEncounters) {\n  if (encounter.form.description.includes(\"F30-MHPSS Follow-up v2\")) {\n    const missedSession = (encounter) => {\n      if (\n        encounter.obs.find(\n          (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n        )?.value?.display === \"No\"\n      ) {\n        return encounter.encounterDatetime.replace(\"+0000\", \"\");\n      }\n      const lastFollowupEncounter = allEncounters.find(\n        (e) =>\n          e.form.description.includes(\"F30-MHPSS Follow-up v2\") &&\n          e.patient.uuid === encounter.patient.uuid &&\n          e.uuid !== encounter.uuid &&\n          e.obs.find(\n            (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n          )?.value?.display === \"No\"\n      );\n\n      if (lastFollowupEncounter) {\n        return lastFollowupEncounter.encounterDatetime.replace(\"+0000\", \"\");\n      }\n\n      const f29Encounter = allEncounters.find(\n        (e) =>\n          e.form.description.includes(\"F29-MHPSS Baseline v2\") &&\n          e.patient.uuid === encounter.patient.uuid\n      );\n      if (f29Encounter) {\n        return f29Encounter.encounterDatetime.replace(\"+0000\", \"\");\n      }\n      return undefined;\n    };\n    const mapping = [\n      {\n        dataElement: \"jtKIoKducvE\",\n        value: missedSession(encounter),\n      },\n    ];\n    return mapping;\n  }\n}\n\nfunction f32f31(encounter, allEncounters) {\n  if (encounter.form.description.includes(\"F32-mhGAP Follow-up v2\")) {\n    const missedSession = (encounter) => {\n      if (\n        encounter.obs.find(\n          (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n        )?.value?.display === \"No\"\n      ) {\n        return encounter.encounterDatetime.replace(\"+0000\", \"\");\n      }\n      const lastFollowupEncounter = allEncounters.find(\n        (e) =>\n          e.form.description.includes(\"F32-mhGAP Follow-up v2\") &&\n          e.patient.uuid === encounter.patient.uuid &&\n          e.uuid !== encounter.uuid &&\n          e.obs.find(\n            (o) => o.concept.uuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\"\n          )?.value?.display === \"No\"\n      );\n\n      if (lastFollowupEncounter) {\n        return lastFollowupEncounter.encounterDatetime.replace(\"+0000\", \"\");\n      }\n\n      const f31Encounter = allEncounters.find(\n        (e) =>\n          e.form.description.includes(\"F31-mhGAP Baseline v2\") &&\n          e.patient.uuid === encounter.patient.uuid\n      );\n\n      if (f31Encounter) {\n        return f31Encounter.encounterDatetime.replace(\"+0000\", \"\");\n      }\n    };\n    const changeInDiagnosis = (encounter) => {\n      const patientUuid = encounter.patient.uuid;\n      const previousChangeInDiagnosis = allEncounters\n        .find(\n          (e) =>\n            e.patient.uuid === patientUuid &&\n            e.form.description.includes(\"F32-mhGAP Follow-up v2\") &&\n            encounter.uuid !== e.uuid\n        )\n        ?.obs.find(\n          (o) => o.concept.uuid === \"22809b19-54ca-4d88-8d26-9577637c184e\"\n        )?.value?.display;\n\n      const currentChangeInDiagnosis = encounter.obs.find(\n        (o) => o.concept.uuid === \"22809b19-54ca-4d88-8d26-9577637c184e\"\n      )?.value?.display;\n\n      if (\n        previousChangeInDiagnosis &&\n        previousChangeInDiagnosis !== currentChangeInDiagnosis\n      ) {\n        return true;\n      }\n\n      return false;\n    };\n    const mapping = [\n      {\n        dataElement: \"fMqEZpiRVZV\",\n        value: missedSession(encounter),\n      },\n      {\n        dataElement: \"XBVRRpgkEvE\",\n        value: changeInDiagnosis(encounter),\n      },\n    ];\n    return mapping;\n  }\n}\n\nfunction f33f34(encounter, allEncounters) {\n  if (\n    encounter.form.description.includes(\"F33-MHPSS Closure v2\") ||\n    encounter.form.description.includes(\"F34-mhGAP Closure v2\")\n  ) {\n    const lastScore = encounter.obs.find(\n      (o) => o.concept.uuid === \"90b3d09c-d296-44d2-8292-8e04377fe027\"\n    )?.value;\n\n    const filterOutScore = allEncounters.filter((e) => {\n      const obs = e.obs.find(\n        (o) => o.concept.display === \"Mental Health Outcome Scale\"\n      );\n      return e.uuid !== encounter.uuid && obs && obs?.value !== 0;\n    });\n\n    const firstScore = filterOutScore\n      .sort((a, b) => {\n        return new Date(a.encounterDatetime) - new Date(b.encounterDatetime);\n      })\n      .at(0)\n      ?.obs.find(\n        (o) => o.concept.display === \"Mental Health Outcome Scale\"\n      )?.value;\n\n    return {\n      dataElement: \"b8bjS7ah8Qi\",\n      value: lastScore - firstScore,\n    };\n  }\n}\n\nconst findDataValue = (encounter, dataElement, metadataMap) => {\n  const { optsMap, optionSetKey, form } = metadataMap;\n  const [conceptUuid, questionId] =\n    form.dataValueMap[dataElement]?.split(\"-rfe-\");\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  const isObjectAnswer = answer && typeof answer.value === \"object\";\n  const isStringAnswer = answer && typeof answer.value === \"string\";\n\n  if (isStringAnswer) {\n    return answer.value;\n  }\n\n  if (\n    isObjectAnswer &&\n    conceptUuid === \"722dd83a-c1cf-48ad-ac99-45ac131ccc96\" &&\n    dataElement === \"pN4iQH4AEzk\"\n  ) {\n    console.log(\"Yes done by psychologist..\");\n    return \"\" + answer.value.uuid === \"278401ee-3d6f-4c65-9455-f1c16d0a7a98\";\n  }\n\n  if (\n    isObjectAnswer &&\n    conceptUuid === \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9\" &&\n    dataElement === \"G0hLyxqgcO7\"\n  ) {\n    console.log(\"True only question detected..\", dataElement);\n    return answer.value.uuid === \"681cf0bc-5213-492a-8470-0a0b3cc324dd\"\n      ? \"true\"\n      : undefined;\n  }\n\n  if (isObjectAnswer) {\n    const optionKey = questionId\n      ? `${encounter.form.uuid}-${answer.concept.uuid}-rfe-${questionId}`\n      : `${encounter.form.uuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      (o) =>\n        o[\"value.uuid - External ID\"] === answer.value.uuid &&\n        o[\"DHIS2 Option Set UID\"] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.[\"DHIS2 Option Code\"] ||\n      opt?.[\"DHIS2 Option name\"] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    if ([\"FALSE\", \"No\"].includes(matchingOption)) return \"false\";\n    if ([\"TRUE\", \"Yes\"].includes(matchingOption)) return \"true\";\n\n    return matchingOption;\n  }\n\n  const isEncounterDate =\n    conceptUuid === \"encounter-date\" &&\n    [\"CXS4qAJH2qD\", \"I7phgLmRWQq\", \"yUT7HyjWurN\", \"EOFi7nk2vNM\"].includes(\n      dataElement\n    );\n\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace(\"+0000\", \"\");\n  }\n\n  return \"\";\n};\n\nconst formEncounters = (formDescription, encounters) => {\n  return encounters.filter((e) => e.form.description.includes(formDescription));\n};\n\n// Prepare DHIS2 data model for create events\nfn((state) => {\n  const handleMissingRecord = (data, state) => {\n    const { uuid, display } = data.patient;\n\n    console.log(uuid, \"Patient is missing trackedEntity or enrollment\");\n\n    state.missingRecords ??= {};\n    state.missingRecords[uuid] ??= {\n      encounters: [],\n      patient: display,\n    };\n\n    state.missingRecords[uuid].encounters.push(data.uuid);\n  };\n\n  state.eventsMapping = state.encounters\n    .map((encounter) => {\n      const form = state.formMaps[encounter.form.uuid];\n      if (!form?.dataValueMap) {\n        return null;\n      }\n      const { trackedEntity, enrollment, events } =\n        state.childTeis[encounter.patient.uuid] || {};\n\n      if (!trackedEntity || !enrollment) {\n        handleMissingRecord(encounter, state);\n        return null;\n      }\n      let formDataValues = Object.keys(form.dataValueMap)\n        .map((dataElement) => {\n          const value = findDataValue(encounter, dataElement, {\n            optsMap: state.optsMap,\n            optionSetKey: state.optionSetKey,\n            form,\n          });\n\n          return { dataElement, value };\n        })\n        .filter(\n          ({ dataElement, value }) =>\n            value &&\n            ![\"pj5hIE6iyAR\", \"KjgDauY9v4J\", \"DYTLOoEKRas\"].includes(dataElement)\n        );\n\n      const f16Mapping = f16(encounter);\n      const f17Mapping = f17(encounter);\n      const f18Mapping = f18(encounter, state.encounters);\n      const f13Mapping = f13(encounter, state.optsMap);\n      const f11Mapping = f11(encounter, state.optsMap);\n      const f29Mapping = f29(encounter, state.optsMap);\n      const f30f29Mapping = f30f29(encounter, state.allEncounters);\n      const f32f31Mapping = f32f31(encounter, state.allEncounters);\n      const f33f34Mapping = f33f34(encounter, state.allEncounters);\n\n      const customMapping = [\n        f11Mapping,\n        f13Mapping,\n        f18Mapping,\n        f16Mapping,\n        f17Mapping,\n        f29Mapping,\n        f30f29Mapping,\n        f32f31Mapping,\n        f33f34Mapping,\n      ]\n        .filter(Boolean) // Only include non-empty mappings\n        .flat(); // flattening the array\n\n      return {\n        event: events?.find((e) => e.programStage === form.programStage)?.event,\n        program: state.formMaps[encounter.form.uuid]?.programId,\n        orgUnit: state.formMaps[encounter.form.uuid]?.orgUnit,\n        trackedEntity,\n        enrollment,\n        occurredAt: encounter.encounterDatetime.replace(\"+0000\", \"\"),\n        programStage: form.programStage,\n        dataValues: [...formDataValues, ...customMapping],\n      };\n    })\n    .filter(Boolean);\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Create-TEIs-Relationship": {
          "id": "ff3980d5-2f46-41f0-8d63-ccb63328325d",
          "name": "Create TEIs Relationship",
          "body": "fn((state) => {\n  state.relationshipsMapping = Object.keys(state.childTeis)\n    .map((uuid) => {\n      const childTei = state.childTeis[uuid].trackedEntity;\n      const parentTei = state.parentTeis[uuid].trackedEntity;\n\n      if (childTei != parentTei) {\n        return {\n          from: {\n            trackedEntityInstance: {\n              trackedEntityInstance: parentTei,\n            },\n          },\n          to: {\n            trackedEntityInstance: {\n              trackedEntityInstance: childTei,\n            },\n          },\n          relationshipType: \"cJJTZ51EK24\", //TODO: Need to change this hardcoded id, because it will be different for d/t programs\n        };\n      }\n    })\n    .filter(Boolean);\n  return state;\n});\n// Check if relationship exist\neach(\n  $.relationshipsMapping,\n  get(\"tracker/relationships\", {\n    trackedEntity: $.data.from.trackedEntityInstance.trackedEntityInstance,\n  }).then((state) => {\n    const relationship = state.references.at(-1);\n    const toTei = relationship.to.trackedEntityInstance.trackedEntityInstance;\n    const hasRelationship = state.data.instances.find(\n      (r) => r.to.trackedEntity.trackedEntity === toTei\n    );\n    state.relationshipsToCreate ??= [];\n    if (!hasRelationship) {\n      state.relationshipsToCreate.push(relationship);\n    }\n    return state;\n  })\n);\n\n// Creating relationship between parent and child tei\neach($.relationshipsToCreate, create(\"relationships\", $.data));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Upsert-Child-TEIs": {
          "id": "ba3e1803-acd8-4fe0-849f-6e0f4d120afd",
          "name": "Upsert Child TEIs",
          "body": "create(\n  \"tracker\",\n  { trackedEntities: (state) => Object.values(state.childTeis) },\n  {\n    params: {\n      atomicMode: \"ALL\",\n      async: false,\n    },\n  }\n);\n\nfn((state) => {\n  state.upsertedTeis =\n    state.data.bundleReport.typeReportMap.TRACKED_ENTITY.objectReports.map(\n      (report) => report.uid\n    );\n  return state;\n});\n\neach($.upsertedTeis, get(`tracker/trackedEntities/${$.data}`).then(state => {\n  const { trackedEntity, enrollments, attributes } = state.data || {};\n\n  const patientUuid = attributes.find(a => a.attribute === 'AYbfTPYMNJH').value\n\n  state.childTeis ??= {};\n  state.childTeis[patientUuid] = {\n    trackedEntity,\n    events: enrollments?.[0]?.events,\n    enrollment: enrollments?.[0]?.enrollment,\n  };\n\n  return state;\n}))",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        }
      },
      "edges": {
        "cron->Get-Patients": {
          "enabled": true,
          "id": "e5a1e40b-a435-495b-8260-3ddf4e4b6f95",
          "target_job_id": "9cc0cbea-ba1a-4555-83a1-a191944f303e",
          "source_trigger_id": "d10691b1-666f-4e0f-8064-40d4ce8fdc32",
          "condition_type": "always"
        },
        "Mappings->Upsert-TEIs": {
          "enabled": true,
          "id": "5953cda9-d8c3-454a-8a05-aac6c9c07eb5",
          "target_job_id": "5f47a65c-b739-46d7-8fa3-8a722458d4a3",
          "source_job_id": "0a6f5426-9c6d-4214-8e05-55cb9e368e14",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "26954f83-daed-4f98-8011-c2c5bc24ecd3",
          "target_job_id": "ea92d31b-95a2-4683-85d5-f591513dbccc",
          "source_job_id": "5f47a65c-b739-46d7-8fa3-8a722458d4a3",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Mappings->Get-Encounters": {
          "enabled": true,
          "id": "0fd2390e-6faf-4da6-8d4a-220685fe22ae",
          "target_job_id": "ea92d31b-95a2-4683-85d5-f591513dbccc",
          "source_job_id": "0a6f5426-9c6d-4214-8e05-55cb9e368e14",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        },
        "Create-Events->Update-TEIs": {
          "enabled": true,
          "id": "30bc10fc-d40f-4704-81f4-a05fefc5e1e3",
          "target_job_id": "3d50b0ba-7959-4a1b-8468-99ffd140a2ba",
          "source_job_id": "bc9ae464-bc1c-42ef-8d8d-24614ce5e4f1",
          "condition_type": "js_expression",
          "condition_label": "has-gender-updated",
          "condition_expression": "state?.teisToUpdate?.length > 0\n"
        },
        "Get-Encounters->Get-Parent-and-Child-TEIs": {
          "enabled": true,
          "id": "44fda748-0643-46bb-8e89-4b75bec4bdbd",
          "target_job_id": "29e87d9d-53c4-47bf-885d-19a70b839120",
          "source_job_id": "ea92d31b-95a2-4683-85d5-f591513dbccc",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state.encounters.length > 0\n"
        },
        "Get-Patients->Mappings": {
          "enabled": true,
          "id": "704bb712-f0be-4199-83b8-c84a3da5feb5",
          "target_job_id": "0a6f5426-9c6d-4214-8e05-55cb9e368e14",
          "source_job_id": "9cc0cbea-ba1a-4555-83a1-a191944f303e",
          "condition_type": "on_job_success"
        },
        "Event-Mappings->Create-Events": {
          "enabled": true,
          "id": "a314d87c-3497-4036-831a-3227d85b8c6b",
          "target_job_id": "bc9ae464-bc1c-42ef-8d8d-24614ce5e4f1",
          "source_job_id": "c31699da-9417-464f-84de-b3295a49720b",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors\n"
        },
        "Get-Parent-and-Child-TEIs->Upsert-Child-TEIs": {
          "enabled": true,
          "id": "a07cd9c9-a88e-4854-8186-23a9f98a8103",
          "target_job_id": "ba3e1803-acd8-4fe0-849f-6e0f4d120afd",
          "source_job_id": "29e87d9d-53c4-47bf-885d-19a70b839120",
          "condition_type": "js_expression",
          "condition_label": "has-child-parent-teis",
          "condition_expression": "Object.keys(state?.childTeis)?.length > 0 && Object.keys(state?.parentTeis)?.length > 0\n"
        },
        "Upsert-Child-TEIs->Create-TEIs-Relationship": {
          "enabled": true,
          "id": "b5de09be-bff1-45fb-8726-ad8e8e02c2ca",
          "target_job_id": "ff3980d5-2f46-41f0-8d63-ccb63328325d",
          "source_job_id": "ba3e1803-acd8-4fe0-849f-6e0f4d120afd",
          "condition_type": "on_job_success"
        },
        "Create-TEIs-Relationship->Event-Mappings": {
          "enabled": true,
          "id": "d11da1ea-7d5d-4021-8ecb-9394be06623d",
          "target_job_id": "c31699da-9417-464f-84de-b3295a49720b",
          "source_job_id": "ff3980d5-2f46-41f0-8d63-ccb63328325d",
          "condition_type": "js_expression",
          "condition_label": "has-child-teis",
          "condition_expression": "state.childTeis && !state.errors\n"
        }
      }
    },
    "wf3-omrs-dhis2-138": {
      "id": "063313b2-8577-4501-ad12-baf9cfc2f1d9",
      "name": "wf3-omrs-dhis2-138",
      "inserted_at": "2025-09-25T10:37:07.549216Z",
      "lock_version": 3,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "70da25eb-a3c3-4451-8b8c-9de15b6bc282",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Mappings-from-Collection": {
          "id": "466da798-9e0c-41f5-869d-eafe12728901",
          "name": "Get Mappings from Collection",
          "body": "const isValidUUID = (id) => {\n  if (!id || typeof id !== \"string\") return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\ncollections.get(\"mosul-metadata-mappings-staging\").then((state) => {\n  state.optsMap = state.data\n    .filter((i) => i.key.includes(\"optsMap-value-\"))\n    .map((i) => i.value);\n\n  state.identifiers = state.data\n    .filter((i) => i.key.includes(\"identifiers-value-\"))\n    .map((i) => i.value);\n  state.syncedAt = state.data.find((i) => i.key === \"syncedAt\")?.value;\n  state.formMetadata = state.data.find((i) => i.key === \"formMetadata\")?.value;\n  state.placeOflivingMap = state.data.find(\n    (i) => i.key === \"placeOflivingMap\"\n  )?.value;\n  state.sourceFile = state.data.filter(\n    (i) => i.key === \"sourceFile\"\n  )?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    (i) => i.key === \"fileDateModified\"\n  )?.[0]?.value;\n  state.formMaps = state.data.find((i) => i.key === \"formMaps\")?.value;\n\n  // TODO: Remove state.optionSetKey, when needed\n  // Build from state.formMaps\n  state.optionSetKey = state.data.filter(\n    (i) => i.key === \"optionSetKey\"\n  )?.[0]?.value;\n\n  delete state.data;\n  delete state.references;\n  return state;\n});\n\nfn((state) => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      (form) =>\n        isValidUUID(form[\"OMRS form.uuid\"]) &&\n        form[\"OMRS Form Version\"] === \"v4-2025\"\n    )\n    .map((form) => form[\"OMRS form.uuid\"]);\n  rest.formUuids = formMetadata\n    .filter(\n      (form) =>\n        isValidUUID(form[\"OMRS form.uuid\"]) && form[\"Workflow\"] === \"WF3\"\n    )\n    .map((form) => form[\"OMRS form.uuid\"]);\n\n  // rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n  //   'dhis2 attribute id'\n  // ];\n\n  rest.orgUnit = \"sUpt0j2GmBD\";\n\n  rest.program = \"dWdzxMuKa8Z\";\n\n  rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    (i) => i.type === \"DHIS2_PATIENT_NUMBER\"\n  )?.[\"omrs identifierType\"]; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find((i) => i.type === \"OPENMRS_AUTO_ID\")?.[\n    \"omrs identifierType\"\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n",
          "adaptor": "@openfn/language-common@2.3.0",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        },
        "Get-Encounters": {
          "id": "f4c1f626-6381-4376-87ba-567bac8cd537",
          "name": "Get Encounters",
          "body": "function removeLinks(data) {\n  if (Array.isArray(data)) {\n    return data.map(removeLinks);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const { links, ...rest } = data;\n    return Object.fromEntries(\n      Object.entries(rest).map(([key, value]) => [key, removeLinks(value)])\n    );\n  }\n\n  return data;\n}\n\nfunction removeNulls(data) {\n  if (Array.isArray(data)) {\n    return data.filter((item) => item !== null).map(removeNulls);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const result = {};\n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null) {\n        result[key] = removeNulls(value);\n      }\n    }\n    return result;\n  }\n\n  return data;\n}\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n// Fetch patient encounters\neach(\n  $.patientUuids,\n  get(\"encounter\", { patient: $.data, v: \"full\" }).then((state) => {\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map((formUuid) =>\n      state?.data?.results\n        .filter(\n          (e) =>\n            e.auditInfo.dateCreated >= state.cursor &&\n            e?.form?.uuid === formUuid\n        )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    // Why we only keep the latest one form encounter?\n    const encounters = filteredEncounters.map((e) => e[0]).filter((e) => e);\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n    delay(1500);\n\n    return state;\n  })\n);\n\nfn((state) => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map((encounter) => {\n      const { uuid, patient, obs, form, encounterDatetime } = removeLinks(\n        removeNulls(encounter)\n      );\n\n      return {\n        uuid,\n        patient: {\n          uuid: patient.uuid,\n          display: patient.display,\n        },\n        obs: obs.map((o) => {\n          return {\n            uuid: o.uuid,\n            concept: o.concept,\n            display: o.display,\n            formFieldPath: o.formFieldPath,\n            value: o.value,\n          };\n        }),\n        form: {\n          uuid: form.uuid,\n          display: form.display,\n          description: form.description,\n          name: form.name,\n        },\n        encounterDatetime,\n      };\n    });\n    console.log(next.encounters.length, \"# of new encounters to sync to dhis2\");\n  } else {\n    console.log(\"No encounters found for cursor: \", next.cursor);\n  }\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Create-Events": {
          "id": "8baa7389-9ff6-4cce-8a9c-d5f086b8a8bb",
          "name": "Create Events",
          "body": "// Create or update events for each encounter create(\ncreate(\n  \"tracker\",\n  {\n    events: (state) => {\n      console.log(\n        \"Creating events for: \",\n        JSON.stringify(state.eventsMapping, null, 2)\n      );\n      return state.eventsMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: \"UID\",\n      importStrategy: \"CREATE_AND_UPDATE\",\n    },\n  }\n);\n\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Custom-Logic-for-Events": {
          "id": "e59188b4-ebf2-4b26-8e80-dd689adc0ae7",
          "name": "Custom Logic for Events",
          "body": "const f08Form = \"f0bb3bf7-4e0a-3545-afce-a6b33b0378e4\";\nconst f09Form = \"6e1e468b-00b1-3e5d-a8cf-00f45b8fe261\";\nconst f23Form = \"1b14d9e6-0569-304e-9d4e-f9df40762dff\";\nconst f24Form = \"399cf41a-ea2a-39e3-8758-508e79729656\";\nconst f25Form = \"c4db716a-f9d0-35df-a589-d5caf2dfb106\";\nconst f26Form = \"afcf2993-233e-385b-8030-74a8b475eccd\";\nconst f27Form = \"ac97ec76-5647-3153-b4e1-2eceae121e50\";\nconst f28Form = \"893ef4b7-5ad1-39e7-8515-eab308ccd636\";\n\nconst encountersFormPairs = (encounters, formsUuids) => {\n  const { f08Form, f09Form, f23Form, f27Form, f28Form, f25Form, f26Form } =\n    formsUuids;\n  const f8f9Encounters = encounters.filter(\n    (e) => e.form.uuid === f08Form || e.form.uuid === f09Form\n  );\n  const f23f24Encounters = encounters.filter(\n    (e) => e.form.uuid === f23Form || e.form.uuid === f24Form\n  );\n  const f25f26Encounters = encounters.filter(\n    (e) => e.form.uuid === f25Form || e.form.uuid === f26Form\n  );\n  const f27f28Encounters = encounters.filter(\n    (e) => e.form.uuid === f27Form || e.form.uuid === f28Form\n  );\n\n  return {\n    f8f9Encounters,\n    f23f24Encounters,\n    f27f28Encounters,\n    f25f26Encounters,\n  };\n};\n\nconst MILLISECONDS_PER_YEAR = 365.25 * 24 * 60 * 60 * 1000;\nconst calculateAge = (dob) =>\n  Math.floor((new Date() - new Date(dob)) / MILLISECONDS_PER_YEAR);\n\nconst teiAge = (tei) => {\n  let age = tei?.attributes?.find(\n    (attr) => attr.attribute === \"T1iX2NuPyqS\"\n  )?.value;\n\n  if (!age) {\n    const birthdate = tei?.attributes?.find(\n      (attr) => attr.attribute === \"WDp4nVor9Z7\"\n    )?.value;\n    age = calculateAge(birthdate);\n  }\n  return age;\n};\n\nfunction f8(encounter) {\n  const obsDatetime = findObsByConcept(\n    encounter,\n    \"7f00c65d-de60-467a-8964-fe80c7a85ef0\"\n  )?.obsDatetime;\n\n  const datePart = obsDatetime.substring(0, 10);\n  const timePart = obsDatetime.substring(11, 19);\n  return [\n    {\n      dataElement: \"yprMS34o8s3\",\n      value: encounter.encounterDatetime,\n    },\n    {\n      dataElement: \"iQio7NYSA3m\",\n      value: datePart,\n    },\n    {\n      dataElement: \"yprMS34o8s3\",\n      value: timePart,\n    },\n  ];\n}\n\nfunction f27(encounter) {\n  const admissionDate = findObsByConcept(\n    encounter,\n    \"7f00c65d-de60-467a-8964-fe80c7a85ef0\"\n  )?.value;\n\n  return [\n    {\n      dataElement: \"eYvDzr2m8f5\",\n      value: admissionDate,\n    },\n  ];\n}\nfunction f23(encounter) {\n  // Define concept mappings object for cleaner reference\n  const CONCEPT_ID = \"f587c6a3-6a71-48ae-83b2-5e2417580b6f\";\n\n  const conditions = [\n    {\n      // 'Neonatal infection in previous pregnancy' is selected in OMRS\n      dataElement: \"H9noxo3e7ox\",\n      valueId: \"09d6bb71-b061-4cae-85f3-2ff020a10c92\",\n    },\n    {\n      // 'Mother got antibiotics during delivery/post-partum ' is selected in OMRS\n      dataElement: \"GfN1TtpqDoJ\",\n      valueId: \"3764bd79-9ae2-478a-88e7-51adc0a8a2e3\",\n    },\n    {\n      //'Infection in other baby if multiple pregnancy' is selected in OMRS\n      dataElement: \"WS1p4xgbZqU\",\n      valueId: \"95d55453-060b-43a2-b4a0-11848dd9ac72\",\n    },\n    {\n      //'Maternal fever during labour' is selected in OMRS\n      dataElement: \"WX19iDuB4Dj\",\n      valueId: \"890f4bdb-91bc-484c-a9cf-17f5068b0507\",\n    },\n    {\n      // 'Rupture of membranes ≥18h' is selected in OMRS\n      dataElement: \"eLKs6GUHJdS\",\n      valueId: \"28d10ce0-7f72-4654-834d-64fa37ad8e85\",\n    },\n    {\n      // 'Pre-labour rupture of membranes <18h' is selected in OMRS\n      dataElement: \"hCfngwimBjX\",\n      valueId: \"cf48d000-a741-44e0-81cb-a51f88595e41\",\n    },\n    {\n      // 'Smelling/cloudy amniotic fluid' is selected in OMRS\n      dataElement: \"qc7ubAwULxs\",\n      valueId: \"49829d18-22c9-404c-a79a-49ed6b21d2be\",\n    },\n  ];\n\n  // Map through conditions and create final mapping\n  return conditions.map((condition) => ({\n    dataElement: condition.dataElement,\n    value: findByConceptAndValue(encounter, CONCEPT_ID, condition.valueId)\n      ? true\n      : false,\n  }));\n}\n\nfunction teiAttributeMapping(tei, attributeMap) {\n  const attrMapping = Object.entries(attributeMap)\n    .map(([dataElement, attributeId]) => {\n      const value = tei?.attributes?.find(\n        (attr) => attr.attribute === attributeId\n      )?.value;\n\n      return { dataElement, value };\n    })\n    .filter(Boolean);\n\n  return attrMapping;\n}\n\nconst findObsByConcept = (encounter, conceptUuid) => {\n  const [conceptId, questionId] = conceptUuid.split(\"-rfe-\");\n  const answer = encounter.obs.find(\n    (o) =>\n      o.concept.uuid === conceptId &&\n      (questionId ? o.formFieldPath === `rfe-${questionId}` : true)\n  );\n  return answer;\n};\n\nconst findByConceptAndValue = (encounter, conceptUuid, value) => {\n  const [conceptId, questionId] = conceptUuid.split(\"-rfe-\");\n  const answer = encounter.obs.find(\n    (o) =>\n      o.concept.uuid === conceptId &&\n      (questionId ? o.formFieldPath === `rfe-${questionId}` : true) &&\n      o.value.uuid === value\n  );\n  return answer;\n};\n\nconst findDataValue = (encounter, dataElement, metadataMap) => {\n  const { optsMap, optionSetKey, form } = metadataMap;\n  const [conceptUuid, questionId] =\n    form.dataValueMap[dataElement]?.split(\"-rfe-\");\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  const isObjectAnswer = answer && typeof answer.value === \"object\";\n  const isStringAnswer = answer && typeof answer.value === \"string\";\n\n  if (isStringAnswer) {\n    return answer.value;\n  }\n\n  if (isObjectAnswer) {\n    const optionKey = questionId\n      ? `${encounter.form.uuid}-${answer.concept.uuid}-rfe-${questionId}`\n      : `${encounter.form.uuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      (o) =>\n        o[\"value.uuid - External ID\"] === answer.value.uuid &&\n        o[\"DHIS2 Option Set UID\"] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.[\"DHIS2 Option Code\"] ||\n      opt?.[\"DHIS2 Option name\"] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    if ([\"FALSE\", \"No\"].includes(matchingOption)) return \"false\";\n    if ([\"TRUE\", \"Yes\"].includes(matchingOption)) return \"true\";\n\n    return matchingOption;\n  }\n\n  const isEncounterDate =\n    conceptUuid === \"encounter-date\" &&\n    [\"CXS4qAJH2qD\", \"I7phgLmRWQq\", \"yUT7HyjWurN\", \"EOFi7nk2vNM\"].includes(\n      dataElement\n    );\n\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace(\"+0000\", \"\");\n  }\n\n  return \"\";\n};\n\nconst buildDataValues = (encounter, form, mappingConfig) => {\n  const { optsMap, optionSetKey, tei } = mappingConfig;\n  let formMapping = [];\n  // F08 Form Encounter Mapping\n  if (encounter.form.uuid === f08Form) {\n    const f8Mapping = f8(encounter);\n    formMapping.push(...f8Mapping);\n  }\n\n  // F09 Form Encounter Mapping\n  if (encounter.form.uuid === f09Form) {\n    const attributeMap = {\n      Lg1LrNf9LQR: \"qptKDiv9uPl\",\n      OVo3FxLURtH: \"k26cdlS78i9\",\n      f3n6kIB9IbI: \"Rv8WM2mTuS5\",\n      oc9zlhOoWmP: \"YUIQIA2ClN6\",\n      DbyD9bbGIvE: \"Qq6xQ2s6LO8\",\n      fiPFww1viBB: \"rBtrjV1Mqkz\",\n      FsL5BjQocuo: \"Xvzc9e0JJmp\",\n    };\n    const f09Mapping = teiAttributeMapping(tei, attributeMap);\n    formMapping.push(...f09Mapping);\n  }\n\n  // F23 Form Encounter Mapping\n  if (encounter.form.uuid === f23Form) {\n    const f23Mapping = f23(encounter);\n    formMapping.push(...f23Mapping);\n  }\n\n  // F24 Form Encounter Mapping\n  if (encounter.form.uuid === f24Form) {\n    const attributeMap = {\n      Hww0CNYYt3E: \"qptKDiv9uPl\",\n      // Z7vMFdnQxpE: \"WDp4nVor9Z7\",\n      // L97SmAK11DN: \"T1iX2NuPyqS\",\n      yE0dIWW0TXP: \"rBtrjV1Mqkz\",\n    };\n    const attributeMapping = teiAttributeMapping(tei, attributeMap);\n\n    const dob = tei?.attributes?.find(\n      (attr) => attr.attribute === \"WDp4nVor9Z7\"\n    )?.value;\n\n    if (dob) {\n      let ageInDays = calculateAge(dob) * 365;\n      attributeMapping.push({\n        dataElement: \"Z7vMFdnQxpE\",\n        value: ageInDays,\n      });\n    }\n    if (!dob) {\n      const age = tei?.attributes?.find(\n        (attr) => attr.attribute === \"T1iX2NuPyqS\"\n      )?.value;\n\n      const ageInMonths = age * 12;\n\n      attributeMapping.push({\n        dataElement: \"L97SmAK11DN\",\n        value: ageInMonths,\n      });\n    }\n\n    formMapping.push(...attributeMapping);\n  }\n\n  if (encounter.form.uuid === f26Form) {\n    const attributeMap = {\n      eDuqRYx3wLx: \"qptKDiv9uPl\",\n      d7wOfzPBbQD: \"T1iX2NuPyqS\",\n      y9pK9sVcbU9: \"k26cdlS78i9\",\n      // b7z6xIpzkim: \"\",\n      CDuiRuOcfzj: \"YUIQIA2ClN6\",\n      JMhFzB97fcS: \"Qq6xQ2s6LO8\",\n      Nd43pz1Oo62: \"rBtrjV1Mqkz\",\n    };\n    const attributeMapping = teiAttributeMapping(tei, attributeMap);\n\n    const dob = tei?.attributes?.find(\n      (attr) => attr.attribute === \"WDp4nVor9Z7\"\n    )?.value;\n\n    if (dob) {\n      let ageInDays = calculateAge(dob) * 365;\n      attributeMapping.push({\n        dataElement: \"b7z6xIpzkim\",\n        value: ageInDays,\n      });\n    }\n\n    formMapping.push(...attributeMapping);\n  }\n\n  // F27 Form Encounter Mapping\n  if (encounter.form.uuid === f27Form) {\n    const f27Mapping = f27(encounter);\n    formMapping.push(...f27Mapping);\n  }\n\n  // F28 Form Encounter Mapping\n  if (encounter.form.uuid === f28Form) {\n    const attributeMap = {\n      WP5vr8KB2lH: \"qptKDiv9uPl\",\n      Y7qzoa4Qaiz: \"YUIQIA2ClN6\",\n      XCUd9xOGXkn: \"Qq6xQ2s6LO8\",\n      onKT21rxH6Z: \"rBtrjV1Mqkz\",\n      sCKCNreiqEA: \"Xvzc9e0JJmp\",\n    };\n    const attributeMapping = teiAttributeMapping(tei, attributeMap);\n\n    const f28Mapping = [\n      {\n        dataElement: \"NWOnMq8h4w1\",\n        value: teiAge(tei),\n      },\n    ];\n    formMapping.push(...attributeMapping, ...f28Mapping);\n  }\n\n  const dataValuesMapping = Object.keys(form.dataValueMap)\n    .map((dataElement) => {\n      const value = findDataValue(encounter, dataElement, {\n        optsMap,\n        optionSetKey,\n        form,\n      });\n\n      return { dataElement, value };\n    })\n    .filter((d) => d.value);\n\n  const combinedMapping = [...dataValuesMapping, ...formMapping].filter(\n    Boolean\n  );\n\n  return combinedMapping;\n};\n\nfn((state) => {\n  // Group encounters by patient UUID\n  const encountersByPatient = state.encounters?.reduce((acc, obj) => {\n    const key = obj.patient.uuid;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n\n  state.eventsMapping = Object.entries(encountersByPatient)\n    .map(([patientUuid, patientEncounters]) => {\n      const pairedEncounters = Object.values(\n        encountersFormPairs(patientEncounters, {\n          f08Form,\n          f09Form,\n          f23Form,\n          f27Form,\n          f28Form,\n          f25Form,\n          f26Form,\n        })\n      );\n\n      return pairedEncounters\n        .filter((encounters) => encounters.length === 2)\n        .map((encounters) => {\n          // Get the forms for both encounters\n          const form1 = state.formMaps[encounters[0].form.uuid];\n          const form2 = state.formMaps[encounters[1].form.uuid];\n\n          // Skip if either form doesn't have dataValueMap\n          if (!form1?.dataValueMap || !form2?.dataValueMap) {\n            return null;\n          }\n\n          const tei = state.TEIs[patientUuid];\n\n          const dataValues = encounters\n            .map((encounter) => {\n              const form = state.formMaps[encounter.form.uuid];\n              if (!form?.dataValueMap) {\n                return null;\n              }\n\n              return buildDataValues(encounter, form, {\n                optsMap: state.optsMap,\n                optionSetKey: state.optionSetKey,\n                tei,\n              });\n            })\n            .flat()\n            .filter((d) => d.value);\n\n          return {\n            program: form1.programId,\n            orgUnit: form1.orgUnit,\n            occurredAt: encounters[0].encounterDatetime.replace(\"+0000\", \"\"),\n            programStage: form1.programStage,\n            dataValues,\n            trackedEntityInstance: patientUuid,\n          };\n        })\n        .filter(Boolean);\n    })\n    .flat()\n    .filter(Boolean);\n\n  return state;\n});\n\nfn((state) => {\n  return {\n    eventsMapping: state.eventsMapping,\n  };\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Get-Patients": {
          "id": "a009e4d0-0ae6-41e7-8023-be8ca9234a87",
          "name": "Get Patients",
          "body": "function removeLinks(data) {\n  if (Array.isArray(data)) {\n    return data.map(removeLinks);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const { links, ...rest } = data;\n    return Object.fromEntries(\n      Object.entries(rest).map(([key, value]) => [key, removeLinks(value)])\n    );\n  }\n\n  return data;\n}\n\nfunction removeNulls(data) {\n  if (Array.isArray(data)) {\n    return data.filter((item) => item !== null).map(removeNulls);\n  }\n\n  if (typeof data === \"object\" && data !== null) {\n    const result = {};\n    for (const [key, value] of Object.entries(data)) {\n      if (value !== null) {\n        result[key] = removeNulls(value);\n      }\n    }\n    return result;\n  }\n\n  return data;\n}\ncursor($.lastRunDateTime || $.manualCursor || \"2025-03-20T06:01:24.000Z\");\n\ncursor(\"today\", {\n  key: \"lastRunDateTime\",\n  format: (c) => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({\n  q: \"IQ146-25-012-291\",\n  v: \"full\",\n  limit: \"100\",\n});\n\nfn((state) => {\n  const { cursor, data, lastRunDateTime } = state;\n  console.log(\"Filtering patients since cursor:\", cursor);\n\n  state.patients = data.results\n    .filter(({ auditInfo }) => {\n      const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n      return lastModified > cursor;\n    })\n    .map((p) => {\n      const { uuid, auditInfo, identifiers, person } = removeLinks(\n        removeNulls(p)\n      );\n      const { dateCreated } = auditInfo;\n      const { age, birthdate, gender, names, addresses, attributes } = person;\n\n      return {\n        uuid,\n        person: {\n          age,\n          birthdate,\n          gender,\n          names,\n          addresses: [addresses.find((a) => a.cityVillage)],\n          attributes,\n        },\n        identifiers,\n        auditInfo: { dateCreated },\n      };\n    });\n  state.searchPatientUuids = state.patients.map((p) => p.uuid);\n  console.log(\"# of patients to sync to dhis2 ::\", state.patients.length);\n\n  return state;\n});\n\n// Fetch all encounters\nhttp\n  .get(\"/ws/fhir2/R4/Encounter\", {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then((state) => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find((l) => l.relation === \"next\")\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split(\"/openmrs\")[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then((state) => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\nfn((state) => {\n  console.log(\n    \"Total # of encounters fetched: \",\n    state.allResponse?.entry?.length\n  );\n\n  const uuids = [\n    ...new Set(\n      state.allResponse?.entry?.map((p) =>\n        p.resource?.subject?.reference?.replace(\"Patient/\", \"\")\n      )\n    ),\n  ];\n  state.encounterPatientUuids = [...new Set(uuids)];\n\n  return state;\n});\n\nfn((state) => {\n  const {\n    cursor,\n    lastRunDateTime,\n    patients,\n    searchPatientUuids,\n    encounterPatientUuids,\n  } = state;\n\n  const onlyInSearchPatient = searchPatientUuids.filter(\n    (id) => !encounterPatientUuids.includes(id)\n  );\n\n  const onlyInR4Encounter = encounterPatientUuids.filter(\n    (id) => !searchPatientUuids.includes(id)\n  );\n  const inbothResults = searchPatientUuids.filter((id) =>\n    encounterPatientUuids.includes(id)\n  );\n  const patientUuids = [...new Set(searchPatientUuids, encounterPatientUuids)];\n\n  console.log(\"inbothResults\", inbothResults.length);\n  console.log(\"patient-search-array\", onlyInSearchPatient.length);\n  console.log(\"r4-encounter-array\", onlyInR4Encounter.length);\n  console.log(\"combined uuids\", patientUuids.length);\n\n  return { cursor, lastRunDateTime, patients, patientUuids };\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Upsert-TEIs": {
          "id": "0285a393-4dd1-4a93-886a-ebab07e72d7b",
          "name": "Upsert TEIs",
          "body": "const buildTeiMapping = (omrsPatient, patientTei, mappingConfig) => {\n  const genderMap = {\n    M: \"male\",\n    O: \"unknown\",\n    F: \"female\",\n    U: \"unknown\",\n  };\n  const {\n    orgUnit,\n    program,\n    optsMap,\n    formMaps,\n    placeOflivingMap,\n    patientProgramStage,\n    dhis2PatientNumber,\n    openmrsAutoId,\n  } = mappingConfig;\n\n  const enrolledAt = omrsPatient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find((i) => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const findOptsUuid = (uuid) =>\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value?.uuid ||\n    omrsPatient.person.attributes.find((a) => a.attributeType.uuid === uuid)\n      ?.value;\n\n  const findOptCode = (optUuid) =>\n    optsMap.find((o) => o[\"value.uuid - External ID\"] === optUuid)?.[\n      \"DHIS2 Option Code\"\n    ];\n\n  const patientMap = formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map((d) => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: \"fa7uwpCKIwa\",\n      value: omrsPatient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: \"Jt9BhFZkvP2\",\n      value: omrsPatient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: \"P4wdYGkldeG\", //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(omrsPatient.identifiers, dhis2PatientNumber) ||\n        findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: \"ZBoxuExmxcZ\", //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(omrsPatient.identifiers, openmrsAutoId),\n    },\n    {\n      attribute: \"AYbfTPYMNJH\", //\"OpenMRS Patient UID\"\n      value: omrsPatient.uuid,\n    },\n\n    {\n      attribute: \"T1iX2NuPyqS\",\n      value: omrsPatient.person.age,\n    },\n    {\n      attribute: \"WDp4nVor9Z7\",\n      value: omrsPatient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: \"rBtrjV1Mqkz\", //Place of living\n      value: placeOflivingMap[omrsPatient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter((a) => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter((a) => a.value);\n\n  const payload = {\n    program,\n    orgUnit,\n    attributes: [...filteredAttr, ...filteredStatusAttr],\n  };\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (!patientTei) {\n    payload.trackedEntityType = \"cHlzCA2MuEF\";\n    const enrollments = [\n      {\n        orgUnit,\n        program,\n        enrolledAt,\n        programStage: patientProgramStage, //'MdTtRixaC1B',\n      },\n    ];\n    payload.attributes.push({\n      attribute: \"qptKDiv9uPl\",\n      value: genderMap[omrsPatient.person.gender],\n    });\n    console.log(\"create enrollment\");\n    payload.enrollments = enrollments;\n  } else {\n    payload.trackedEntity = patientTei.trackedEntity;\n    payload.trackedEntityType = patientTei.trackedEntityType;\n  }\n\n  return payload;\n};\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nget(\"tracker/trackedEntities\", {\n  orgUnit: $.orgUnit,\n  filter: (state) => [\n    `AYbfTPYMNJH:IN:${state.patients.map((patient) => patient.uuid).join(\";\")}`,\n  ],\n  program: $.program,\n});\n\nfn((state) => {\n  const findTeiByUuid = (patientUuid) => {\n    return state.data.instances.find((tei) => {\n      return (\n        tei.attributes.find(\n          (attribute) => attribute.attribute === \"AYbfTPYMNJH\"\n        )?.value === patientUuid\n      );\n    });\n  };\n\n  state.patientsMapping = state.patients.map((patient) => {\n    const patientTei = findTeiByUuid(patient.uuid);\n\n    return buildTeiMapping(patient, patientTei, {\n      placeOflivingMap: state.placeOflivingMap,\n      orgUnit: state.orgUnit,\n      program: state.program,\n      patientProgramStage: state.patientProgramStage,\n      formMaps: state.formMaps,\n      optsMap: state.optsMap,\n      dhis2PatientNumber: state.dhis2PatientNumber,\n      openmrsAutoId: state.openmrsAutoId,\n    });\n  });\n\n  return state;\n});\n\n// Bulk upsert\ncreate(\n  \"tracker\",\n  { trackedEntities: $.patientsMapping },\n  {\n    params: {\n      atomicMode: \"ALL\",\n      async: false,\n    },\n  }\n);\n\nfn((state) => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    identifiers,\n    ...next\n  } = state;\n  next.patientUuids = patients.map((p) => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "e0882dac-48d4-46a1-857b-7c538f4337b0",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n//TODO: Group the encounters by patient and then get the TEI for each patient\neach(\n  $.encounters,\n  get(\"tracker/trackedEntities\", (state) => ({\n    orgUnit: $.orgUnit,\n    program: $.program,\n    // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n    fields: \"*,enrollments[*],enrollments[events[*]], attributes[*]\",\n  })).then(async (state) => {\n    const encounter = state.references.at(-1);\n    console.log(encounter.patient.uuid, \"Encounter patient uuid\");\n\n    const { trackedEntity, enrollments, attributes } =\n      state.data?.instances?.[0] || {};\n    if (trackedEntity && enrollments) {\n      state.TEIs ??= {};\n      state.TEIs[encounter.patient.uuid] = {\n        trackedEntity,\n        events: enrollments[0]?.events,\n        enrollment: enrollments[0]?.enrollment,\n        attributes,\n      };\n    }\n\n    await delay(2000);\n    return state;\n  })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Tie": {
          "id": "19bd6f3b-3e57-4189-8fb6-ce78ec879d9d",
          "name": "Get Tie",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst patientUid = \"d464433d-41d5-482f-808c-7fe364847352\"\n//TODO: Group the encounters by patient and then get the TEI for each patient\nget('tracker/trackedEntities', state => ({\n  orgUnit: \"sUpt0j2GmBD\",\n  program: \"dWdzxMuKa8Z\",\n  // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  filter: [`AYbfTPYMNJH:Eq:${patientUid}`],\n  fields: '*,enrollments[*],enrollments[events[*]], attributes[*]',\n})).then(async state => {\n  \n  console.log(patientUid, 'Encounter patient uuid');\n\n  const { trackedEntity, enrollments, attributes } = state.data?.instances?.[0] || {};\n  if (trackedEntity && enrollments) {\n    state.TEIs ??= {};\n    state.TEIs[patientUid] = {\n      trackedEntity,\n      events: enrollments[0]?.events,\n      enrollment: enrollments[0]?.enrollment,\n      attributes\n    };\n  }\n\n  await delay(2000);\n  return state;\n})\n",
          "adaptor": "@openfn/language-dhis2@7.1.3",
          "project_credential_id": null
        }
      },
      "edges": {
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "4cbe19d0-4c94-4cbd-8941-32cc677a815e",
          "target_job_id": "f4c1f626-6381-4376-87ba-567bac8cd537",
          "source_job_id": "0285a393-4dd1-4a93-886a-ebab07e72d7b",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Get-Patients->Get-Mappings-from-Collection": {
          "enabled": true,
          "id": "d85dfa4f-7e9f-4c83-8126-14c3da8611e4",
          "target_job_id": "466da798-9e0c-41f5-869d-eafe12728901",
          "source_job_id": "a009e4d0-0ae6-41e7-8023-be8ca9234a87",
          "condition_type": "on_job_success"
        },
        "Get-TEIs-and-Map-Answers->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "6651189f-1909-4c92-820c-901cfcb73b70",
          "target_job_id": "e59188b4-ebf2-4b26-8e80-dd689adc0ae7",
          "source_job_id": "e0882dac-48d4-46a1-857b-7c538f4337b0",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.TEIs && !state.errors\n"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "da1430fd-77c2-4d09-8352-c3c51e757c55",
          "target_job_id": "e0882dac-48d4-46a1-857b-7c538f4337b0",
          "source_job_id": "f4c1f626-6381-4376-87ba-567bac8cd537",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state?.encounters?.length > 0\n"
        },
        "cron->Get-Patients": {
          "enabled": true,
          "id": "869eac6b-c4ed-4cb1-81b8-10014cce6bf8",
          "target_job_id": "a009e4d0-0ae6-41e7-8023-be8ca9234a87",
          "source_trigger_id": "70da25eb-a3c3-4451-8b8c-9de15b6bc282",
          "condition_type": "always"
        },
        "Get-Mappings-from-Collection->Upsert-TEIs": {
          "enabled": true,
          "id": "2fb1882b-4d33-4b98-859f-aee13063e89d",
          "target_job_id": "0285a393-4dd1-4a93-886a-ebab07e72d7b",
          "source_job_id": "466da798-9e0c-41f5-869d-eafe12728901",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Get-Tie->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "0f154105-a735-4ef8-8398-9f34e5142a17",
          "target_job_id": "e59188b4-ebf2-4b26-8e80-dd689adc0ae7",
          "source_job_id": "19bd6f3b-3e57-4189-8fb6-ce78ec879d9d",
          "condition_type": "js_expression",
          "condition_label": "test-mode",
          "condition_expression": "state.testMode\n"
        },
        "Custom-Logic-for-Events->Create-Events": {
          "enabled": true,
          "id": "4131ab15-7c86-4385-8d44-eb283916411c",
          "target_job_id": "8baa7389-9ff6-4cce-8a9c-d5f086b8a8bb",
          "source_job_id": "e59188b4-ebf2-4b26-8e80-dd689adc0ae7",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors && !state.testMode\n"
        },
        "Get-Mappings-from-Collection->Get-Encounters": {
          "enabled": true,
          "id": "6125b84e-655c-4d28-8a2e-25f4cd913c3c",
          "target_job_id": "f4c1f626-6381-4376-87ba-567bac8cd537",
          "source_job_id": "466da798-9e0c-41f5-869d-eafe12728901",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        }
      }
    },
    "wf1-dhis2-omrs-migration-155": {
      "id": "b005d221-98f6-4d73-ac53-c075adb19b0a",
      "name": "wf1-dhis2-omrs-migration-155",
      "inserted_at": "2025-09-30T12:05:51.828224Z",
      "lock_version": 2,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "5dc79c59-befd-4755-80b7-c6d490a5092a",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Fetch-Metadata": {
          "id": "a0ad2de0-3b1f-4cc3-866d-5b986f71c128",
          "name": "Fetch Metadata",
          "body": "cursor($.manualCursor || $.lastRunDateTime).then((state) => {\n  console.log(\"Date cursor to filter TEI extract ::\", state.cursor);\n  return state;\n});\n\ncursor(\"now\", {\n  key: \"lastRunDateTime\",\n  format: (c) => {\n    const offset = 2; // GMT+2 (Geneva time)\n    c.setHours(c.getHours() + offset);\n    return c.toISOString().replace(\"Z\", \"\");\n  },\n}).then((state) => {\n  console.log(\"Next sync start date:\", state.lastRunDateTime);\n  return state;\n});\n\n// get(\n//   'https://raw.githubusercontent.com/OpenFn/openfn-lime-pilot/refs/heads/collections/metadata/collections.json',\n//   { parseAs: 'json' },\n//   state => {\n//     const { cursor, lastRunDateTime, data } = state;\n\n//     return { ...data, cursor, lastRunDateTime };\n//   }\n// );\n\nfn((state) => {\n  const { cursor, lastRunDateTime } = state;\n\n  const data = {\n    lastSync: \"2025-09-30T10:18:54.979Z\",\n    statusMap: {\n      no: \"a5c5563e-df0e-4742-a335-b24fb63664ee\",\n      idp: \"099856ce-d8ed-46dc-b541-0379858fb93d\",\n      yes: \"681cf0bc-5213-492a-8470-0a0b3cc324dd\",\n      other: \"790b41ce-e1e7-11e8-b02f-0242ac130002\",\n      single: \"20b8524e-4c26-4fa0-81f0-fa23ebacc54d\",\n      married: \"e64097ff-8069-42d5-8670-69f43b2838c5\",\n      refugee: \"c4f005fd-949f-4a15-8f3f-8bc84533274d\",\n      student: \"69c3d769-c1da-4e48-940a-45b5a4ba395a\",\n      unknown: \"ccb4c50d-13e0-46a2-bd5e-51c86d042ad8\",\n      widowed: \"278cf4fc-50e9-45a7-b633-9a3838eb88cf\",\n      negative: \"a3699fc8-1781-48af-aded-2d9e8e233fde\",\n      positive: \"ad30cb86-fe71-4dc5-a5e3-cd6c3f6545c8\",\n      returnee: \"fc49acaa-ece2-4365-9dfb-70c2105de8b1\",\n      housewife: \"9b14b4d4-b749-4acf-acfe-79c480f3c4b3\",\n      no_status: \"2bacead2-f280-457c-9d28-e80e106f7d25\",\n      unemployed: \"743d174f-f9c7-42a2-80cd-9930e4c52787\",\n      partner_left: \"783a300d-5624-4202-90c6-91660a779cab\",\n      asylum_seeker: \"f921ffdd-72ca-4d58-a89b-1fa2e959d110\",\n      non_displaced: \"bbdb287c-4ba1-4944-bd87-eb126c5f9d92\",\n      fixed_employee: \"5a69bbf4-d4f2-455a-a32e-6179cec3f0cd\",\n      not_applicable: \"8fb2f830-52b3-4593-8e8f-5db8e2be7668\",\n      divorced_separated: \"cbd0c027-1101-4fbe-ae90-4551695f1771\",\n      occasional_employee: \"2cb73bee-7f94-4695-89c7-c81187dbc90c\",\n      internationally_displaced: \"515c5abe-4172-4d0c-a991-0de2888228d7\",\n    },\n    syncedAt: \"2025-09-30T10:18:54.963Z\",\n    formMaps: {\n      patient: {\n        formName: \"F00-Registration\",\n        programId: \"w9MSPn5oSqp\",\n        dataValueMap: {\n          FpuGAOu6itZ: \"3884dc76-c271-4bcb-8df8-81c6fb897f53\",\n          Jt9BhFZkvP2: \"38ef5485-e67f-4a10-bf36-08304fe63877\",\n          Qq6xQ2s6LO8: \"a9b2c642-097f-43f8-b96b-4d2f50ffd9b1\",\n          SVoT2cVLd5O: \"e363161a-9d5c-4331-8463-238938f018ed\",\n          WDp4nVor9Z7: \"c020e465-d495-4f6b-97fa-6d4c0009fcd2\",\n          Xvzc9e0JJmp: \"24d1fa23-9778-4a8e-9f7b-93f694fc25e2\",\n          YUIQIA2ClN6: \"e0b6ed99-72c4-4847-a442-e9929eac4a0f\",\n          fa7uwpCKIwa: \"c404d489-dcb9-44d9-9c30-c5a64ea0df25\",\n          mVbzW9TVo7r: \"bc851ec1-9fb7-49da-acd7-1a61168002fe\",\n          qptKDiv9uPl: \"ec42d68d-3e23-43de-b8c5-a03bb538e7c7\",\n          v7k4OcXrWR8: \"dd1f7f0f-ccea-4228-9aa8-a8c3b0ea4c3e\",\n        },\n        optionSetMap: [\n          { DNOavthBRGL: \"ec42d68d-3e23-43de-b8c5-a03bb538e7c7\" },\n          { qr9jBtm9uvm: \"24d1fa23-9778-4a8e-9f7b-93f694fc25e2\" },\n          { FTbwlOo7CpG: \"e0b6ed99-72c4-4847-a442-e9929eac4a0f\" },\n          { y38Qm3uiuuV: \"a9b2c642-097f-43f8-b96b-4d2f50ffd9b1\" },\n          { G69FtaNkBgp: \"3884dc76-c271-4bcb-8df8-81c6fb897f53\" },\n          { RpW3aZrlHDi: \"dd1f7f0f-ccea-4228-9aa8-a8c3b0ea4c3e\" },\n        ],\n        programStage: \"MdTtRixaC1B\",\n      },\n      \"47ccf9ca-d1a6-3ec1-b474-880a5ab29fee\": {\n        formName: \"F34-mhGAP Closure\",\n        syncType: \"latest\",\n        programId: \"w9MSPn5oSqp\",\n        dataValueMap: {\n          D9Fd8ZJygPd:\n            \"08cd4b4a-4b0b-4391-987b-b5b3d770d30f-rfe-forms-specifyMobileClinic\",\n          Di6tE3HKIuz:\n            \"1bf47398-7786-4f3e-8cae-b84a21f53eba-rfe-forms-totalNumberOfSessions\",\n          KgBg7yNmBfv: \"6545b874-f44d-4d18-9ab1-7a8bb21c0a15-rfe-forms-phq9\",\n          Sof9AZ6UrV2:\n            \"0a0c70d2-2ba5-4cb3-941f-b4a9a4a7ec6d-rfe-forms-specifyHealthFacility\",\n          UYgvmfBTHmJ:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-patientReferredTo_ifOtherSpecify\",\n          aIEDqQJxdlR:\n            \"e08d532b-e56c-43dc-b831-af705654d2dc-rfe-forms-mainLocationOfIntervention_ifOtherSpecify\",\n          bduR8KPNSeV:\n            \"8a9d2ace-372f-4413-a1c4-8999f55e2de2-rfe-forms-closureDate\",\n          c4TiPRUQ56A: \"77f1a782-24af-40ba-bac1-b97d9a080f40-rfe-forms-cgiS\",\n          e9wcjUxG8mD:\n            \"41e68dee-a2a3-4e6c-9d96-53def5caff52-rfe-forms-specifyMsfHealthFacility\",\n          gCgVclE0oZf:\n            \"cce4fc0b-9d64-4918-8583-2449a59aef60-rfe-forms-wasAMentalHealthCertificateProvided\",\n          hDcpO0zG7Gi:\n            \"b87a93ff-a4a1-4601-b35d-1e42bfa7e194-rfe-forms-totalNumberOfBeneficiariesInFamilyConsultation\",\n          iEdamWl0wzQ: \"c64dfacd-2fb5-464d-83a9-ebb9eb8d3ab3-rfe-forms-cgiI\",\n          iHyhvpeywlU:\n            \"401b2df0-e26f-4f49-9165-6e20a1b8865a-rfe-forms-mainTypeOfConsultation\",\n          kuVhB0o09ow:\n            \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-mainLocationOfIntervention\",\n          lvCcX90Ud3h:\n            \"9e861ef1-e07c-4955-9650-2ebac3138fc3-rfe-forms-typeOfClosure\",\n          pQG72ee2lkl: \"90b3d09c-d296-44d2-8292-8e04377fe027-rfe-forms-mhos\",\n          unHaNHLF5ef:\n            \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          yf7WT2UkK7B: \"22b16c12-4487-42f4-956c-1890d1f81ac8-rfe-forms-gad7\",\n        },\n        optionSetMap: [\n          {\n            mimbbLDaZyZ:\n              \"401b2df0-e26f-4f49-9165-6e20a1b8865a-rfe-forms-mainTypeOfConsultation\",\n          },\n          {\n            zdJEZvP5dVf:\n              \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-mainLocationOfIntervention\",\n          },\n          {\n            ovpSADYY35a:\n              \"9e861ef1-e07c-4955-9650-2ebac3138fc3-rfe-forms-typeOfClosure\",\n          },\n          {\n            HlTA658wGdn:\n              \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          },\n          {\n            kcV89u3gFad: \"77f1a782-24af-40ba-bac1-b97d9a080f40-rfe-forms-cgiS\",\n          },\n          {\n            kcV89u3gFad: \"c64dfacd-2fb5-464d-83a9-ebb9eb8d3ab3-rfe-forms-cgiI\",\n          },\n        ],\n        programStage: \"wuRtvl5ZXHw\",\n      },\n      \"64d35920-6c05-398e-bdf0-a8a671855491\": {\n        formName: \"F30-MHPSS Follow-up\",\n        syncType: \"all\",\n        programId: \"w9MSPn5oSqp\",\n        dataValueMap: {\n          AZUFlZzPN6V:\n            \"278d3d1e-c02a-4db1-8ab3-8db3b82eb9b5-rfe-forms-patientRescheduled\",\n          Aj7RmRcG7A4:\n            \"3dceead1-70d5-4030-b8f3-bda3938af08d-rfe-forms-doesThePatientHaveACurrentSuicidalRisk\",\n          C5XtlggtVmd: \"f94de17e-9771-4711-aabb-c5bb0c022be2-rfe-forms-cgiI\",\n          CcA8pc2YqWz:\n            \"d9454e9c-6e3c-45ab-8a9a-834a9353ae11-rfe-forms-sessionNumber\",\n          DdAY5siLKOY:\n            \"3b5aa1dd-2d05-4fbd-b8ca-8a7d4ccbf856-rfe-forms-didThePatientSufferNewCriticalEventsSinceTheLastConsultation\",\n          E7MVMTTdvPi:\n            \"b87a93ff-a4a1-4601-b35d-1e42bfa7e194-rfe-forms-totalNumberOfBeneficiariesInFamilyConsultation\",\n          G0hLyxqgcO7:\n            \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9-rfe-forms-didThePatientMissTheSession\",\n          GVTXoz0VrAd:\n            \"5f6e245c-83fc-421b-8d46-061ac773ae71-rfe-forms-followUpSessionRequired\",\n          HNZHetAtowR:\n            \"d34d5e93-03d6-494e-8f4c-2d7221227162-rfe-forms-reasonForMissedAppointment\",\n          K14cCmpYP26:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-patientReferredTo_ifOtherSpecify\",\n          L6Jj7Tppr5q:\n            \"e08d532b-e56c-43dc-b831-af705654d2dc-rfe-forms-locationOfIntervention_ifOtherSpecify\",\n          LCdm2xe86ln:\n            \"41e68dee-a2a3-4e6c-9d96-53def5caff52-rfe-forms-specifyMsfHealthFacility\",\n          LllEEDbbhzz:\n            \"e0d4e006-85b5-41cb-8a21-e013b1978b8b-rfe-forms-mainNewPrecipitatingEvents3\",\n          N6GYmCjAhfh:\n            \"6d3876be-0a27-466d-ad58-92edcc8c31fb-rfe-forms-referralDone\",\n          UlSJrSD78HS:\n            \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-locationOfIntervention\",\n          VcUVLwrZAco:\n            \"54a9b20e-bce5-4d4a-8c9c-e0248a182586-rfe-forms-mainNewPrecipitatingEvents2\",\n          XjPbncUyYOH:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-pastOrPrecipitatingEvents_ifOtherSpecify\",\n          d8Dok4D8Fl4:\n            \"1a8bf24f-4f36-4971-aad9-ae77f3525738-rfe-forms-typeOfConsultation\",\n          g99rxDRwLht:\n            \"5f3d618e-5c89-43bd-8c79-07e4e98c2f23-rfe-forms-phq9Score\",\n          hprcEVS6ojr:\n            \"c1a3ed2d-6d9a-453d-9d93-749164a76413-rfe-forms-mainCategoryOfPrecipitatingEvent\",\n          j8IYwKvxK4q:\n            \"ccc4f06c-b76a-440d-9b7e-c48ba2c4a0ab-rfe-forms-doesThePatientPresentARiskOfHarmingOthers\",\n          kkG7XvFkZNs:\n            \"89e1b4f8-d4c6-491b-bc32-4d4f79a8df9d-rfe-forms-gad7Score\",\n          mqiPJsWZljN:\n            \"d5e3d927-f7ce-4fdd-ac4e-6ad0b510b608-rfe-forms-mainNewPrecipitatingEvents1\",\n          rDOPHD77P6d:\n            \"edc6f30c-4ff2-4a4f-8b90-ca4502bb97a1-rfe-forms-nextSessionDate\",\n          rGS6S4jyKu3:\n            \"08cd4b4a-4b0b-4391-987b-b5b3d770d30f-rfe-forms-specifyMobileClinic\",\n          sGEOde9q9p9:\n            \"0a0c70d2-2ba5-4cb3-941f-b4a9a4a7ec6d-rfe-forms-specifyHealthFacility\",\n          t4HoHWCYdvm:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-reasonForMissedAppointment_ifOtherSpecify\",\n          tXMgjzusbbt:\n            \"b2c5b6e0-66f0-4b9d-8576-b6f48e0a06df-rfe-forms-mhosScore\",\n          tloy0Bd9qDf:\n            \"d7410cd3-29be-4f8b-93d6-eb4de005db29-rfe-forms-numberOfAppointmentsMissed\",\n          vWWl7izQpqd:\n            \"82d1fcad-d1be-4ea2-a66c-c872fb4825b4-rfe-forms-typeOfIntervention\",\n          wvVn2LfmNDO:\n            \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          yTFUtaFJ1QU: \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiS\",\n          yUT7HyjWurN: \"encounter-date\",\n          yb8WWTuSXWa:\n            \"8ef009b1-396c-4dda-a816-b688ed66e450-rfe-forms-timeFromTheMainEvent\",\n        },\n        optionSetMap: [\n          {\n            FYHuq8p4TYP:\n              \"1a8bf24f-4f36-4971-aad9-ae77f3525738-rfe-forms-typeOfConsultation\",\n          },\n          {\n            zdJEZvP5dVf:\n              \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-locationOfIntervention\",\n          },\n          {\n            F350PsrQw3Z:\n              \"82d1fcad-d1be-4ea2-a66c-c872fb4825b4-rfe-forms-typeOfIntervention\",\n          },\n          {\n            WlbDv2LELNz:\n              \"d34d5e93-03d6-494e-8f4c-2d7221227162-rfe-forms-reasonForMissedAppointment\",\n          },\n          {\n            yHYkho3rRNV:\n              \"d5e3d927-f7ce-4fdd-ac4e-6ad0b510b608-rfe-forms-mainNewPrecipitatingEvents1\",\n          },\n          {\n            yHYkho3rRNV:\n              \"54a9b20e-bce5-4d4a-8c9c-e0248a182586-rfe-forms-mainNewPrecipitatingEvents2\",\n          },\n          {\n            yHYkho3rRNV:\n              \"e0d4e006-85b5-41cb-8a21-e013b1978b8b-rfe-forms-mainNewPrecipitatingEvents3\",\n          },\n          {\n            kjuVu7bQnEj:\n              \"c1a3ed2d-6d9a-453d-9d93-749164a76413-rfe-forms-mainCategoryOfPrecipitatingEvent\",\n          },\n          {\n            PrY9ZXhHbhd:\n              \"8ef009b1-396c-4dda-a816-b688ed66e450-rfe-forms-timeFromTheMainEvent\",\n          },\n          {\n            kcV89u3gFad: \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiS\",\n          },\n          {\n            kcV89u3gFad: \"f94de17e-9771-4711-aabb-c5bb0c022be2-rfe-forms-cgiI\",\n          },\n          {\n            Zu6s2NWggMt:\n              \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          },\n        ],\n        programStage: \"eUCtSH80vMe\",\n      },\n      \"91f52388-7066-3263-b964-5e63b4f4e51d\": {\n        formName: \"F33-MHPSS Closure\",\n        syncType: \"latest\",\n        programId: \"w9MSPn5oSqp\",\n        dataValueMap: {\n          ELQvFZjc8dL:\n            \"0a0c70d2-2ba5-4cb3-941f-b4a9a4a7ec6d-rfe-forms-specifyHealthFacility\",\n          F3wIwerMIML:\n            \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          KgBg7yNmBfv: \"6545b874-f44d-4d18-9ab1-7a8bb21c0a15-rfe-forms-phq9\",\n          Lht8GKTAHu8:\n            \"9e861ef1-e07c-4955-9650-2ebac3138fc3-rfe-forms-typeOfClosure\",\n          QJxbUPjoIoo:\n            \"1bf47398-7786-4f3e-8cae-b84a21f53eba-rfe-forms-totalNumberOfSessions\",\n          RoBHeg55Mle:\n            \"8a9d2ace-372f-4413-a1c4-8999f55e2de2-rfe-forms-closureDate\",\n          Sk1nVubpSFa:\n            \"e08d532b-e56c-43dc-b831-af705654d2dc-rfe-forms-mainLocationOfIntervention_ifOtherSpecify\",\n          TqjvJA0GUOA:\n            \"401b2df0-e26f-4f49-9165-6e20a1b8865a-rfe-forms-mainTypeOfConsultation\",\n          XhtEvGwiYDK:\n            \"08cd4b4a-4b0b-4391-987b-b5b3d770d30f-rfe-forms-specifyMobileClinic\",\n          Xk59Xw9eyzS:\n            \"b87a93ff-a4a1-4601-b35d-1e42bfa7e194-rfe-forms-totalNumberOfBeneficiariesInFamilyConsultation\",\n          c4TiPRUQ56A: \"77f1a782-24af-40ba-bac1-b97d9a080f40-rfe-forms-cgiS\",\n          iEdamWl0wzQ: \"c64dfacd-2fb5-464d-83a9-ebb9eb8d3ab3-rfe-forms-cgiI\",\n          pQG72ee2lkl: \"90b3d09c-d296-44d2-8292-8e04377fe027-rfe-forms-mhos\",\n          pjVuvx8Xq6m:\n            \"41e68dee-a2a3-4e6c-9d96-53def5caff52-rfe-forms-specifyMsfHealthFacility\",\n          taSJ2FDYTP2:\n            \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-mainLocationOfIntervention\",\n          treBZpHPfYk:\n            \"cce4fc0b-9d64-4918-8583-2449a59aef60-rfe-forms-wasAMentalHealthCertificateProvided\",\n          vmRaiCPePwY:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-patientReferredTo_ifOtherSpecify\",\n          yf7WT2UkK7B: \"22b16c12-4487-42f4-956c-1890d1f81ac8-rfe-forms-gad7\",\n        },\n        optionSetMap: [\n          {\n            mimbbLDaZyZ:\n              \"401b2df0-e26f-4f49-9165-6e20a1b8865a-rfe-forms-mainTypeOfConsultation\",\n          },\n          {\n            zdJEZvP5dVf:\n              \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-mainLocationOfIntervention\",\n          },\n          {\n            ovpSADYY35a:\n              \"9e861ef1-e07c-4955-9650-2ebac3138fc3-rfe-forms-typeOfClosure\",\n          },\n          {\n            Zu6s2NWggMt:\n              \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          },\n          {\n            kcV89u3gFad: \"77f1a782-24af-40ba-bac1-b97d9a080f40-rfe-forms-cgiS\",\n          },\n          {\n            kcV89u3gFad: \"c64dfacd-2fb5-464d-83a9-ebb9eb8d3ab3-rfe-forms-cgiI\",\n          },\n        ],\n        programStage: \"xrCTheIzyDV\",\n      },\n      \"ae41c62a-da26-3a4b-ac75-e7df52f77ec3\": {\n        formName: \"F32-mhGAP Follow-up\",\n        syncType: \"all\",\n        programId: \"w9MSPn5oSqp\",\n        dataValueMap: {\n          AZUFlZzPN6V:\n            \"278d3d1e-c02a-4db1-8ab3-8db3b82eb9b5-rfe-forms-patientRescheduled\",\n          AiUr0KZgS9e:\n            \"dbf35880-d18e-4f15-ad9c-97b5b053e14a-rfe-forms-isThePatientTakingTheMedicationAsPrescribed\",\n          C5XtlggtVmd: \"f94de17e-9771-4711-aabb-c5bb0c022be2-rfe-forms-cgiI\",\n          CcA8pc2YqWz:\n            \"d9454e9c-6e3c-45ab-8a9a-834a9353ae11-rfe-forms-sessionNumber\",\n          EOFi7nk2vNM: \"encounter-date\",\n          G0hLyxqgcO7:\n            \"54e8c1b6-6397-4822-89a4-cf81fbc68ce9-rfe-forms-didThePatientMissTheSession\",\n          HNZHetAtowR:\n            \"d34d5e93-03d6-494e-8f4c-2d7221227162-rfe-forms-reasonForMissedAppointment\",\n          M3rgdQLmO05:\n            \"edc6f30c-4ff2-4a4f-8b90-ca4502bb97a1-rfe-forms-nextSessionDate\",\n          MDbDqs5Mwow:\n            \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-changeInDiagnosis\",\n          OBAHc3Rljln:\n            \"dc072a1a-20d8-4512-9e57-3585a07cb074-rfe-forms-detailsIfNeeded\",\n          TQoTxyjJFQ7:\n            \"5f6e245c-83fc-421b-8d46-061ac773ae71-rfe-forms-followUpSessionRequired\",\n          TXI3rYzJhwI:\n            \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          alPaUDxtrdg:\n            \"5f3d618e-5c89-43bd-8c79-07e4e98c2f23-rfe-forms-phq9Score\",\n          frNSzbtH78y:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-patientReferredTo_ifOtherSpecify\",\n          kkG7XvFkZNs:\n            \"89e1b4f8-d4c6-491b-bc32-4d4f79a8df9d-rfe-forms-gad7Score\",\n          t4HoHWCYdvm:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-reasonForMissedAppointment_ifOtherSpecify\",\n          tXMgjzusbbt:\n            \"b2c5b6e0-66f0-4b9d-8576-b6f48e0a06df-rfe-forms-mhosScore\",\n          tloy0Bd9qDf:\n            \"d7410cd3-29be-4f8b-93d6-eb4de005db29-rfe-forms-numberOfAppointmentsMissed\",\n          yTFUtaFJ1QU: \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiS\",\n          z3dmWfX5OSX:\n            \"6d3876be-0a27-466d-ad58-92edcc8c31fb-rfe-forms-referralDone\",\n        },\n        optionSetMap: [\n          {\n            WlbDv2LELNz:\n              \"d34d5e93-03d6-494e-8f4c-2d7221227162-rfe-forms-reasonForMissedAppointment\",\n          },\n          {\n            kcV89u3gFad: \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiS\",\n          },\n          {\n            kcV89u3gFad: \"f94de17e-9771-4711-aabb-c5bb0c022be2-rfe-forms-cgiI\",\n          },\n          {\n            flvpQl6fVkp:\n              \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-changeInDiagnosis\",\n          },\n          {\n            YMqd6cittuS:\n              \"5f6e245c-83fc-421b-8d46-061ac773ae71-rfe-forms-followUpSessionRequired\",\n          },\n          {\n            HlTA658wGdn:\n              \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          },\n        ],\n        programStage: \"hjHwYnSfJnX\",\n      },\n      \"d94898ae-6414-3ec5-8225-febf06eb1833\": {\n        formName: \"F29-MHPSS Baseline\",\n        syncType: \"latest\",\n        programId: \"w9MSPn5oSqp\",\n        dataValueMap: {\n          Aggyv8LqQbn:\n            \"8ef009b1-396c-4dda-a816-b688ed66e450-rfe-forms-timeFromTheMainEvent\",\n          AuDPJg6gZE7:\n            \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-locationOfIntervention\",\n          CLGnlnFqqnk:\n            \"0a0c70d2-2ba5-4cb3-941f-b4a9a4a7ec6d-rfe-forms-specifyHealthFacility\",\n          CUdI1BJ5W8G:\n            \"92a92f62-3ff6-4944-9ea9-a7af23949bad-rfe-forms-currentSymptomsOrComplaints3\",\n          CXS4qAJH2qD: \"encounter-date\",\n          DMaLm9u4GCq:\n            \"b87a93ff-a4a1-4601-b35d-1e42bfa7e194-rfe-forms-totalNumberOfBeneficiariesInFamilyConsultation\",\n          DlqJSA5VApl:\n            \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          EJwuSLCkYrh:\n            \"edc6f30c-4ff2-4a4f-8b90-ca4502bb97a1-rfe-forms-nextSessionDate\",\n          EkZqB9eL0W5:\n            \"3dceead1-70d5-4030-b8f3-bda3938af08d-rfe-forms-doesThePatientHaveACurrentSuicidalRisk\",\n          FLIlRjAwn4G:\n            \"e0d4e006-85b5-41cb-8a21-e013b1978b8b-rfe-forms-mainPastOrPrecipitatingEvents3\",\n          JUabDHhT1wJ:\n            \"c1a3ed2d-6d9a-453d-9d93-749164a76413-rfe-forms-mainCategoryOfPrecipitatingEvent\",\n          KSBMR1BDGwx:\n            \"1a8bf24f-4f36-4971-aad9-ae77f3525738-rfe-forms-typeOfConsultation\",\n          KeyiEPc4pII:\n            \"82d1fcad-d1be-4ea2-a66c-c872fb4825b4-rfe-forms-typeOfIntervention\",\n          KjgDauY9v4J:\n            \"e08d532b-e56c-43dc-b831-af705654d2dc-rfe-forms-locationOfIntervention_ifOtherSpecify\",\n          LVtCRRo22k3:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-specificReferralSource_ifOtherSpecify\",\n          METV1exWuZg:\n            \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-concomitantDiagnosis\",\n          MF3RML0HLbP:\n            \"b2c5b6e0-66f0-4b9d-8576-b6f48e0a06df-rfe-forms-mhosScore\",\n          PCGI7EnvCQS:\n            \"45b39cbf-0fb2-4682-8544-8aaf3e07a744-rfe-forms-currentSymptomsOrComplaints1\",\n          QpSVAp9m5uC:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-concomitantDiagnosis_ifOtherSpecify\",\n          RiiH9A53rvG:\n            \"6d3876be-0a27-466d-ad58-92edcc8c31fb-rfe-forms-referralDone\",\n          RnbiVrrSFdm:\n            \"ee1b7973-e931-494e-a9cb-22b814b4d8ed-rfe-forms-currentSymptomsOrComplaints2\",\n          RqsvaPH9vHt:\n            \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-mainDiagnosis\",\n          SsQqwDBGxjh:\n            \"54a9b20e-bce5-4d4a-8c9c-e0248a182586-rfe-forms-mainPastOrPrecipitatingEvents2\",\n          TWuCY5r2wx7:\n            \"ccc4f06c-b76a-440d-9b7e-c48ba2c4a0ab-rfe-forms-doesThePatientPresentARiskOfHarmingOthers\",\n          W7cPAi8iXLZ:\n            \"819f79e7-b9af-4afd-85d4-2ab677223113-rfe-forms-mainDiagnosisIfOtherSpecify\",\n          WpRshJ2dmPl:\n            \"89e1b4f8-d4c6-491b-bc32-4d4f79a8df9d-rfe-forms-gad7Score\",\n          YeaUNruqmca:\n            \"08cd4b4a-4b0b-4391-987b-b5b3d770d30f-rfe-forms-specifyMobileClinic\",\n          YfcNA5bvkxT:\n            \"9a8204ca-d908-4157-9285-7c970dbb5287-rfe-forms-mainSyndrome\",\n          f64XCwzJW02:\n            \"41e68dee-a2a3-4e6c-9d96-53def5caff52-rfe-forms-specifyMsfHealthFacility\",\n          iistu8GbCdC:\n            \"fb359236-733b-42e0-bec3-e7bb0785985f-rfe-forms-knowledgeOfTheService\",\n          kdGseg7UE9M:\n            \"25ab1831-52a1-46ea-b4f5-a82b50efb396-rfe-forms-dateOfTheMainDiagnosis\",\n          m8qis4iUOTo:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-pastOrPrecipitatingEvents_ifOtherSpecify\",\n          mDbXCwybfxo:\n            \"6d722abd-9bd8-4c32-88d3-5a0b5f0d4aa0-rfe-forms-mainReferralSource\",\n          pj5hIE6iyAR:\n            \"e08d532b-e56c-43dc-b831-af705654d2dc-rfe-forms-currentSymptomsOrComplaints_ifOtherSpecify\",\n          qacGXlyyQOS:\n            \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiSScoreHowMentallyIllIsThePatientAtThisTime\",\n          qfYPXP76j8g:\n            \"c3c86c1b-07be-4506-ab25-8f35f4389b19-rfe-forms-specificReferralSource\",\n          rSIazMFEBjD:\n            \"4dae5b12-070f-4153-b1ca-fbec906106e1-rfe-forms-admissionType\",\n          u4OFYTJ81rP:\n            \"5f3d618e-5c89-43bd-8c79-07e4e98c2f23-rfe-forms-phq9Score\",\n          v0qFX0qv1tX:\n            \"d5e3d927-f7ce-4fdd-ac4e-6ad0b510b608-rfe-forms-mainPastOrPrecipitatingEvents1\",\n          vC3bg9NwJ78:\n            \"3edcfddb-7988-4ce5-97a0-d4c46b267a04-rfe-forms-durationOfTheMainSymptom\",\n          xz4g0Dc9iQi:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-patientReferredTo_ifOtherSpecify\",\n          yCwuZ0htrlH:\n            \"5f6e245c-83fc-421b-8d46-061ac773ae71-rfe-forms-followUpSessionRequired\",\n          ztw3FbScyEK:\n            \"ce98fb42-1576-4168-892f-6d316ae22495-rfe-forms-permissionToBeContactedInCaseOfNeed\",\n        },\n        optionSetMap: [\n          {\n            wTGMuMQQwmQ:\n              \"4dae5b12-070f-4153-b1ca-fbec906106e1-rfe-forms-admissionType\",\n          },\n          {\n            F350PsrQw3Z:\n              \"82d1fcad-d1be-4ea2-a66c-c872fb4825b4-rfe-forms-typeOfIntervention\",\n          },\n          {\n            O72UnPJGuKC:\n              \"1a8bf24f-4f36-4971-aad9-ae77f3525738-rfe-forms-typeOfConsultation\",\n          },\n          {\n            zdJEZvP5dVf:\n              \"82978311-bef9-46f9-9a9a-cc62254b00a6-rfe-forms-locationOfIntervention\",\n          },\n          {\n            R2urD1F9b7J:\n              \"ce98fb42-1576-4168-892f-6d316ae22495-rfe-forms-permissionToBeContactedInCaseOfNeed\",\n          },\n          {\n            uev9jdVIPiA:\n              \"fb359236-733b-42e0-bec3-e7bb0785985f-rfe-forms-knowledgeOfTheService\",\n          },\n          {\n            ecwWFbc3j1s:\n              \"6d722abd-9bd8-4c32-88d3-5a0b5f0d4aa0-rfe-forms-mainReferralSource\",\n          },\n          {\n            xZNOeqJ7DuL:\n              \"c3c86c1b-07be-4506-ab25-8f35f4389b19-rfe-forms-specificReferralSource\",\n          },\n          {\n            MRNqXzrPl0H:\n              \"45b39cbf-0fb2-4682-8544-8aaf3e07a744-rfe-forms-currentSymptomsOrComplaints1\",\n          },\n          {\n            MRNqXzrPl0H:\n              \"ee1b7973-e931-494e-a9cb-22b814b4d8ed-rfe-forms-currentSymptomsOrComplaints2\",\n          },\n          {\n            MRNqXzrPl0H:\n              \"92a92f62-3ff6-4944-9ea9-a7af23949bad-rfe-forms-currentSymptomsOrComplaints3\",\n          },\n          {\n            ErGIyIc33Sw:\n              \"9a8204ca-d908-4157-9285-7c970dbb5287-rfe-forms-mainSyndrome\",\n          },\n          {\n            CzXDqkzN6Nq:\n              \"3edcfddb-7988-4ce5-97a0-d4c46b267a04-rfe-forms-durationOfTheMainSymptom\",\n          },\n          {\n            kcV89u3gFad:\n              \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiSScoreHowMentallyIllIsThePatientAtThisTime\",\n          },\n          {\n            flvpQl6fVkp:\n              \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-mainDiagnosis\",\n          },\n          {\n            flvpQl6fVkp:\n              \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-concomitantDiagnosis\",\n          },\n          {\n            yHYkho3rRNV:\n              \"d5e3d927-f7ce-4fdd-ac4e-6ad0b510b608-rfe-forms-mainPastOrPrecipitatingEvents1\",\n          },\n          {\n            yHYkho3rRNV:\n              \"54a9b20e-bce5-4d4a-8c9c-e0248a182586-rfe-forms-mainPastOrPrecipitatingEvents2\",\n          },\n          {\n            yHYkho3rRNV:\n              \"e0d4e006-85b5-41cb-8a21-e013b1978b8b-rfe-forms-mainPastOrPrecipitatingEvents3\",\n          },\n          {\n            kjuVu7bQnEj:\n              \"c1a3ed2d-6d9a-453d-9d93-749164a76413-rfe-forms-mainCategoryOfPrecipitatingEvent\",\n          },\n          {\n            PrY9ZXhHbhd:\n              \"8ef009b1-396c-4dda-a816-b688ed66e450-rfe-forms-timeFromTheMainEvent\",\n          },\n          {\n            Zu6s2NWggMt:\n              \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          },\n        ],\n        programStage: \"MdTtRixaC1B\",\n      },\n      \"d9a26c5d-8517-39ac-a14c-dbd1a54d14f6\": {\n        formName: \"F31-mhGAP Baseline\",\n        syncType: \"latest\",\n        programId: \"w9MSPn5oSqp\",\n        dataValueMap: {\n          Ajaeo8ZkDur:\n            \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          BNG4w26EI2s:\n            \"6d3876be-0a27-466d-ad58-92edcc8c31fb-rfe-forms-referralDone\",\n          DCEJHFQvPWa:\n            \"5f3d618e-5c89-43bd-8c79-07e4e98c2f23-rfe-forms-phq9Score\",\n          G8mgHN9Jm2c:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-patientReferredTo_ifOtherSpecify\",\n          I7phgLmRWQq: \"encounter-date\",\n          METV1exWuZg:\n            \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-concomitantDiagnosis\",\n          MF3RML0HLbP:\n            \"b2c5b6e0-66f0-4b9d-8576-b6f48e0a06df-rfe-forms-mhosScore\",\n          QpSVAp9m5uC:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-concomitantDiagnosis_ifOtherSpecify\",\n          R3g94vJ2yFR:\n            \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-mainDiagnosis\",\n          SOR54p6CGTx:\n            \"5f6e245c-83fc-421b-8d46-061ac773ae71-rfe-forms-followUpSessionRequired\",\n          VnXwFYqHNqM:\n            \"15748787-7372-4022-b5d4-81ff8d6887ca-rfe-forms-olderAdult\",\n          WpRshJ2dmPl:\n            \"89e1b4f8-d4c6-491b-bc32-4d4f79a8df9d-rfe-forms-gad7Score\",\n          Yt4NhxZU5Vo:\n            \"790b41ce-e1e7-11e8-b02f-0242ac130002-rfe-forms-mainDiagnosis_ifOtherSpecify\",\n          hMcCdEkhhjZ:\n            \"f6cefc80-506a-44b0-ab5f-d6f5908cf7a5-rfe-forms-childOrAdolescent\",\n          kdGseg7UE9M:\n            \"25ab1831-52a1-46ea-b4f5-a82b50efb396-rfe-forms-dateOfTheMainDiagnosis\",\n          pHoZYTrR7N0:\n            \"2be92591-da1b-4418-ba49-43b3fc0e4ce5-rfe-forms-pregnantOrBreastfeeding\",\n          pPy6lKptm1T:\n            \"3dceead1-70d5-4030-b8f3-bda3938af08d-rfe-forms-doesThePatientHaveACurrentSuicidalRisk\",\n          qCRNMAevGF9:\n            \"edc6f30c-4ff2-4a4f-8b90-ca4502bb97a1-rfe-forms-nextSessionDate\",\n          qacGXlyyQOS: \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiS\",\n          rSIazMFEBjD:\n            \"4dae5b12-070f-4153-b1ca-fbec906106e1-rfe-forms-admissionType\",\n          vLfsElaDxZf:\n            \"af23b916-3e95-4bd4-8804-a4b1649ff365-rfe-forms-historyOfSelfHarmOrSuicide\",\n          zwMoLjEgFC3:\n            \"c3c86c1b-07be-4506-ab25-8f35f4389b19-rfe-forms-referralSource\",\n        },\n        optionSetMap: [\n          {\n            pNEmG0RefTw:\n              \"c3c86c1b-07be-4506-ab25-8f35f4389b19-rfe-forms-referralSource\",\n          },\n          {\n            wTGMuMQQwmQ:\n              \"4dae5b12-070f-4153-b1ca-fbec906106e1-rfe-forms-admissionType\",\n          },\n          {\n            kcV89u3gFad: \"a1a75011-0fef-460a-b666-dda2d171f39b-rfe-forms-cgiS\",\n          },\n          {\n            flvpQl6fVkp:\n              \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-mainDiagnosis\",\n          },\n          {\n            flvpQl6fVkp:\n              \"22809b19-54ca-4d88-8d26-9577637c184e-rfe-forms-concomitantDiagnosis\",\n          },\n          {\n            YMqd6cittuS:\n              \"5f6e245c-83fc-421b-8d46-061ac773ae71-rfe-forms-followUpSessionRequired\",\n          },\n          {\n            HlTA658wGdn:\n              \"8fb3bb7d-c935-4b57-8444-1b953470e109-rfe-forms-patientReferredTo\",\n          },\n        ],\n        programStage: \"EZJ9FsNau7Q\",\n      },\n    },\n    sourceFile: \"LIME EMR - Iraq Metadata - Release 1 -v2025-09-25.xlsx\",\n    identifiers: [\n      {\n        type: \"DHIS2_PATIENT_NUMBER\",\n        description: \"DHIS2 Patient Number\",\n        \"example value\": \"ER-IQ2024-1234\",\n        \"dhis2 attribute id\": \"P4wdYGkldeG\",\n        \"omrs identifierType\": \"8d79403a-c2cc-11de-8d13-0010c6dffd0f\",\n      },\n      {\n        type: \"OPENMRS_AUTO_ID\",\n        description: \"OpenMRS Patient Number\",\n        \"example value\": \"IQ146-24-000-027\",\n        \"dhis2 attribute id\": \"ZBoxuExmxcZ\",\n        \"omrs identifierType\": \"05a29f94-c0ed-11e2-94be-8c13b969e334\",\n      },\n      { type: \"ORG_UNIT\", \"dhis2 attribute id\": \"OPjuJMZFLop\" },\n      { type: \"PROGRAM\", \"dhis2 attribute id\": \"w9MSPn5oSqp\" },\n    ],\n    fileDateModified: \"2025-09-30T10:16:38Z\",\n    nationalityMap: {\n      chad: \"9e41e71c-f5d5-456c-a6f9-2129b8055bfc\",\n      cuba: \"147c2434-5d7e-420c-8053-ba623301f3f5\",\n      guam: \"51fa502b-98a3-4c42-b5fd-7b4d64489bb9\",\n      iran: \"b422270e-d8af-4a32-b523-742545a17a3f\",\n      iraq: \"03aa7d6e-7656-48e4-8dc0-5e27706722c0\",\n      laos: \"dfb01b39-c224-459e-b045-dd9461b9a1e5\",\n      mali: \"3e844a47-526a-46f9-afea-1af9ff8690aa\",\n      oman: \"9b0af037-99d1-43b8-ac06-82137ec4b06d\",\n      peru: \"e74fa87f-8469-46b0-975f-6cb37c394564\",\n      togo: \"6a583e64-869d-477d-a1c1-746320d45fc4\",\n      aruba: \"f3f1cba1-7c1e-4234-86a2-f27bb5964fee\",\n      benin: \"cf863e31-bb38-48ed-90dd-f3dedcac304c\",\n      chile: \"05333883-44e9-4f57-836a-041391803007\",\n      china: \"15016874-3e20-484a-baa8-9b94e1a3d358\",\n      egypt: \"cc7343f8-9243-4d09-b378-58363850d624\",\n      gabon: \"9f46ae06-114a-47fa-8f8d-e9749f04da25\",\n      ghana: \"2eb4ff46-d908-4148-9b0d-40ccfc1a655a\",\n      haiti: \"f76f7dcb-f82e-4257-a627-1685ff3f3586\",\n      india: \"378d0107-eb43-485d-930c-0704b4e5aa11\",\n      kenya: \"ad351a33-8846-4cad-8195-b07b6041d4a5\",\n      libya: \"600c6af4-b767-423c-b942-7f06ca467258\",\n      nauru: \"3386fe63-2158-4040-a502-9f65fd2079d3\",\n      nepal: \"fb01b01a-6775-423c-8012-7d43f587cb6c\",\n      niger: \"7561db90-a866-4443-93f4-95cac1d47e9c\",\n      other: \"790b41ce-e1e7-11e8-b02f-0242ac130002\",\n      samoa: \"e03b381b-a7f4-40eb-964f-51571dc3c48c\",\n      sudan: \"2f03a932-2b75-4e8b-9f44-0fcd83c75dc4\",\n      syria: \"1e34ee55-ef9f-4386-bae6-6995555ded75\",\n      tonga: \"d381f06d-2365-4f40-948b-cfe90d8cb532\",\n      yemen: \"6a3214e0-f94b-414c-8148-968e24386671\",\n      angola: \"8a2e5a03-8a74-41ae-9a98-2310f9ce400d\",\n      bhutan: \"d45a57c9-994f-4deb-8845-9b785860a2ec\",\n      brazil: \"353ff388-64e6-434c-b78f-ca9636390389\",\n      gambia: \"5ec7ddd7-14a5-48ec-9e7c-8896d1010655\",\n      greece: \"b75d6bcc-fadf-4141-8d0f-2463154b89f7\",\n      guinea: \"eeaff39c-8afd-43f7-b9a0-53729f5df1d8\",\n      guyana: \"ba4dfa7e-f3cd-4e94-8ca7-6b96a93378a8\",\n      jordan: \"842f963c-f84d-4076-a8db-337295fd9b91\",\n      kuwait: \"4aee7a88-cda9-454e-9f25-4a6420270417\",\n      malawi: \"e8b5f188-6a5c-43ae-b4a5-200abb13153e\",\n      mexico: \"8381208f-01ca-4ed3-8f2c-f73ed1c316e3\",\n      panama: \"1ef5a828-9d0d-4336-91ab-880d5dc0151c\",\n      rwanda: \"6bc925a1-7699-496a-85b0-c290699381db\",\n      serbia: \"d2e69cef-3bff-4220-ba91-a6a678fb606b\",\n      turkey: \"7429c779-1d3a-4aec-8256-d0b1637e1bd1\",\n      uganda: \"be3d11d3-446d-440c-a582-d01c7cbb0eda\",\n      zambia: \"3ec0432d-ea37-4159-a658-29d6f07fe21a\",\n      albania: \"db21f4f9-faf2-4358-8297-0ae76627b3b8\",\n      algeria: \"5f6c017f-074c-46b3-92d0-d055e2094366\",\n      armenia: \"39f1652a-f2b7-4b65-a7e1-7097ac6cdef0\",\n      belarus: \"664baba4-c552-47b9-97c0-ff67dafd27d6\",\n      bolivia: \"d8800d10-862b-42f1-8e22-cac1ce1bbcae\",\n      burundi: \"8a2ed0db-eaad-44bc-bf06-5cb1b2a3db0b\",\n      comoros: \"9d8738c8-40c2-4c66-aabb-ef176a20ffe8\",\n      ecuador: \"f9810f9a-78a7-42a2-99e6-19c629642386\",\n      eritrea: \"c61f03c2-0d1f-444f-a974-0a61063aff71\",\n      georgia: \"bc71788f-db69-4b6f-8d1c-57a74395bdd2\",\n      lebanon: \"7de78f22-f53e-48d2-923f-ae1e4d814f46\",\n      lesotho: \"b35b29c5-9bb7-4b40-ad33-29eecd28a9e6\",\n      liberia: \"a5fd61b4-fd27-433d-8428-7e88a7f27921\",\n      mayotte: \"1af148fe-2698-4b89-bf7f-87e5c48b6848\",\n      moldova: \"f0e9c8b5-69b5-48df-8cb9-2d089ba04e46\",\n      morocco: \"ef467a17-91e8-4124-a136-7ed8ff7c7d15\",\n      myanmar: \"e81ba700-f9fc-4ed0-b248-578a25717cdb\",\n      namibia: \"0cb123dc-8810-4840-b6ab-6a527c5a79ef\",\n      nigeria: \"4134651a-7f53-45fb-8bc6-7fed9cf36f51\",\n      reunion: \"1dae4b2d-50c9-4bf1-b25a-7063600a5e74\",\n      romania: \"457e745e-ae97-463d-95a9-8d5689d3ca2b\",\n      senegal: \"ad948f1b-0733-4f8d-b049-d64289b43a10\",\n      somalia: \"99c8dccc-4dfa-4d30-86be-42a309ab431f\",\n      tunisia: \"56be7864-fde6-4db3-8fa5-b9dd42cd9c53\",\n      ukraine: \"38c99c8d-2b93-4848-a537-b1865a260bb2\",\n      unknown: \"ccb4c50d-13e0-46a2-bd5e-51c86d042ad8\",\n      uruguay: \"c2e45baf-748b-4d7b-a391-ed6b802b6f94\",\n      vietnam: \"49509c5f-e533-48a8-bf06-86935e3376b2\",\n      anguilla: \"c911af8a-171c-4ee9-b1ff-934373e8a819\",\n      botswana: \"1304a0de-5b70-4d36-a873-e72a82963316\",\n      bulgaria: \"91c85a62-2b02-483a-aefd-e29d368565fe\",\n      cambodia: \"4fd14df8-8279-4dfa-bdd3-e1ab26bc0264\",\n      cameroon: \"873552ac-9850-4cc1-ae09-17eb0fccf405\",\n      colombia: \"a008dff8-ce96-4662-bf8a-372e43d424f0\",\n      djibouti: \"cf5b334f-1c0f-41fc-ab54-53ff1e942830\",\n      dominica: \"f70e51e5-b76c-4c38-9bf2-ef8e1f308ce1\",\n      ethiopia: \"7478d375-014e-410e-a355-090143e88f5b\",\n      honduras: \"cdd1336e-495b-4868-aace-57a84442d6fd\",\n      malaysia: \"3facca11-fbaa-4c40-8fac-4751d45c3f1b\",\n      mongolia: \"9f341cb1-dcb5-4f6c-bd21-b57db01b4193\",\n      pakistan: \"f45d93c3-c9b0-4333-a5e6-299b7c425812\",\n      paraguay: \"d8412016-82f5-4801-a026-1bdc429850b7\",\n      suriname: \"c65d3329-98d4-4dd7-89d3-141b70d00eb2\",\n      tanzania: \"050a8eb1-0d77-4f65-a2da-776a13bcd2a4\",\n      thailand: \"289ac5bd-6434-4837-86bf-b54d22970ac8\",\n      zimbabwe: \"ce1b0d8d-0a2d-4f93-a6ed-64aca2fd0f45\",\n      argentina: \"b83d24e8-34d8-4920-83c0-8ba014467ff4\",\n      drc_congo: \"8f6d3d2a-e09f-473b-99c9-e539f97ceab6\",\n      guatemala: \"3725a4d2-b28f-466b-905a-bafeaeb75855\",\n      indonesia: \"1cbe17e6-adc2-4680-bee0-54d94af75ebf\",\n      macedonia: \"5837cc40-9ab5-4088-91c8-ca6e4b57e903\",\n      mauritius: \"17ced083-eb2a-4046-a713-26cabc7af95d\",\n      nicaragua: \"f6a9521c-596b-49f9-b914-67138e8c17e6\",\n      palestina: \"e2a19948-49aa-44c0-98ef-67ae1160ef43\",\n      sri_lanka: \"b0031c01-d242-4410-b98b-cc1511590b85\",\n      swaziland: \"06a2703b-af17-4e44-83f5-6cc9a8a75320\",\n      venezuela: \"557cea4a-0049-4b7a-b373-ed63f294a2a0\",\n      azerbaijan: \"29750013-0e35-47ca-8f77-9192a923fb07\",\n      bangladesh: \"a99de53c-ce76-4b1e-91b2-461094baf79e\",\n      cape_verde: \"cfbc220a-1d6c-4469-bb6d-a8e3deb4f7e7\",\n      costa_rica: \"fb52f8c9-40ec-4dc4-92a4-d465612de2ff\",\n      east_timor: \"854f2f66-40e1-4a6a-9dee-09c832a52289\",\n      kazakhstan: \"6f6d0e78-2c81-411d-8d13-367e250dc110\",\n      kyrgyzstan: \"ace3b851-042b-46a6-8fea-68aae042d614\",\n      madagascar: \"3782bf3c-380e-4b60-b21a-38199073f112\",\n      martinique: \"051ce04e-05e8-4430-8b75-3e499bbffbc8\",\n      mauritania: \"8acb006b-8596-4a98-8177-acb4cb575956\",\n      mozambique: \"0916133b-4d93-4d60-9c20-e7ee3936f391\",\n      tajikistan: \"34836c60-5449-48d6-b3c9-c0b3361b9f2c\",\n      uzbekistan: \"60512350-d79b-41aa-aff0-1b28ca4aa5f1\",\n      afghanistan: \"84066564-253e-43d8-b141-76730cffa878\",\n      el_salvador: \"9a34935e-5a8a-45be-8ccd-cb23192e420f\",\n      north_korea: \"4d3079e4-8568-48e6-9342-665896875a38\",\n      philippines: \"bdbd5c9f-1f28-4f4d-a254-4a84f8bb2c8f\",\n      puerto_rico: \"39fca1d0-d2e7-4b13-82bd-626fbec71252\",\n      south_korea: \"0603d6b9-334f-4443-ab60-7c5d457b95fc\",\n      south_sudan: \"f113e24e-2ea9-49a2-9b28-59241b9adb21\",\n      switzerland: \"dcdcdc70-a006-4b0a-bac2-7de89b022b65\",\n      burkina_faso: \"6c90c1ae-17a4-4e94-a267-4fba4c94efd8\",\n      cote_divoire: \"513cb36a-3f67-46ea-a789-fcdaca0e26f5\",\n      saudi_arabia: \"fdf495a4-e60c-46f7-a8a2-61a216849086\",\n      sierra_leone: \"ffba9caf-b6aa-4078-845e-578f7a7fd566\",\n      south_africa: \"75882d62-1c55-480d-b411-8ca40c3307df\",\n      turkmenistan: \"3ef17df5-299b-4385-9ea6-572df4b6f9ca\",\n      guinea_bissau: \"14e90203-9197-42ea-9222-acafd2fd6984\",\n      new_caledonia: \"e67c072b-7707-491f-8c2e-13c914216b61\",\n      western_sahara: \"4086dfd2-f4f5-4107-93e8-07bee235af8f\",\n      papua_new_guinea: \"e1e6b451-d7fe-4954-b225-99b2de82a4c0\",\n      equatorial_guinea: \"7e591605-d723-4398-982a-8737af63a2dc\",\n      republic_of_congo: \"5db9afa5-b57e-4f45-8b1c-af766f14fc58\",\n      dominican_republic: \"ce72fc9b-619b-4c32-b865-600e888ad814\",\n      sao_tome_and_principe: \"f66bbb42-684f-42d7-bfcd-95d586eb7dc9\",\n      bosnia_and_herzegovina: \"05d8f4ef-45eb-463d-b2f3-8a5a613ee6b9\",\n      british_virgin_islands: \"b02c6d20-83a2-4947-8a7d-91d1f9c4d8a2\",\n      central_african_republic: \"61a4c4a4-25c2-4459-a874-ec1d24f8323a\",\n    },\n  };\n\n  return {\n    ...data,\n    cursor,\n    lastRunDateTime,\n  };\n});\nfn(({ identifiers, formMaps, ...state }) => {\n  state.genderOptions = {\n    male: \"M\",\n    female: \"F\",\n    unknown: \"U\",\n    transgender_female: \"O\",\n    transgender_male: \"O\",\n    prefer_not_to_answer: \"O\",\n    gender_variant_non_conforming: \"O\",\n  };\n  state.orgUnit = identifiers.find((i) => i.type === \"ORG_UNIT\")?.[\n    \"dhis2 attribute id\"\n  ];\n  state.program = identifiers.find((i) => i.type === \"PROGRAM\")?.[\n    \"dhis2 attribute id\"\n  ];\n\n  state.patientAttributes = Object.entries(formMaps.patient.dataValueMap)\n    .filter(\n      ([key]) =>\n        ![\"qptKDiv9uPl\", \"fa7uwpCKIwa\", \"Jt9BhFZkvP2\", \"WDp4nVor9Z7\"].includes(\n          key\n        )\n    )\n    .reduce((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n\n  state.dhis2PatientNumber = identifiers.find(\n    (i) => i.type === \"DHIS2_PATIENT_NUMBER\"\n  )?.[\"omrs identifierType\"]; //DHIS2 ID or DHIS2 Patient Number\n\n  state.dhis2PatientNumberAttributeId = identifiers.find(\n    (i) => i.type === \"DHIS2_PATIENT_NUMBER\"\n  )?.[\"dhis2 attribute id\"]; //DHIS2 ID or DHIS2 Patient Number\n\n  state.openmrsAutoId = identifiers.find((i) => i.type === \"OPENMRS_AUTO_ID\")?.[\n    \"omrs identifierType\"\n  ]; //MSF ID or OpenMRS Patient Number\n\n  state.openmrsAutoIdAttributeId = identifiers.find(\n    (i) => i.type === \"OPENMRS_AUTO_ID\"\n  )?.[\"dhis2 attribute id\"]; //MSF ID or OpenMRS Patient Number\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-http@6.5.1",
          "project_credential_id": null
        },
        "Get-Teis-and-Locations": {
          "id": "d90e68f0-a919-44d3-8e7a-3fceca4cf387",
          "name": "Get Teis and Locations",
          "body": "const findDuplicatePatient = (teis) => {\n  const seen = new Map();\n  const duplicates = new Set();\n\n  teis.forEach((tei) => {\n    const patientNumber = tei.attributes.find(\n      (attr) => attr.code === \"patient_number\"\n    )?.value;\n\n    if (seen.get(patientNumber)) {\n      duplicates.add(patientNumber);\n    } else {\n      seen.set(patientNumber, tei);\n    }\n  });\n\n  return duplicates;\n};\n// Get teis that are \"active\" in the target program\nget(\"tracker/trackedEntities\", {\n  orgUnit: $.orgUnit, //'OPjuJMZFLop',\n  program: $.program, //'w9MSPn5oSqp',\n  programStatus: \"ACTIVE\",\n  updatedAfter: $.cursor,\n  skipPaging: true,\n});\n\nfn((state) => {\n  console.log(\"# of TEIs found before filter ::\", state.data.instances.length);\n  const uniqueTeis = [];\n  const duplicatePatients = [];\n  const missingPatientNumber = [];\n\n  const filteredTeis = state.data.instances.filter(\n    (tei) => tei.updatedAt >= state.cursor\n  );\n\n  console.log(\"Filtered TEIs ::\", filteredTeis.length);\n  const duplicateIds = findDuplicatePatient(filteredTeis);\n\n  filteredTeis.forEach((tei) => {\n    const patientNumber = tei.attributes.find(\n      (attr) => attr.code === \"patient_number\"\n    )?.value;\n\n    const patientUid = tei.attributes.find(\n      (attr) => attr.attribute === \"AYbfTPYMNJH\" //filtering patients that have OMRS-id\n    )?.value;\n    if (patientUid) {\n      console.log(\n        `Skipping TEI:: ${tei.trackedEntity}. Found existing patient uid.`\n      );\n      return;\n    }\n    if (!patientNumber) {\n      missingPatientNumber.push(tei);\n    } else if (duplicateIds.has(patientNumber)) {\n      duplicatePatients.push(tei);\n    } else {\n      uniqueTeis.push(tei);\n    }\n  });\n\n  console.log(\"# of Unique TEIs to migrate to OMRS ::\", uniqueTeis.length);\n  console.log(\"# Duplicate Patients found::\", duplicatePatients.length);\n\n  // return { uniqueTeis, duplicatePatients, filteredTeis, missingPatientNumber };\n  return {\n    ...state,\n    data: {},\n    references: [],\n    uniqueTeis,\n    duplicatePatients,\n    missingPatientNumber,\n  };\n});\n\nget(\"optionGroups/kdef7pUey9f\", {\n  fields: \"id,displayName,options[id,displayName,code]\",\n});\n\nfn(({ data, ...state }) => {\n  state.locations = data;\n  return state;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Patients": {
          "id": "e62457f2-700a-4ac6-8da1-5b32409c0e58",
          "name": "Create Patients",
          "body": "//Define gender options and prepare newPatientUuid and identifiers\nfn((state) => {\n  const { uniqueTeis } = state;\n  console.log(\"# of TEIs to send to OpenMRS: \", uniqueTeis.length);\n  return state;\n});\n\n//First we generate a unique OpenMRS ID for each patient\neach(\n  $.uniqueTeis,\n  post(\n    \"idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier\"\n  ).then((state) => {\n    state.identifiers ??= [];\n    state.identifiers.push(state.data.identifier);\n    return state;\n  })\n);\n\n// Then we map uniqueTeis to openMRS data model\nfn((state) => {\n  const {\n    uniqueTeis,\n    nationalityMap,\n    genderOptions,\n    identifiers,\n    statusMap,\n    locations,\n  } = state;\n\n  const getValueForCode = (attributes, code) => {\n    const result = attributes.find((attribute) => attribute.code === code);\n    return result ? result.value : undefined;\n  };\n\n  const calculateDOB = (age) => {\n    if (!age) return age;\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const birthYear = currentYear - age;\n\n    const birthday = new Date(\n      birthYear,\n      currentDate.getMonth(),\n      currentDate.getDay()\n    );\n\n    return birthday.toISOString().replace(/\\.\\d+Z$/, \"+0000\");\n  };\n\n  state.patients = uniqueTeis.map((d, i) => {\n    const patientNumber =\n      getValueForCode(d.attributes, \"patient_number\") || d.trackedEntity; // Add random number for testing + Math.random()\n\n    const lonlat = d.attributes.find(\n      (a) => a.attribute === \"rBtrjV1Mqkz\"\n    )?.value;\n    const location = lonlat\n      ? locations.options.find((o) => o.code === lonlat)?.displayName\n      : undefined;\n\n    let countyDistrict, cityVillage;\n\n    if (location) {\n      const match = location.match(/^(.*?)\\s*\\((.*?)\\)/);\n      if (match) {\n        [, countyDistrict, cityVillage] = match;\n        cityVillage = cityVillage.split(\"-\")[0].trim(); // Remove country code and trim\n      }\n    }\n\n    const attributes = d.attributes\n      .filter((a) => a.attribute in state.patientAttributes)\n      .map((a) => {\n        const attributeType = state.patientAttributes[a.attribute];\n\n        if (a.displayName === \"Nationality\") {\n          return {\n            attributeType,\n            value: nationalityMap[a.value],\n          };\n        }\n        if (a.displayName.includes(\" status\")) {\n          return {\n            attributeType,\n            value: statusMap[a.value],\n          };\n        }\n\n        return {\n          attributeType,\n          value: a.value,\n        };\n      })\n      .filter(Boolean);\n\n    return {\n      patientNumber,\n      person: {\n        age: getValueForCode(d.attributes, \"age\"),\n        gender: genderOptions[getValueForCode(d.attributes, \"sex\")] ?? \"U\",\n        birthdate:\n          d.attributes.find((a) => a.attribute === \"WDp4nVor9Z7\")?.value ??\n          calculateDOB(getValueForCode(d.attributes, \"age\")),\n        // d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ?\n        // calculateDOB(getValueForCode(d.attributes, 'age')) : '1900-01-01',\n        birthdateEstimated: d.attributes.find(\n          (a) => a.attribute === \"WDp4nVor9Z7\"\n        )\n          ? true\n          : false,\n        names: [\n          {\n            familyName:\n              d.attributes.find((a) => a.attribute === \"fa7uwpCKIwa\")?.value ??\n              \"unknown\",\n            givenName:\n              d.attributes.find((a) => a.attribute === \"Jt9BhFZkvP2\")?.value ??\n              \"unknown\",\n          },\n        ],\n        addresses: [\n          {\n            country: \"Iraq\",\n            stateProvince: \"Ninewa\",\n            countyDistrict,\n            cityVillage,\n          },\n        ],\n        attributes,\n      },\n      identifiers: [\n        {\n          identifier: identifiers[i], //OMRS-generated identifier - see above\n          identifierType: \"05a29f94-c0ed-11e2-94be-8c13b969e334\",\n          location: \"cf6fa7d4-1f19-4c85-ac50-ff824805c51c\", //default location old:44c3efb0-2583-4c80-a79e-1f756a03c0a1\n          preferred: true,\n        },\n        {\n          uuid: d.trackedEntity,\n          identifier: patientNumber, //Patient Number from DHIS2\n          identifierType: \"8d79403a-c2cc-11de-8d13-0010c6dffd0f\", //Old Identification number\n          location: \"cf6fa7d4-1f19-4c85-ac50-ff824805c51c\", //default location\n          preferred: false, //default value for this identifiertype\n        },\n      ],\n    };\n  });\n\n  return state;\n});\n\n// Creating patients in openMRS\neach(\n  $.patients,\n  upsert(\n    \"patient\",\n    { q: $.data.patientNumber, limit: 1, startIndex: 0 },\n    (state) => {\n      const { patientNumber, ...patient } = state.data;\n      console.log(\n        \"Upserting patient record...\",\n        JSON.stringify(patient, null, 2)\n      );\n      return patient;\n    },\n    (state) => {\n      state.newPatientUuid ??= [];\n      //console.log('state.references ::', state.references)\n      state.newPatientUuid.push({\n        patient_number: state.references.at(-1)?.patientNumber,\n        omrs_patient_number: state.references\n          .at(-1)\n          ?.identifiers.find(\n            (i) => (i.identifierType = `${state.openmrsAutoId}`)\n          ),\n        uuid: state.data.uuid,\n      });\n      return state;\n    }\n  )\n);\n\n// Clean up state\nfn(({ data, references, ...state }) => state);\n",
          "adaptor": "@openfn/language-openmrs@4.2.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Update-Teis": {
          "id": "344f7e66-ab73-4b63-83cc-bdaf744fea77",
          "name": "Update Teis",
          "body": "fn(state => {\n  if (state.newPatientUuid.length === 0) {\n    console.log('No data fetched in step prior to sync.');\n  }\n\n  console.log(\n    'newPatientUuid ::',\n    JSON.stringify(state.newPatientUuid, null, 2)\n  );\n  return state;\n});\n\n// Update TEI on DHIS2\neach(\n  $.newPatientUuid,\n  upsert(\n    'trackedEntityInstances',\n    {\n      ou: $.orgUnit,\n      program: $.program,\n      filter: [`${$.dhis2PatientNumberAttributeId}:Eq:${$.data.patient_number}`],\n    },\n    state => {\n      const payload = {\n        orgUnit: state.orgUnit,\n        program: state.program,\n        trackedEntityType: 'cHlzCA2MuEF',\n        attributes: [\n          {\n            attribute: `${state.dhis2PatientNumberAttributeId}`,\n            value: `${state.data.patient_number}`,\n          }, //DHIS2 patient number to use as lookup key\n          { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n          {\n            attribute: `${state.openmrsAutoIdAttributeId}`,\n            value: `${state.data.omrs_patient_number.identifier}`,\n          }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n        ],\n      }\n\n      console.log('final payload to send to dhis2:', payload)\n      return payload; \n    }\n  )\n    // {\n    //   orgUnit: $.orgUnit,\n    //   program: $.program,\n    //   trackedEntityType: 'cHlzCA2MuEF',\n    //   attributes: [\n    //     {\n    //       attribute: `${$.dhis2PatientNumberAttributeId}`,\n    //       value: `${state.data.patient_number}`,\n    //     }, //DHIS2 patient number to use as lookup key\n    //     { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n    //     {\n    //       attribute: `${state.openmrsAutoIdAttributeId}`,\n    //       value: `${state.data.omrs_patient_number.identifier}`,\n    //     }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n    //   ],\n    // },\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Alert-Admin-of-Duplicate-TEIs": {
          "id": "92ac9327-b3ef-41d6-8d1f-d4e8eb492ed7",
          "name": "Alert Admin of Duplicate TEIs",
          "body": "fn(state => {\n  const code = 'DUPLICATE_PATIENT_NUMBERS';\n  const description = `Found ${state.duplicatePatients.length} TIEs with duplicate patient numbers`;\n  const message = `${code}: ${description}`;\n  const patientNumbers = state.duplicatePatients.map(\n    patient =>\n      patient.attributes.find(attr => attr.code === 'patient_number').value\n  );\n\n  const details = {\n    code,\n    description,\n    duplicatePatientNumbers: patientNumbers,\n  };\n  const e = new Error(message);\n  e.details = details;\n  console.error(e.details);\n  throw e;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        }
      },
      "edges": {
        "cron->Fetch-Metadata": {
          "enabled": true,
          "id": "8274f1c5-8ea1-4139-8181-9f67fdce42ef",
          "target_job_id": "a0ad2de0-3b1f-4cc3-866d-5b986f71c128",
          "source_trigger_id": "5dc79c59-befd-4755-80b7-c6d490a5092a",
          "condition_type": "always"
        },
        "Fetch-Metadata->Get-Teis-and-Locations": {
          "enabled": true,
          "id": "07f07015-8fee-4ff7-8978-ccf56ca0cdcf",
          "target_job_id": "d90e68f0-a919-44d3-8e7a-3fceca4cf387",
          "source_job_id": "a0ad2de0-3b1f-4cc3-866d-5b986f71c128",
          "condition_type": "on_job_success",
          "condition_expression": "state.trackedEntityInstances.length > 0\n"
        },
        "Create-Patients->Update-Teis": {
          "enabled": true,
          "id": "9c593a1e-e2dd-43b2-813e-8199130032d4",
          "target_job_id": "344f7e66-ab73-4b63-83cc-bdaf744fea77",
          "source_job_id": "e62457f2-700a-4ac6-8da1-5b32409c0e58",
          "condition_type": "on_job_success"
        },
        "Get-Teis-and-Locations->Create-Patients": {
          "enabled": true,
          "id": "f4db201e-037a-405b-8910-f2ac06b13353",
          "target_job_id": "e62457f2-700a-4ac6-8da1-5b32409c0e58",
          "source_job_id": "d90e68f0-a919-44d3-8e7a-3fceca4cf387",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.uniqueTeis.length > 0 && !state.errors\n"
        },
        "Get-Teis-and-Locations->Alert-Admin-of-Duplicate-TEIs": {
          "enabled": true,
          "id": "cac620fc-d546-44e5-85c2-50c7e3a2a964",
          "target_job_id": "92ac9327-b3ef-41d6-8d1f-d4e8eb492ed7",
          "source_job_id": "d90e68f0-a919-44d3-8e7a-3fceca4cf387",
          "condition_type": "js_expression",
          "condition_label": "has-duplicate-patients",
          "condition_expression": "state.duplicatePatients.length > 0 && !state.errors\n"
        }
      }
    }
  },
  "allow_support_access": false,
  "requires_mfa": false
}