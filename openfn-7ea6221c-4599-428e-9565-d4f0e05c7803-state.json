{
  "id": "7ea6221c-4599-428e-9565-d4f0e05c7803",
  "name": "msf-lime-mosul-staging",
  "description": "staging project for main MSF workflows\n",
  "concurrency": null,
  "inserted_at": "2025-01-30T11:16:04Z",
  "updated_at": "2025-03-18T12:25:14Z",
  "project_credentials": {
    "mtuchi@openfn.org-mtuchi-github-token": {
      "id": "0fa0d3d1-0caa-4f8f-8952-f0b2e2ce51ea",
      "name": "mtuchi-github-token",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenMRS-Demo": {
      "id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08",
      "name": "OpenMRS Demo",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenFnSharepoint": {
      "id": "49fdae45-c33e-498a-9441-e0c0b4a61568",
      "name": "OpenFnSharepoint",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-MSF-DHIS2-UAT": {
      "id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f",
      "name": "MSF DHIS2 UAT",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-Collections-Config[Mtuchi]": {
      "id": "90cddfa1-9b77-4625-a812-2a04d061522c",
      "name": "Collections Config[Mtuchi]",
      "owner": "mtuchi@openfn.org"
    },
    "aisha@openfn.org-MSF-OMRS-admin": {
      "id": "d2c62b09-c071-4cbe-95e5-b703aba863f3",
      "name": "MSF OMRS admin",
      "owner": "aisha@openfn.org"
    }
  },
  "scheduled_deletion": null,
  "history_retention_period": 365,
  "dataclip_retention_period": 365,
  "retention_policy": "retain_all",
  "collections": {
    "mosul-metadata-mappings": {
      "id": "1a91634a-21d8-4b36-995b-71e155542dbd",
      "name": "mosul-metadata-mappings"
    }
  },
  "workflows": {
    "get-metadata-collections": {
      "id": "6be0f9f1-2933-403a-b3b1-4272ce0a3bc5",
      "name": "get-metadata-collections",
      "inserted_at": "2025-03-06T08:42:22.366068Z",
      "lock_version": 18,
      "triggers": {
        "webhook": {
          "enabled": false,
          "id": "3b67cdd7-b64f-45fb-87fc-5f6487159c5f",
          "type": "webhook"
        }
      },
      "jobs": {
        "Get-and-set-metadata-collections": {
          "id": "4586e5d2-8775-456a-81d2-1809601b38c8",
          "name": "Get and set metadata collections",
          "body": "// Check out the Job Writing Guide for help getting started:\n// https://docs.openfn.org/documentation/jobs/job-writing-guide\n\n// collections.remove(\"metadata-mappings\", \"mappings-*\")\n\n//  collections.remove(\"metadata-mappings\", \"mapping*\")\n\n collections.get(\"metadata_mappings\", \"mappingSets\") // getting collections from metadata project\n\n collections.set(\"mosul-metadata-mappings\", \"mappingSets\", state => {\n  return state.data\n })\n\ncollections.get(\"mosul-metadata-mappings\", \"mappingSets\") \n\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        }
      },
      "edges": {
        "webhook->Get-and-set-metadata-collections": {
          "enabled": true,
          "id": "809a825b-da5e-4f02-857a-7d08017e42c4",
          "target_job_id": "4586e5d2-8775-456a-81d2-1809601b38c8",
          "source_trigger_id": "3b67cdd7-b64f-45fb-87fc-5f6487159c5f",
          "condition_type": "always"
        }
      }
    },
    "wf2-omrs-dhis2": {
      "id": "24c5c1d4-a07a-4d5a-a6c7-649825bf7e7a",
      "name": "wf2-omrs-dhis2",
      "inserted_at": "2025-03-21T02:10:52.960983Z",
      "lock_version": 38,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "a30ec52a-4ecc-4dbe-8b44-61c779f6f879",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Patients": {
          "id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "name": "Get Patients",
          "body": "cursor($.lastRunDateTime || $.manualCursor || '2025-03-20T06:01:24.000Z');\n\ncursor('today', {\n  key: 'lastRunDateTime',\n  format: c => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: 'IQ', v: 'full', limit: '100' });\n\nfn(state => {\n  const { cursor, data, lastRunDateTime } = state;\n  console.log('Filtering patients since cursor:', cursor);\n\n  const patients = data.results.filter(({ auditInfo }) => {\n    const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n    return lastModified > cursor;\n  });\n  console.log('# of patients to sync to dhis2 ::', patients.length);\n  console.log(\n    'uuids of patients to sync to dhis2 ::',\n    patients.map(p => p.uuid)\n  );\n\n  return { cursor, lastRunDateTime, patients };\n});\n\n// get patient - log number of patient that are fetched\n\n// get collections neccessary for patient mapping\n\n// map patient here - this will be passed down to next step\n\n// delete the initial patient object and only pass on the mapped one",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Mappings": {
          "id": "6f787076-7706-4104-834e-29340029c5ee",
          "name": "Mappings",
          "body": "const isValidUUID = id => {\n  if (!id || typeof id !== 'string') return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\n// get(\n//   'https://raw.githubusercontent.com/OpenFn/msf-lime-metadata/refs/heads/collections/metadata/collections.json',\n//   { parseAs: 'json' },\n//   state => {\n//     const { cursor, lastRunDateTime, patients, data } = state;\n\n//     return {\n//       ...data,\n//       cursor,\n//       patients,\n//       lastRunDateTime,\n//     };\n//   }\n// );\n\ncollections.get('mosul-metadata-mappings', 'mappingSets').then(state => {\n  const { cursor, lastRunDateTime, patients, data } = state;\n  if (Object.keys(data).length === 0) {\n    throw new Error('Empty collection');\n  }\n  return { ...data, cursor, patients, lastRunDateTime };\n});\n\nfn(state => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.formUuids = formMetadata\n    .filter(form => isValidUUID(form['OMRS form.uuid']))\n    .map(form => form['OMRS form.uuid']);\n\n  rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n    'dhis2 attribute id'\n  ];\n  rest.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n    'dhis2 attribute id'\n  ];\n\n  rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n\nfn(state => {\n  state.genderOptions = state.optsMap\n    .filter(o => o['OptionSet name'] === 'Sex - Patient')\n    .reduce((acc, value) => {\n      acc[value['value.uuid - External ID']] = value['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": null
        },
        "Upsert-TEIs": {
          "id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "name": "Upsert TEIs",
          "body": "const buildPatientsUpsert = (state, patient, isNewPatient) => {\n  const { placeOflivingMap, genderOptions } = state;\n  const dateCreated = patient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find(i => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const enrollments = [\n    {\n      orgUnit: state.orgUnit,\n      program: state.program,\n      programStage: state.patientProgramStage, //'MdTtRixaC1B',\n      enrollmentDate: dateCreated,\n    },\n  ];\n\n  const findOptsUuid = uuid =>\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value\n      ?.uuid ||\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value;\n\n  const findOptCode = optUuid =>\n    state.optsMap.find(o => o['value.uuid - External ID'] === optUuid)?.[\n      'DHIS2 Option Code'\n    ];\n\n  const patientMap = state.formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map(d => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: 'fa7uwpCKIwa',\n      value: patient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: 'Jt9BhFZkvP2',\n      value: patient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: 'P4wdYGkldeG', //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(patient.identifiers, state.dhis2PatientNumber) ||\n        findIdentifierByUuid(patient.identifiers, state.openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: 'ZBoxuExmxcZ', //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(patient.identifiers, state.openmrsAutoId),\n    },\n    {\n      attribute: 'AYbfTPYMNJH', //\"OpenMRS Patient UID\"\n      value: patient.uuid,\n    },\n    {\n      attribute: 'qptKDiv9uPl',\n      value: genderOptions[patient.person.gender],\n    },\n    {\n      attribute: 'T1iX2NuPyqS',\n      value: patient.person.age,\n    },\n    {\n      attribute: 'WDp4nVor9Z7',\n      value: patient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: 'rBtrjV1Mqkz', //Place of living\n      value: placeOflivingMap[patient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter(a => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter(a => a.value);\n  //console.log('standardAttr ::', JSON.stringify(standardAttr, null,2))\n  //console.log('filteredAttr ::', JSON.stringify(filteredAttr, null,2))\n\n  const payload = {\n    query: {\n      ou: state.orgUnit,\n      program: state.program,\n      filter: [`AYbfTPYMNJH:Eq:${patient.uuid}`], //upsert on omrs.patient.uid\n    },\n    data: {\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntityType: 'cHlzCA2MuEF',\n      attributes: [...filteredAttr, ...filteredStatusAttr],\n    },\n  };\n\n  console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (isNewPatient) {\n    console.log('create enrollment');\n    payload.data.enrollments = enrollments;\n  }\n\n  return payload;\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\neach(\n  $.patients,\n  get(\n    'tracker/trackedEntities',\n    {\n      orgUnit: $.orgUnit,\n      filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],\n      program: $.program,\n    },\n    {},\n    async state => {\n      const patient = state.references.at(-1);\n      console.log(patient.uuid, 'patient uuid');\n\n      const isNewPatient = state.data.instances.length === 0;\n\n      state.patientsUpsert ??= [];\n      state.patientsUpsert.push(\n        buildPatientsUpsert(state, patient, isNewPatient)\n      );\n      await delay(2000);\n      return state;\n    }\n  )\n);\n\n// Upsert TEIs to DHIS2\neach(\n  $.patientsUpsert,\n  upsert('trackedEntityInstances', $.data.query, $.data.data)\n);\nfn(state => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    genderOptions,\n    identifiers,\n    ...next\n  } = state;\n\n  next.patientUuids = patients.map(p => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@6.3.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Encounters": {
          "id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "name": "Get Encounters",
          "body": "// Fetch all encounters\nhttp\n  .get('/ws/fhir2/R4/Encounter', {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then(state => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find(l => l.relation === 'next')\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split('/openmrs')[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then(state => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\nfn(state => {\n  console.log(\n    'Total # of encounters fetched: ',\n    state.allResponse?.entry?.length\n  );\n  state.encounterUuids = state.allResponse?.entry?.map(p => p.resource.id);\n  state.patientUuids = [\n    ...new Set(\n      state.allResponse?.entry?.map(p =>\n        p.resource.subject.reference.replace('Patient/', '')\n      )\n    ),\n  ];\n\n  return state;\n});\n\n// Fetch patient encounters\neach(\n  $.patientUuids,\n  get('encounter', { patient: $.data, v: 'full' }).then(state => {\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map(formUuid =>\n      state.data.results.filter(\n        e => e.encounterDatetime >= state.cursor && e?.form?.uuid === formUuid\n      )\n    );\n\n    const encounters = filteredEncounters.map(e => e[0]).filter(e => e);\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n\n    return state;\n  })\n);\n\nfnIf($.encounters, state => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    ...next\n  } = state;\n  console.log(next.encounters.length, '# of new encounters to sync to dhis2');\n\n  return next;\n});\n\nfnIf(!$.encounters, state => {\n  console.log('No encounters found for cursor: ', state.cursor);\n  return state;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.4.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\neach(\n  $.encounters,\n  get(\n    'tracker/trackedEntities',\n    {\n      orgUnit: $.orgUnit,\n      program: $.program,\n      filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n      fields: '*,enrollments[*],enrollments[events[*]]',\n    },\n    {},\n    async state => {\n      const encounter = state.references.at(-1);\n      console.log(encounter.patient.uuid, 'Encounter patient uuid');\n\n      const { trackedEntity, enrollments } = state.data?.instances?.[0] || {};\n      if (trackedEntity && enrollments) {\n        state.TEIs ??= {};\n        state.TEIs[encounter.patient.uuid] = {\n          trackedEntity,\n          events: enrollments[0]?.events,\n          enrollment: enrollments[0]?.enrollment,\n        };\n      }\n\n      await delay(2000);\n      return state;\n    }\n  )\n);\n\nconst processAnswer = (\n  answer,\n  conceptUuid,\n  dataElement,\n  optsMap,\n  optionSetKey\n) => {\n  return typeof answer.value === 'object'\n    ? processObjectAnswer(\n        answer,\n        conceptUuid,\n        dataElement,\n        optsMap,\n        optionSetKey\n      )\n    : processOtherAnswer(answer, conceptUuid, dataElement);\n};\n\nconst processObjectAnswer = (\n  answer,\n  conceptUuid,\n  dataElement,\n  optsMap,\n  optionSetKey\n) => {\n  if (isDiagnosisByPsychologist(conceptUuid, dataElement)) {\n    console.log('Yes done by psychologist..');\n    return '' + answer.value.uuid === '278401ee-3d6f-4c65-9455-f1c16d0a7a98';\n  }\n\n  if (isTrueOnlyQuestion(conceptUuid, dataElement)) {\n    console.log('True only question detected..', dataElement);\n    return answer.value.uuid === '681cf0bc-5213-492a-8470-0a0b3cc324dd'\n      ? 'true'\n      : undefined;\n  }\n\n  return findMatchingOption(answer, optsMap, optionSetKey);\n};\n\nconst processOtherAnswer = (answer, conceptUuid, dataElement) => {\n  if (isPhq9Score(answer.value, conceptUuid, dataElement)) {\n    console.log('isPhq9Score', isPhq9Score);\n    return getRangePhq(answer.value);\n  }\n  return answer.value;\n};\n\nconst processNoAnswer = (data, conceptUuid, dataElement) => {\n  if (isEncounterDate(conceptUuid, dataElement)) {\n    return data.encounterDatetime.replace('+0000', '');\n  }\n  return '';\n};\n\nconst findMatchingOption = (answer, optsMap, optionSetKey) => {\n  const optionKey = `${answer.formUuid}-${answer.concept.uuid}`;\n\n  const matchingOptionSet = optionSetKey[optionKey];\n  console.log('optionKey', optionKey);\n  console.log('conceptUid', answer.concept.uuid);\n  console.log('value uid', answer.value.uuid);\n  console.log('value display', answer.value.display);\n  console.log('matchingOptionSet', matchingOptionSet);\n\n  const matchingOption =\n    optsMap.find(\n      o =>\n        o['value.uuid - External ID'] === answer.value.uuid &&\n        o['DHIS2 Option Set UID'] === matchingOptionSet\n    )?.['DHIS2 Option Code'] || answer.value.display; //TODO: revisit this logic if optionSet not found\n\n  console.log('matchingOption value', matchingOption);\n\n  if (matchingOption === 'FALSE') {\n    return 'false';\n  }\n  if (matchingOption === 'TRUE') {\n    return 'true';\n  }\n\n  return matchingOption || '';\n};\n\nconst isEncounterDate = (conceptUuid, dataElement) => {\n  return (\n    conceptUuid === 'encounter-date' &&\n    ['CXS4qAJH2qD', 'I7phgLmRWQq', 'yUT7HyjWurN'].includes(dataElement)\n  );\n};\n\nconst isTrueOnlyQuestion = (conceptUuid, dataElement) =>\n  conceptUuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9' &&\n  dataElement === 'G0hLyxqgcO7';\n\nconst isDiagnosisByPsychologist = (conceptUuid, dataElement) =>\n  conceptUuid === '722dd83a-c1cf-48ad-ac99-45ac131ccc96' &&\n  dataElement === 'pN4iQH4AEzk';\n\nconst isPhq9Score = (value, conceptUuid, dataElement) =>\n  typeof value === 'number' &&\n  (conceptUuid === '5f3d618e-5c89-43bd-8c79-07e4e98c2f23' ||\n    conceptUuid === '6545b874-f44d-4d18-9ab1-7a8bb21c0a15');\n\nconst getRangePhq = input => {\n  if (input >= 20) return '>20';\n  if (input >= 15) return '15_19';\n  if (input >= 10) return '10_14';\n  if (input >= 5) return '5_9';\n  return '0_4';\n};\n\nconst dataValuesMapping = (data, dataValueMap, optsMap, optionSetKey) => {\n  return Object.keys(dataValueMap)\n    .map(dataElement => {\n      const conceptUuid = dataValueMap[dataElement];\n      const obsAnswer = data.obs.find(o => o.concept.uuid === conceptUuid);\n      const answer = {\n        ...obsAnswer,\n        formUuid: data.form.uuid,\n      };\n      const value = answer\n        ? processAnswer(answer, conceptUuid, dataElement, optsMap, optionSetKey)\n        : processNoAnswer(data, conceptUuid, dataElement);\n\n      return { dataElement, value };\n    })\n    .filter(d => d);\n};\n\n// Prepare DHIS2 data model for create events\nfn(state => {\n  const handleMissingRecord = (data, state) => {\n    const { uuid, display } = data.patient;\n\n    console.log(uuid, 'Patient is missing trackedEntity && enrollment');\n\n    state.missingRecords ??= {};\n    state.missingRecords[uuid] ??= {\n      encounters: [],\n      patient: display,\n    };\n\n    state.missingRecords[uuid].encounters.push(data.uuid);\n  };\n\n  const processEncounter = (data, state) => {\n    const form = state.formMaps[data.form.uuid];\n    if (!form?.dataValueMap) {\n      return null;\n    }\n    const { trackedEntity, enrollment, events } =\n      state.TEIs[data.patient.uuid] || {};\n\n    if (!trackedEntity || !enrollment) {\n      handleMissingRecord(data, state);\n      return null;\n    }\n\n    return {\n      event: events.find(e => e.programStage === form.programStage)?.event,\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntity,\n      enrollment,\n      occurredAt: data.encounterDatetime.replace('+0000', ''),\n      programStage: form.programStage,\n      dataValues: dataValuesMapping(\n        data,\n        form.dataValueMap,\n        state.optsMap,\n        state.optionSetKey\n      ),\n    };\n  };\n\n  state.encountersMapping = state.encounters\n    .map(data => processEncounter(data, state))\n    .filter(Boolean);\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-dhis2@6.3.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Events": {
          "id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "name": "Create Events",
          "body": "// Create or update events for each encounter\ncreate(\n  'tracker',\n  {\n    events: state => {\n      console.log(\n        'Creating events for: ',\n        JSON.stringify(state.encountersMapping, null, 2)\n      );\n      return state.encountersMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: 'UID',\n      importStrategy: 'CREATE_AND_UPDATE',\n    },\n  }\n);\n\nfn(state => {\n  const latestGenderUpdate = state.encounters.reduce((acc, e) => {\n    const answer = e.obs.find(\n      o => o.concept.uuid === 'ec42d68d-3e23-43de-b8c5-a03bb538e7c7'\n    );\n    if (answer) {\n      const personUuid = answer.person.uuid;\n      if (\n        !acc[personUuid] ||\n        new Date(answer.obsDatetime) > new Date(acc[personUuid].obsDatetime)\n      ) {\n        acc[personUuid] = answer;\n      }\n    }\n    return acc;\n  }, {});\n\n  state.genderUpdated = Object.values(latestGenderUpdate);\n\n  return state;\n});\n\nfnIf(\n  state => state.genderUpdated.length === 0,\n  ({ lastRunDateTime }) => ({ lastRunDateTime })\n);\n",
          "adaptor": "@openfn/language-dhis2@6.3.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Update-TEIs": {
          "id": "2b12eded-b70a-4f94-8fd2-5fe07a533461",
          "name": "Update TEIs",
          "body": "fn(state => {\n  const { optsMap, genderUpdated, TEIs } = state;\n  const genderMap = optsMap\n    .filter(o => o['DHIS2 DE UID'] === 'qptKDiv9uPl')\n    .reduce((acc, obj) => {\n      acc[obj['value.display - Answers']] = obj['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  state.teisToUpdate = genderUpdated\n    .map(answer => {\n      const { trackedEntity } = TEIs[answer.person.uuid] || {};\n      if (!trackedEntity) {\n        console.log('No TEI found for person', answer.person.uuid);\n      }\n      if (trackedEntity) {\n        return {\n          trackedEntity,\n          program: state.program,\n          orgUnit: state.orgUnit,\n          trackedEntityType: 'cHlzCA2MuEF',\n          attributes: [\n            {\n              attribute: 'qptKDiv9uPl', //gender\n              value: genderMap[answer.value.display],\n            },\n            {\n              attribute: 'AYbfTPYMNJH', //OpenMRS Patient UID to use to upsert TEI\n              value: answer.person.uuid,\n            },\n          ],\n        };\n      }\n    })\n    .filter(Boolean);\n  return state;\n});\n\n// Update TEIs\ncreate(\n  'tracker',\n  { trackedEntities: $.teisToUpdate },\n  { params: { async: false, importStrategy: 'UPDATE' } }\n);\n\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@6.3.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        }
      },
      "edges": {
        "cron->Get-Patients": {
          "enabled": true,
          "id": "57a8ef61-a75f-4af2-8152-371d871e21bb",
          "target_job_id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "source_trigger_id": "a30ec52a-4ecc-4dbe-8b44-61c779f6f879",
          "condition_type": "always"
        },
        "Mappings->Upsert-TEIs": {
          "enabled": true,
          "id": "cec97e34-8c98-473c-87f0-f68391d38f3b",
          "target_job_id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "source_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "c051248f-741e-4eba-8880-bb6a4ddf8883",
          "target_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "source_job_id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Mappings->Get-Encounters": {
          "enabled": true,
          "id": "e48fdb3b-7287-4572-8888-ea1b1206b23d",
          "target_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "source_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "33cdeb8c-524d-4a9a-8530-647907096741",
          "target_job_id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "source_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state.encounters\n"
        },
        "Get-TEIs-and-Map-Answers->Create-Events": {
          "enabled": true,
          "id": "d167b7ac-80dd-4e48-808d-fa03f17d1847",
          "target_job_id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "source_job_id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.TEIs && !state.errors\n"
        },
        "Create-Events->Update-TEIs": {
          "enabled": true,
          "id": "457fb90b-4b2d-4090-8a95-8539e781044c",
          "target_job_id": "2b12eded-b70a-4f94-8fd2-5fe07a533461",
          "source_job_id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "condition_type": "js_expression",
          "condition_label": "has-gender-updated",
          "condition_expression": "state?.genderUpdated?.length > 0 && !state.errors\n"
        },
        "Get-Patients->Mappings": {
          "enabled": true,
          "id": "e2f4678d-270b-430c-82f6-b5553c641def",
          "target_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "source_job_id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "condition_type": "on_job_success"
        }
      }
    },
    "wf1-dhis2-omrs-migration": {
      "id": "37e14ed6-2caa-4ee2-8d8a-84bcbbd901e0",
      "name": "wf1-dhis2-omrs-migration",
      "inserted_at": "2025-03-28T08:56:27.377532Z",
      "lock_version": 31,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "836df7a7-d15f-4fc6-8f3d-5bb85c823218",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Fetch-Metadata": {
          "id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "name": "Fetch Metadata",
          "body": "cursor($.manualCursor || $.lastRunDateTime).then(state => {\n  console.log('Date cursor to filter TEI extract ::', state.cursor);\n  return state;\n});\n\ncursor('now', {\n  key: 'lastRunDateTime',\n  format: c => {\n    const offset = 2; // GMT+2 (Geneva time)\n    c.setHours(c.getHours() + offset);\n    return c.toISOString().replace('Z', '');\n  },\n}).then(state => {\n  console.log('Next sync start date:', state.lastRunDateTime);\n  return state;\n});\n\n// get(\n//   'https://raw.githubusercontent.com/OpenFn/msf-lime-metadata/refs/heads/collections/metadata/mapping.json',\n//   { parseAs: 'json' },\n//   state => {\n//     const { cursor, lastRunDateTime, data } = state;\n\n//     return { ...data, cursor, lastRunDateTime };\n//   }\n// );\n\ncollections.get('mosul-metadata-mappings', 'mappingSets').then(state => {\n  const { cursor, lastRunDateTime, data } = state;\n  if (Object.keys(data).length === 0) {\n    throw new Error('Empty collection');\n  }\n  return { ...data, cursor, lastRunDateTime };\n});\n\nfn(({ identifiers, optsMap, formMaps, formMetadata, ...state }) => {\n  state.genderOptions = {\n    male: 'M',\n    female: 'F',\n    unknown: 'U',\n    transgender_female: 'O',\n    transgender_male: 'O',\n    prefer_not_to_answer: 'O',\n    gender_variant_non_conforming: 'O',\n  };\n  state.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n    'dhis2 attribute id'\n  ];\n  state.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n    'dhis2 attribute id'\n  ];\n  state.nationalityMap = optsMap\n    .filter(o => o['DHIS2 DE full name'] === 'Nationality')\n    .reduce((acc, value) => {\n      acc[value['DHIS2 Option Code']] = value['value.uuid - External ID'];\n      return acc;\n    }, {});\n\n  state.statusMap = optsMap\n    .filter(o => o['DHIS2 DE full name'].includes(' status'))\n    .reduce((acc, value) => {\n      acc[value['DHIS2 Option Code']] = value['value.uuid - External ID'];\n      return acc;\n    }, {});\n\n  state.patientAttributes = formMaps.patient.dataValueMap;\n\n  state.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  state.dhis2PatientNumberAttributeId = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['dhis2 attribute id']; //DHIS2 ID or DHIS2 Patient Number\n\n  state.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  state.openmrsAutoIdAttributeId = identifiers.find(\n    i => i.type === 'OPENMRS_AUTO_ID'\n  )?.['dhis2 attribute id']; //MSF ID or OpenMRS Patient Number\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Get-Teis-and-Locations": {
          "id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "name": "Get Teis and Locations",
          "body": "const findDuplicatePatient = teis => {\n  const seen = new Map();\n  const duplicates = new Set();\n\n  teis.forEach(tei => {\n    const patientNumber = tei.attributes.find(\n      attr => attr.code === 'patient_number'\n    )?.value;\n\n    if (seen.get(patientNumber)) {\n      duplicates.add(patientNumber);\n    } else {\n      seen.set(patientNumber, tei);\n    }\n  });\n\n  return duplicates;\n};\n// Get teis that are \"active\" in the target program\nget('tracker/trackedEntities', {\n  orgUnit: $.orgUnit, //'OPjuJMZFLop',\n  program: $.program, //'w9MSPn5oSqp',\n  programStatus: 'ACTIVE',\n  updatedAfter: $.cursor,\n  skipPaging: true,\n});\n\nfn(state => {\n  console.log('# of TEIs found before filter ::', state.data.instances.length);\n  const uniqueTeis = [];\n  const duplicatePatients = [];\n  const missingPatientNumber = [];\n\n  const filteredTeis = state.data.instances.filter(\n    tei => tei.updatedAt >= state.cursor\n  );\n\n  console.log('Filtered TEIs ::', filteredTeis.length);\n  const duplicateIds = findDuplicatePatient(filteredTeis);\n\n  filteredTeis.forEach(tei => {\n    const patientNumber = tei.attributes.find(\n      attr => attr.code === 'patient_number'\n    )?.value;\n\n    if (!patientNumber) {\n      missingPatientNumber.push(tei);\n    } else if (duplicateIds.has(patientNumber)) {\n      duplicatePatients.push(tei);\n    } else {\n      uniqueTeis.push(tei);\n    }\n  });\n\n  console.log('# of Unique TEIs to migrate to OMRS ::', uniqueTeis.length);\n    console.log('# Duplicate Patients found::', duplicatePatients.length);\n\n  // return { uniqueTeis, duplicatePatients, filteredTeis, missingPatientNumber };\n  return {\n    ...state,\n    data: {},\n    references: [],\n    uniqueTeis,\n    duplicatePatients,\n    missingPatientNumber,\n  };\n});\n\n\nget('optionGroups/kdef7pUey9f', {\n  fields: 'id,displayName,options[id,displayName,code]',\n});\n\nfn(({ data, ...state }) => {\n  state.locations = data;\n  return state;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Patients": {
          "id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "name": "Create Patients",
          "body": "//Define gender options and prepare newPatientUuid and identifiers\nfn(state => {\n  const { uniqueTeis } = state;\n  if (uniqueTeis.length > 0)\n    console.log('# of TEIs to send to OpenMRS: ', uniqueTeis.length);\n  if (uniqueTeis.length === 0)\n    console.log('No data fetched in step prior to sync.');\n\n  return state;\n});\n\n//First we generate a unique OpenMRS ID for each patient\neach(\n  $.uniqueTeis,\n  post(\n    'idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier'\n  ).then(state => {\n    state.identifiers ??= [];\n    state.identifiers.push(state.data.identifier);\n    return state;\n  })\n);\n\n// Then we map uniqueTeis to openMRS data model\nfn(state => {\n  const {\n    uniqueTeis,\n    nationalityMap,\n    genderOptions,\n    identifiers,\n    statusMap,\n    locations,\n  } = state;\n\n  const getValueForCode = (attributes, code) => {\n    const result = attributes.find(attribute => attribute.code === code);\n    return result ? result.value : undefined;\n  };\n\n  const calculateDOB = age => {\n    if (!age) return age;\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const birthYear = currentYear - age;\n\n    const birthday = new Date(\n      birthYear,\n      currentDate.getMonth(),\n      currentDate.getDay()\n    );\n\n    return birthday.toISOString().replace(/\\.\\d+Z$/, '+0000');\n  };\n\n  state.patients = uniqueTeis.map((d, i) => {\n    const patientNumber =\n      getValueForCode(d.attributes, 'patient_number') || d.trackedEntity; // Add random number for testing + Math.random()\n\n    const lonlat = d.attributes.find(a => a.attribute === 'rBtrjV1Mqkz')?.value;\n    const location = lonlat\n      ? locations.options.find(o => o.code === lonlat)?.displayName\n      : undefined;\n\n    let countyDistrict, cityVillage;\n\n    if (location) {\n      const match = location.match(/^(.*?)\\s*\\((.*?)\\)/);\n      if (match) {\n        [, countyDistrict, cityVillage] = match;\n        cityVillage = cityVillage.split('-')[0].trim(); // Remove country code and trim\n      }\n    }\n\n    const attributes = d.attributes\n      .filter(a => a.attribute in state.patientAttributes)\n      .map(a => {\n        let value = a.value;\n\n        if (a.displayName === 'Nationality') {\n          value = nationalityMap[a.value];\n        } else if (a.displayName.includes(' status')) {\n          value = statusMap[a.value];\n        }\n\n        if (value) {\n          return {\n            attributeType: state.patientAttributes[a.attribute].trim(),\n            value,\n          };\n        }\n      })\n      .filter(Boolean);\n\n    return {\n      patientNumber,\n      person: {\n        age: getValueForCode(d.attributes, 'age'),\n        gender: genderOptions[getValueForCode(d.attributes, 'sex')] ?? 'U',\n        birthdate:\n          d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ??\n          calculateDOB(getValueForCode(d.attributes, 'age')),\n        // d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ?\n        // calculateDOB(getValueForCode(d.attributes, 'age')) : '1900-01-01',\n        birthdateEstimated: d.attributes.find(\n          a => a.attribute === 'WDp4nVor9Z7'\n        )\n          ? true\n          : false,\n        names: [\n          {\n            familyName:\n              d.attributes.find(a => a.attribute === 'fa7uwpCKIwa')?.value ??\n              'unknown',\n            givenName:\n              d.attributes.find(a => a.attribute === 'Jt9BhFZkvP2')?.value ??\n              'unknown',\n          },\n        ],\n        addresses: [\n          {\n            country: 'Iraq',\n            stateProvince: 'Ninewa',\n            countyDistrict,\n            cityVillage,\n          },\n        ],\n        attributes,\n      },\n      identifiers: [\n        {\n          identifier: identifiers[i], //OMRS-generated identifier - see above\n          identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location old:44c3efb0-2583-4c80-a79e-1f756a03c0a1\n          preferred: true,\n        },\n        {\n          uuid: d.trackedEntity,\n          identifier: patientNumber, //Patient Number from DHIS2\n          identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f', //Old Identification number\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location\n          preferred: false, //default value for this identifiertype\n        },\n      ],\n    };\n  });\n\n  return state;\n});\n\n// Creating patients in openMRS\neach(\n  $.patients,\n  upsert(\n    'patient',\n    {\n      q: $.data.patientNumber,\n      limit: 1,\n      startIndex: 0\n    },\n    state => {\n      const { patientNumber, ...patient } = state.data;\n      console.log(\n        'Upserting patient record...',\n        JSON.stringify(patient, null, 2)\n      );\n      return patient;\n    },\n    state => {\n      state.newPatientUuid ??= [];\n      //console.log('state.references ::', state.references)\n      state.newPatientUuid.push({\n        patient_number: state.references.at(-1)?.patientNumber,\n        omrs_patient_number: state.references\n          .at(-1)\n          ?.identifiers.find(\n            i => (i.identifierType = `${state.openmrsAutoId}`)\n          ),\n        uuid: state.data.uuid,\n      });\n      return state;\n    }\n  )\n);\n\n// Clean up state\nfn(({ data, references, ...state }) => state);\n",
          "adaptor": "@openfn/language-openmrs@4.2.0",
          "project_credential_id": "d2c62b09-c071-4cbe-95e5-b703aba863f3"
        },
        "Update-Teis": {
          "id": "f4702169-b017-43da-8e66-5ee3bfa305fb",
          "name": "Update Teis",
          "body": "fn(state => {\n  if (state.newPatientUuid.length === 0) {\n    console.log('No data fetched in step prior to sync.');\n  }\n\n  console.log(\n    'newPatientUuid ::',\n    JSON.stringify(state.newPatientUuid, null, 2)\n  );\n  return state;\n});\n\n// Update TEI on DHIS2\neach(\n  $.newPatientUuid,\n  upsert(\n    'trackedEntityInstances',\n    {\n      ou: $.orgUnit,\n      program: $.program,\n      filter: [`${$.dhis2PatientNumberAttributeId}:Eq:${$.data.patient_number}`],\n    },\n    state => {\n      const payload = {\n        orgUnit: state.orgUnit,\n        program: state.program,\n        trackedEntityType: 'cHlzCA2MuEF',\n        attributes: [\n          {\n            attribute: `${state.dhis2PatientNumberAttributeId}`,\n            value: `${state.data.patient_number}`,\n          }, //DHIS2 patient number to use as lookup key\n          { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n          {\n            attribute: `${state.openmrsAutoIdAttributeId}`,\n            value: `${state.data.omrs_patient_number.identifier}`,\n          }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n        ],\n      }\n\n      console.log('final payload to send to dhis2:', payload)\n      return payload;\n    }\n  )\n  // {\n  //   orgUnit: $.orgUnit,\n  //   program: $.program,\n  //   trackedEntityType: 'cHlzCA2MuEF',\n  //   attributes: [\n  //     {\n  //       attribute: `${$.dhis2PatientNumberAttributeId}`,\n  //       value: `${state.data.patient_number}`,\n  //     }, //DHIS2 patient number to use as lookup key\n  //     { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n  //     {\n  //       attribute: `${state.openmrsAutoIdAttributeId}`,\n  //       value: `${state.data.omrs_patient_number.identifier}`,\n  //     }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n  //   ],\n  // },\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Alert-Admin-of-Duplicate-TEIs": {
          "id": "eaa87fc7-1b9c-4c23-85ef-894fed073145",
          "name": "Alert Admin of Duplicate TEIs",
          "body": "fn(state => {\n  const code = 'DUPLICATE_PATIENT_NUMBERS';\n  const description = `Found ${state.duplicatePatients.length} TIEs with duplicate patient numbers`;\n  const message = `${code}: ${description}`;\n  const patientNumbers = state.duplicatePatients.map(\n    patient =>\n      patient.attributes.find(attr => attr.code === 'patient_number').value\n  );\n\n  const details = {\n    code,\n    description,\n    duplicatePatientNumbers: patientNumbers,\n  };\n  const e = new Error(message);\n  e.details = details;\n  console.error(e.details);\n  throw e;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        }
      },
      "edges": {
        "cron->Fetch-Metadata": {
          "enabled": true,
          "id": "4f025e3a-80af-47ff-8c25-8891eff0c486",
          "target_job_id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "source_trigger_id": "836df7a7-d15f-4fc6-8f3d-5bb85c823218",
          "condition_type": "always"
        },
        "Fetch-Metadata->Get-Teis-and-Locations": {
          "enabled": true,
          "id": "947f7f92-1205-4fda-8595-4d8025786c35",
          "target_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "source_job_id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "condition_type": "on_job_success"
        },
        "Get-Teis-and-Locations->Create-Patients": {
          "enabled": true,
          "id": "b4e06a4a-f873-407f-824a-39ad2006ccb9",
          "target_job_id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "source_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.teis.length > 0 && !state.errors\n"
        },
        "Create-Patients->Update-Teis": {
          "enabled": true,
          "id": "05d88b14-52e6-4f24-8acc-ed0ba455c942",
          "target_job_id": "f4702169-b017-43da-8e66-5ee3bfa305fb",
          "source_job_id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "condition_type": "on_job_success"
        },
        "Get-Teis-and-Locations->Alert-Admin-of-Duplicate-TEIs": {
          "enabled": true,
          "id": "c0260aec-64c9-4f5b-8327-bca677cfdcba",
          "target_job_id": "eaa87fc7-1b9c-4c23-85ef-894fed073145",
          "source_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "condition_type": "js_expression",
          "condition_label": "has-duplicate-patients",
          "condition_expression": "state.duplicatePatients.length > 0 && !state.errors\n"
        }
      }
    }
  },
  "requires_mfa": false
}