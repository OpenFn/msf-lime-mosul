{
  "id": "7ea6221c-4599-428e-9565-d4f0e05c7803",
  "name": "msf-lime-mosul-staging",
  "description": "staging project for main MSF workflows\n",
  "concurrency": null,
  "inserted_at": "2025-01-30T11:16:04Z",
  "updated_at": "2025-07-29T10:00:24Z",
  "project_credentials": {
    "mtuchi@openfn.org-mtuchi-github-token": {
      "id": "0fa0d3d1-0caa-4f8f-8952-f0b2e2ce51ea",
      "name": "mtuchi-github-token",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenMRS-Demo": {
      "id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08",
      "name": "OpenMRS Demo",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenFnSharepoint": {
      "id": "49fdae45-c33e-498a-9441-e0c0b4a61568",
      "name": "OpenFnSharepoint",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-MSF-DHIS2-UAT": {
      "id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f",
      "name": "MSF DHIS2 UAT",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-Collections-Config[Mtuchi]": {
      "id": "90cddfa1-9b77-4625-a812-2a04d061522c",
      "name": "Collections Config[Mtuchi]",
      "owner": "mtuchi@openfn.org"
    },
    "aisha@openfn.org-MSF-OMRS-admin": {
      "id": "d2c62b09-c071-4cbe-95e5-b703aba863f3",
      "name": "MSF OMRS admin",
      "owner": "aisha@openfn.org"
    },
    "mtuchi@openfn.org-mtuchi-api-token": {
      "id": "97973103-5dca-457d-a893-bb280ff66962",
      "name": "mtuchi-api-token",
      "owner": "mtuchi@openfn.org"
    }
  },
  "scheduled_deletion": null,
  "history_retention_period": 365,
  "dataclip_retention_period": 365,
  "retention_policy": "retain_all",
  "collections": {},
  "workflows": {
    "wf1-dhis2-omrs-migration": {
      "id": "37e14ed6-2caa-4ee2-8d8a-84bcbbd901e0",
      "name": "wf1-dhis2-omrs-migration",
      "inserted_at": "2025-05-29T13:01:50.652795Z",
      "lock_version": 34,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "836df7a7-d15f-4fc6-8f3d-5bb85c823218",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Fetch-Metadata": {
          "id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "name": "Fetch Metadata",
          "body": "cursor($.manualCursor || $.lastRunDateTime).then(state => {\n  console.log('Date cursor to filter TEI extract ::', state.cursor);\n  return state;\n});\n\ncursor('now', {\n  key: 'lastRunDateTime',\n  format: c => {\n    const offset = 2; // GMT+2 (Geneva time)\n    c.setHours(c.getHours() + offset);\n    return c.toISOString().replace('Z', '');\n  },\n}).then(state => {\n  console.log('Next sync start date:', state.lastRunDateTime);\n  return state;\n});\n\n// get(\n//   'https://raw.githubusercontent.com/OpenFn/msf-lime-metadata/refs/heads/collections/metadata/mapping.json',\n//   { parseAs: 'json' },\n//   state => {\n//     const { cursor, lastRunDateTime, data } = state;\n\n//     return { ...data, cursor, lastRunDateTime };\n//   }\n// );\n\ncollections.get('mosul-metadata-mappings', 'mappingSets').then(state => {\n  const { cursor, lastRunDateTime, data } = state;\n  if (Object.keys(data).length === 0) {\n    throw new Error('Empty collection');\n  }\n  return { ...data, cursor, lastRunDateTime };\n});\n\nfn(({ identifiers, optsMap, formMaps, formMetadata, ...state }) => {\n  state.genderOptions = {\n    male: 'M',\n    female: 'F',\n    unknown: 'U',\n    transgender_female: 'O',\n    transgender_male: 'O',\n    prefer_not_to_answer: 'O',\n    gender_variant_non_conforming: 'O',\n  };\n  state.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n    'dhis2 attribute id'\n  ];\n  state.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n    'dhis2 attribute id'\n  ];\n  state.nationalityMap = optsMap\n    .filter(o => o['DHIS2 DE full name'] === 'Nationality')\n    .reduce((acc, value) => {\n      acc[value['DHIS2 Option Code']] = value['value.uuid - External ID'];\n      return acc;\n    }, {});\n\n  state.statusMap = optsMap\n    .filter(o => o['DHIS2 DE full name'].includes(' status'))\n    .reduce((acc, value) => {\n      acc[value['DHIS2 Option Code']] = value['value.uuid - External ID'];\n      return acc;\n    }, {});\n\n  state.patientAttributes = formMaps.patient.dataValueMap;\n\n  state.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  state.dhis2PatientNumberAttributeId = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['dhis2 attribute id']; //DHIS2 ID or DHIS2 Patient Number\n\n  state.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  state.openmrsAutoIdAttributeId = identifiers.find(\n    i => i.type === 'OPENMRS_AUTO_ID'\n  )?.['dhis2 attribute id']; //MSF ID or OpenMRS Patient Number\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Get-Teis-and-Locations": {
          "id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "name": "Get Teis and Locations",
          "body": "const findDuplicatePatient = teis => {\n  const seen = new Map();\n  const duplicates = new Set();\n\n  teis.forEach(tei => {\n    const patientNumber = tei.attributes.find(\n      attr => attr.code === 'patient_number'\n    )?.value;\n\n    if (seen.get(patientNumber)) {\n      duplicates.add(patientNumber);\n    } else {\n      seen.set(patientNumber, tei);\n    }\n  });\n\n  return duplicates;\n};\n// Get teis that are \"active\" in the target program\nget('tracker/trackedEntities', {\n  orgUnit: $.orgUnit, //'OPjuJMZFLop',\n  program: $.program, //'w9MSPn5oSqp',\n  programStatus: 'ACTIVE',\n  updatedAfter: $.cursor,\n  skipPaging: true,\n});\n\nfn(state => {\n  console.log('# of TEIs found before filter ::', state.data.instances.length);\n  const uniqueTeis = [];\n  const duplicatePatients = [];\n  const missingPatientNumber = [];\n\n  const filteredTeis = state.data.instances.filter(\n    tei => tei.updatedAt >= state.cursor\n  );\n\n  console.log('Filtered TEIs ::', filteredTeis.length);\n  const duplicateIds = findDuplicatePatient(filteredTeis);\n\n  filteredTeis.forEach(tei => {\n    const patientNumber = tei.attributes.find(\n      attr => attr.code === 'patient_number'\n    )?.value;\n    const patientUid = tei.attributes.find(\n      attr => attr.code === 'patient_uid'\n    )?.value;\n\n    if (patientUid) {\n      console.log(\n        `Skipping TEI:: ${tei.trackedEntity}. Found existing patient uid.`\n      );\n      return;\n    }\n    if (!patientNumber) {\n      missingPatientNumber.push(tei);\n    } else if (duplicateIds.has(patientNumber)) {\n      duplicatePatients.push(tei);\n    } else {\n      uniqueTeis.push(tei);\n    }\n  });\n\n  console.log('# of Unique TEIs to migrate to OMRS ::', uniqueTeis.length);\n  console.log('# Duplicate Patients found::', duplicatePatients.length);\n\n  // return { uniqueTeis, duplicatePatients, filteredTeis, missingPatientNumber };\n  return {\n    ...state,\n    data: {},\n    references: [],\n    uniqueTeis,\n    duplicatePatients,\n    missingPatientNumber,\n  };\n});\n\nget('optionGroups/kdef7pUey9f', {\n  fields: 'id,displayName,options[id,displayName,code]',\n});\n\nfn(({ data, ...state }) => {\n  state.locations = data;\n  return state;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Patients": {
          "id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "name": "Create Patients",
          "body": "//Define gender options and prepare newPatientUuid and identifiers\nfn(state => {\n  const { uniqueTeis } = state;\n  if (uniqueTeis.length > 0)\n    console.log('# of TEIs to send to OpenMRS: ', uniqueTeis.length);\n  if (uniqueTeis.length === 0)\n    console.log('No data fetched in step prior to sync.');\n\n  return state;\n});\n\n//First we generate a unique OpenMRS ID for each patient\neach(\n  $.uniqueTeis,\n  post(\n    'idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier'\n  ).then(state => {\n    state.identifiers ??= [];\n    state.identifiers.push(state.data.identifier);\n    return state;\n  })\n);\n\n// Then we map uniqueTeis to openMRS data model\nfn(state => {\n  const {\n    uniqueTeis,\n    nationalityMap,\n    genderOptions,\n    identifiers,\n    statusMap,\n    locations,\n  } = state;\n\n  const getValueForCode = (attributes, code) => {\n    const result = attributes.find(attribute => attribute.code === code);\n    return result ? result.value : undefined;\n  };\n\n  const calculateDOB = age => {\n    if (!age) return age;\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const birthYear = currentYear - age;\n\n    const birthday = new Date(\n      birthYear,\n      currentDate.getMonth(),\n      currentDate.getDay()\n    );\n\n    return birthday.toISOString().replace(/\\.\\d+Z$/, '+0000');\n  };\n\n  state.patients = uniqueTeis.map((d, i) => {\n    const patientNumber =\n      getValueForCode(d.attributes, 'patient_number') || d.trackedEntity; // Add random number for testing + Math.random()\n\n    const lonlat = d.attributes.find(a => a.attribute === 'rBtrjV1Mqkz')?.value;\n    const location = lonlat\n      ? locations.options.find(o => o.code === lonlat)?.displayName\n      : undefined;\n\n    let countyDistrict, cityVillage;\n\n    if (location) {\n      const match = location.match(/^(.*?)\\s*\\((.*?)\\)/);\n      if (match) {\n        [, countyDistrict, cityVillage] = match;\n        cityVillage = cityVillage.split('-')[0].trim(); // Remove country code and trim\n      }\n    }\n\n    const attributes = d.attributes\n      .filter(a => a.attribute in state.patientAttributes)\n      .map(a => {\n        let value = a.value;\n\n        if (a.displayName === 'Nationality') {\n          value = nationalityMap[a.value];\n        } else if (a.displayName.includes(' status')) {\n          value = statusMap[a.value];\n        }\n\n        if (value) {\n          return {\n            attributeType: state.patientAttributes[a.attribute].trim(),\n            value,\n          };\n        }\n      })\n      .filter(Boolean);\n\n    return {\n      patientNumber,\n      person: {\n        age: getValueForCode(d.attributes, 'age'),\n        gender: genderOptions[getValueForCode(d.attributes, 'sex')] ?? 'U',\n        birthdate:\n          d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ??\n          calculateDOB(getValueForCode(d.attributes, 'age')),\n        // d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ?\n        // calculateDOB(getValueForCode(d.attributes, 'age')) : '1900-01-01',\n        birthdateEstimated: d.attributes.find(\n          a => a.attribute === 'WDp4nVor9Z7'\n        )\n          ? true\n          : false,\n        names: [\n          {\n            familyName:\n              d.attributes.find(a => a.attribute === 'fa7uwpCKIwa')?.value ??\n              'unknown',\n            givenName:\n              d.attributes.find(a => a.attribute === 'Jt9BhFZkvP2')?.value ??\n              'unknown',\n          },\n        ],\n        addresses: [\n          {\n            country: 'Iraq',\n            stateProvince: 'Ninewa',\n            countyDistrict,\n            cityVillage,\n          },\n        ],\n        attributes,\n      },\n      identifiers: [\n        {\n          identifier: identifiers[i], //OMRS-generated identifier - see above\n          identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location old:44c3efb0-2583-4c80-a79e-1f756a03c0a1\n          preferred: true,\n        },\n        {\n          uuid: d.trackedEntity,\n          identifier: patientNumber, //Patient Number from DHIS2\n          identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f', //Old Identification number\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location\n          preferred: false, //default value for this identifiertype\n        },\n      ],\n    };\n  });\n\n  return state;\n});\n\n// Creating patients in openMRS\neach(\n  $.patients,\n  upsert(\n    'patient',\n    {\n      q: $.data.patientNumber,\n      limit: 1,\n      startIndex: 0\n    },\n    state => {\n      const { patientNumber, ...patient } = state.data;\n      console.log(\n        'Upserting patient record...',\n        JSON.stringify(patient, null, 2)\n      );\n      return patient;\n    },\n    state => {\n      state.newPatientUuid ??= [];\n      //console.log('state.references ::', state.references)\n      state.newPatientUuid.push({\n        patient_number: state.references.at(-1)?.patientNumber,\n        omrs_patient_number: state.references\n          .at(-1)\n          ?.identifiers.find(\n            i => (i.identifierType === `${state.openmrsAutoId}`)\n          ),\n        uuid: state.data.uuid,\n      });\n      return state;\n    }\n  )\n);\n\n// Clean up state\nfn(({ data, references, ...state }) => state);\n",
          "adaptor": "@openfn/language-openmrs@4.2.0",
          "project_credential_id": "d2c62b09-c071-4cbe-95e5-b703aba863f3"
        },
        "Update-Teis": {
          "id": "f4702169-b017-43da-8e66-5ee3bfa305fb",
          "name": "Update Teis",
          "body": "fn(state => {\n  if (state.newPatientUuid.length === 0) {\n    console.log('No data fetched in step prior to sync.');\n  }\n\n  console.log(\n    'newPatientUuid ::',\n    JSON.stringify(state.newPatientUuid, null, 2)\n  );\n  return state;\n});\n\n// Update TEI on DHIS2\neach(\n  $.newPatientUuid,\n  upsert(\n    'trackedEntityInstances',\n    {\n      ou: $.orgUnit,\n      program: $.program,\n      filter: [`${$.dhis2PatientNumberAttributeId}:Eq:${$.data.patient_number}`],\n    },\n    state => {\n      const payload = {\n        orgUnit: state.orgUnit,\n        program: state.program,\n        trackedEntityType: 'cHlzCA2MuEF',\n        attributes: [\n          {\n            attribute: `${state.dhis2PatientNumberAttributeId}`,\n            value: `${state.data.patient_number}`,\n          }, //DHIS2 patient number to use as lookup key\n          { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n          {\n            attribute: `${state.openmrsAutoIdAttributeId}`,\n            value: `${state.data.omrs_patient_number.identifier}`,\n          }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n        ],\n      }\n\n      console.log('final payload to send to dhis2:', payload)\n      return payload;\n    }\n  )\n  // {\n  //   orgUnit: $.orgUnit,\n  //   program: $.program,\n  //   trackedEntityType: 'cHlzCA2MuEF',\n  //   attributes: [\n  //     {\n  //       attribute: `${$.dhis2PatientNumberAttributeId}`,\n  //       value: `${state.data.patient_number}`,\n  //     }, //DHIS2 patient number to use as lookup key\n  //     { attribute: 'AYbfTPYMNJH', value: `${state.data.uuid}` }, //OMRS patient uuid\n  //     {\n  //       attribute: `${state.openmrsAutoIdAttributeId}`,\n  //       value: `${state.data.omrs_patient_number.identifier}`,\n  //     }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n  //   ],\n  // },\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Alert-Admin-of-Duplicate-TEIs": {
          "id": "eaa87fc7-1b9c-4c23-85ef-894fed073145",
          "name": "Alert Admin of Duplicate TEIs",
          "body": "fn(state => {\n  const code = 'DUPLICATE_PATIENT_NUMBERS';\n  const description = `Found ${state.duplicatePatients.length} TIEs with duplicate patient numbers`;\n  const message = `${code}: ${description}`;\n  const patientNumbers = state.duplicatePatients.map(\n    patient =>\n      patient.attributes.find(attr => attr.code === 'patient_number').value\n  );\n\n  const details = {\n    code,\n    description,\n    duplicatePatientNumbers: patientNumbers,\n  };\n  const e = new Error(message);\n  e.details = details;\n  console.error(e.details);\n  throw e;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        }
      },
      "edges": {
        "cron->Fetch-Metadata": {
          "enabled": true,
          "id": "4f025e3a-80af-47ff-8c25-8891eff0c486",
          "target_job_id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "source_trigger_id": "836df7a7-d15f-4fc6-8f3d-5bb85c823218",
          "condition_type": "always"
        },
        "Fetch-Metadata->Get-Teis-and-Locations": {
          "enabled": true,
          "id": "947f7f92-1205-4fda-8595-4d8025786c35",
          "target_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "source_job_id": "c4616bf4-6a28-4307-8798-d5710dcfc75f",
          "condition_type": "on_job_success"
        },
        "Get-Teis-and-Locations->Create-Patients": {
          "enabled": true,
          "id": "b4e06a4a-f873-407f-824a-39ad2006ccb9",
          "target_job_id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "source_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.uniqueTeis.length > 0 && !state.errors\n"
        },
        "Create-Patients->Update-Teis": {
          "enabled": true,
          "id": "05d88b14-52e6-4f24-8acc-ed0ba455c942",
          "target_job_id": "f4702169-b017-43da-8e66-5ee3bfa305fb",
          "source_job_id": "d26ee140-a7d7-424b-8d82-ed34d25174f2",
          "condition_type": "on_job_success"
        },
        "Get-Teis-and-Locations->Alert-Admin-of-Duplicate-TEIs": {
          "enabled": true,
          "id": "c0260aec-64c9-4f5b-8327-bca677cfdcba",
          "target_job_id": "eaa87fc7-1b9c-4c23-85ef-894fed073145",
          "source_job_id": "1845ba39-b556-452f-80db-c794c8b2bb9c",
          "condition_type": "js_expression",
          "condition_label": "has-duplicate-patients",
          "condition_expression": "state.duplicatePatients.length > 0 && !state.errors\n"
        }
      }
    },
    "get-metadata-collections": {
      "id": "6be0f9f1-2933-403a-b3b1-4272ce0a3bc5",
      "name": "get-metadata-collections",
      "inserted_at": "2025-07-14T10:22:38.081646Z",
      "lock_version": 21,
      "triggers": {
        "webhook": {
          "enabled": false,
          "id": "3b67cdd7-b64f-45fb-87fc-5f6487159c5f",
          "type": "webhook"
        }
      },
      "jobs": {
        "Get-and-set-metadata-collections": {
          "id": "4586e5d2-8775-456a-81d2-1809601b38c8",
          "name": "Get and set metadata collections",
          "body": "// Check out the Job Writing Guide for help getting started:\n// https://docs.openfn.org/documentation/jobs/job-writing-guide\n\n// collections.remove(\"metadata-mappings\", \"mappings-*\")\n\n//  collections.remove(\"metadata-mappings\", \"mapping*\")\n\n collections.get(\"metadata_mappings\", \"mappingSets\") // getting collections from metadata project\n\n collections.set(\"mosul-metadata-mappings\", \"mappingSets\", state => {\n  return state.data\n })\n\ncollections.get(\"mosul-metadata-mappings\", \"mappingSets\") \n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        }
      },
      "edges": {
        "webhook->Get-and-set-metadata-collections": {
          "enabled": true,
          "id": "809a825b-da5e-4f02-857a-7d08017e42c4",
          "target_job_id": "4586e5d2-8775-456a-81d2-1809601b38c8",
          "source_trigger_id": "3b67cdd7-b64f-45fb-87fc-5f6487159c5f",
          "condition_type": "always"
        }
      }
    },
    "wf2-omrs-dhis2": {
      "id": "24c5c1d4-a07a-4d5a-a6c7-649825bf7e7a",
      "name": "wf2-omrs-dhis2",
      "inserted_at": "2025-07-29T07:54:36.190901Z",
      "lock_version": 119,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "a30ec52a-4ecc-4dbe-8b44-61c779f6f879",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Patients": {
          "id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "name": "Get Patients",
          "body": "cursor($.lastRunDateTime || $.manualCursor || '2025-03-20T06:01:24.000Z');\n\ncursor('today', {\n  key: 'lastRunDateTime',\n  format: c => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: 'IQ', v:'full', includeVoided: true, limit: '100' });\n// get(\"patient\", { query: \"IQ\", includeVoided: true, pageSize: 100, max: 10000  })\nfn(state => {\n  const { cursor, data, lastRunDateTime } = state;\n  console.log('Filtering patients since cursor:', cursor);\n// const patients = data.results;\n  const patients = data.results.filter(({ auditInfo }) => {\n    const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n    return lastModified > cursor;\n  });\n  console.log('# of patients to sync to dhis2 ::', patients.length);\n  console.log(\n    'uuids of patients to sync to dhis2 ::',\n    patients.map(p => p.uuid)\n  );\n\n  return { cursor, lastRunDateTime, patients };\n});\n\n// get patient - log number of patient that are fetched\n\n// get collections neccessary for patient mapping\n\n// map patient here - this will be passed down to next step\n\n// delete the initial patient object and only pass on the mapped one\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Mappings": {
          "id": "6f787076-7706-4104-834e-29340029c5ee",
          "name": "Mappings",
          "body": "const isValidUUID = id => {\n  if (!id || typeof id !== 'string') return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\n// get(\n//   'https://raw.githubusercontent.com/OpenFn/msf-lime-metadata/refs/heads/collections/metadata/collections.json',\n//   { parseAs: 'json' },\n//   state => {\n//     const { cursor, lastRunDateTime, patients, data } = state;\n\n//     return {\n//       ...data,\n//       cursor,\n//       patients,\n//       lastRunDateTime,\n//     };\n//   }\n// );\n\ncollections.get('mosul-metadata-mappings-staging').then(state => {\n  state.optsMap = state.data\n    .filter(i => i.key.includes('optsMap-value-'))\n    .map(i => i.value);\n\n  state.identifiers = state.data\n    .filter(i => i.key.includes('identifiers-value-'))\n    .map(i => i.value);\n  state.syncedAt = state.data.find(i => i.key === 'syncedAt')?.value;\n  state.formMetadata = state.data.find(i => i.key === 'formMetadata')?.value;\n  state.placeOflivingMap = state.data.find(i => i.key === 'placeOflivingMap')?.value;\n  state.sourceFile = state.data.filter(i => i.key === 'sourceFile')?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    i => i.key === 'fileDateModified'\n  )?.[0]?.value;\n  state.optionSetKey = state.data.filter(\n    i => i.key === 'optionSetKey'\n  )?.[0]?.value;\n  state.formMaps = state.data.find(i => i.key === 'formMaps')?.value;\n\n  delete state.data\n  delete state.references\n  return state;\n});\n\nfn(state => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      form =>\n        isValidUUID(form['OMRS form.uuid']) &&\n        form['OMRS Form Version'] === 'v4-2025'\n    )\n    .map(form => form['OMRS form.uuid']);\n  rest.formUuids = formMetadata\n    .filter(form => isValidUUID(form['OMRS form.uuid']) &&\n      form['Workflow'] === 'WF2')\n    .map(form => form['OMRS form.uuid']);\n\n  // rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n  //   'dhis2 attribute id'\n  // ];\n\n  rest.orgUnit = \"sUpt0j2GmBD\"\n  //   rest.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n  //   'dhis2 attribute id'\n  // ];\n\n  rest.program = \"dWdzxMuKa8Z\"\n\n  // rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.patientProgramStage = \"vN61drMkGqO\"\n  rest.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n\nfn(state => {\n  state.genderOptions = state.optsMap\n    .filter(o => o['OptionSet name'] === 'Sex - Patient')\n    .reduce((acc, value) => {\n      acc[value['value.uuid - External ID']] = value['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": "97973103-5dca-457d-a893-bb280ff66962"
        },
        "Upsert-TEIs": {
          "id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "name": "Upsert TEIs",
          "body": "const buildPatientsUpsert = (state, patient, isNewPatient) => {\n  const { placeOflivingMap, genderOptions } = state;\n  const dateCreated = patient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find(i => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const enrollments = [\n    {\n      orgUnit: state.orgUnit,\n      program: state.program, // searching by MH program but change this EMR\n      programStage: state.patientProgramStage, //'MdTtRixaC1B',\n      enrollmentDate: dateCreated,\n    },\n  ];\n\n  const findOptsUuid = uuid =>\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value\n      ?.uuid ||\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value;\n\n  const findOptCode = optUuid =>\n    state.optsMap.find(o => o['value.uuid - External ID'] === optUuid)?.[\n      'DHIS2 Option Code'\n    ];\n\n  const patientMap = state.formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map(d => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: 'fa7uwpCKIwa',\n      value: patient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: 'Jt9BhFZkvP2',\n      value: patient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: 'P4wdYGkldeG', //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(patient.identifiers, state.dhis2PatientNumber) ||\n        findIdentifierByUuid(patient.identifiers, state.openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: 'ZBoxuExmxcZ', //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(patient.identifiers, state.openmrsAutoId),\n    },\n    {\n      attribute: 'AYbfTPYMNJH', //\"OpenMRS Patient UID\"\n      value: patient.uuid,\n    },\n    {\n      attribute: 'qptKDiv9uPl',\n      value: genderOptions[patient.person.gender],\n    },\n    {\n      attribute: 'T1iX2NuPyqS',\n      value: patient.person.age,\n    },\n    {\n      attribute: 'WDp4nVor9Z7',\n      value: patient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: 'rBtrjV1Mqkz', //Place of living\n      value: placeOflivingMap[patient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter(a => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter(a => a.value);\n  //console.log('standardAttr ::', JSON.stringify(standardAttr, null,2))\n  //console.log('filteredAttr ::', JSON.stringify(filteredAttr, null,2))\n\n  const payload = {\n    query: {\n      ou: state.orgUnit,\n      program: state.program,\n      filter: [`AYbfTPYMNJH:Eq:${patient.uuid}`], //upsert on omrs.patient.uid\n    },\n    data: {\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntityType: 'cHlzCA2MuEF',\n      attributes: [...filteredAttr, ...filteredStatusAttr],\n    },\n  };\n\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (isNewPatient) {\n    console.log('create enrollment');\n    payload.data.enrollments = enrollments;\n  }\n\n  return payload;\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\neach(\n  $.patients,\n  get(\n    'tracker/trackedEntities',\n    {\n      orgUnit: $.orgUnit,\n      filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],\n      program: $.program,\n    },\n    {},\n    async state => {\n      const patient = state.references.at(-1);\n      console.log(patient.uuid, 'patient uuid');\n\n      const isNewPatient = state.data.instances.length === 0;\n\n      state.patientsUpsert ??= [];\n      state.patientsUpsert.push(\n        buildPatientsUpsert(state, patient, isNewPatient)\n      );\n      await delay(2000);\n      return state;\n    }\n  )\n);\n\n// Upsert TEIs to DHIS2\neach(\n  $.patientsUpsert,\n  upsert('trackedEntityInstances', $.data.query, $.data.data)\n);\nfn(state => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    genderOptions,\n    identifiers,\n    ...next\n  } = state;\n\n  next.patientUuids = patients.map(p => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Encounters": {
          "id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "name": "Get Encounters",
          "body": "// Fetch all encounters\nhttp\n  .get('/ws/fhir2/R4/Encounter', {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then(state => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find(l => l.relation === 'next')\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split('/openmrs')[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then(state => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\nfn(state => {\n  console.log(\n    'Total # of encounters fetched: ',\n    state.allResponse?.entry?.length\n  );\n  // state.encounterUuids = state.allResponse?.entry?.map(p => p.resource.id);\n  state.patientUuids = [\n    ...new Set(\n      state.allResponse?.entry?.map(p =>\n        p.resource.subject.reference.replace('Patient/', '')\n      )\n    ),\n  ];\n\n  return state;\n});\n\n// Fetch patient encounters\neach(\n  $.patientUuids,\n  get('encounter', { patient: $.data, v: 'full' }).then(state => {\n    state.allEncounters ??= [];\n    state.allEncounters.push(\n      // v2FormsUuids are for mental health forms\n      // ...state.data.results.filter(e =>\n      //   state.v2FormUuids.includes(e?.form?.uuid)\n      // )\n      ...state.data.results.filter(e =>\n        state.formUuids.includes(e?.form?.uuid)\n      )\n    );\n\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map(formUuid =>\n      state.data.results\n        .filter(\n          e =>\n            e.auditInfo.dateCreated >= state.cursor &&\n            e?.form?.uuid === formUuid\n        )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    const encounters = filteredEncounters.map(pe => {\n      const isLatestForm = pe.find(e => {\n        return state.formMaps[e?.form?.uuid]?.syncType === 'latest'\n      })\n      if (isLatestForm) {\n        return [isLatestForm]\n      } else {\n        const allPatientEncounter = pe.filter(e => state.formMaps[e?.form?.uuid]?.syncType === 'all')\n        return allPatientEncounter\n      }\n    }).flat()\n\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n\n    return state;\n  })\n);\n\nfn(state => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map(\n      ({ uuid, patient, obs, form, encounterDatetime }) => ({\n        uuid,\n        patient,\n        obs,\n        form,\n        encounterDatetime,\n      })\n    )\n    console.log(next.encounters.length, '# of new encounters to sync to dhis2');\n  } else {\n    console.log('No encounters found for cursor: ', next.cursor);\n  }\n  next.allEncounters = next.allEncounters?.map(\n    ({ uuid, patient, obs, form, encounterDatetime }) => ({\n      uuid,\n      patient,\n      obs,\n      form,\n      encounterDatetime,\n    })\n  );\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n//TODO: Group the encounters by patient and then get the TEI for each patient\neach(\n  $.encounters,\n  get('tracker/trackedEntities', state=> ({\n    orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n    fields: '*,enrollments[*],enrollments[events[*]]',\n  })).then(async state => {\n    const encounter = state.references.at(-1);\n    console.log(encounter.patient.uuid, 'Encounter patient uuid');\n\n    const { trackedEntity, enrollments } = state.data?.instances?.[0] || {};\n    if (trackedEntity && enrollments) {\n      state.TEIs ??= {};\n      state.TEIs[encounter.patient.uuid] = {\n        trackedEntity,\n        events: enrollments[0]?.events,\n        enrollment: enrollments[0]?.enrollment,\n      };\n    }\n\n    await delay(2000);\n    return state;\n  })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Events": {
          "id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "name": "Create Events",
          "body": "// Create or update events for each encounter\n// create(\n//   'tracker',\n//   {\n//     events: state => {\n//       console.log(\n//         'Creating events for: ',\n//         JSON.stringify(state.eventsMapping, null, 2)\n//       );\n//       return state.eventsMapping;\n//     },\n//   },\n//   {\n//     params: {\n//       async: false,\n//       dataElementIdScheme: 'UID',\n//       importStrategy: 'CREATE_AND_UPDATE',\n//     },\n//   }\n// );\n\nconst findlatestAnswer = (encounters, conceptUuid) => {\n  const latestAnswer = encounters.reduce((acc, e) => {\n    const answer = e.obs.find(o => o.concept.uuid === conceptUuid);\n    if (answer) {\n      const personUuid = answer.person.uuid;\n      if (\n        !acc[personUuid] ||\n        new Date(answer.obsDatetime) > new Date(acc[personUuid].obsDatetime)\n      ) {\n        acc[personUuid] = answer;\n      }\n    }\n    return acc;\n  }, {});\n\n  return Object.values(latestAnswer);\n};\n\nfn(state => {\n  const {\n    encounters,\n    TEIs,\n    program,\n    orgUnit,\n    optsMap,\n    // Lighten state by removing unused properties\n    formMaps,\n    optionSetKey,\n    eventsMapping,\n    // encounterUuids,\n    formUuids,\n    references,\n    ...next\n  } = state;\n\n  const genderMap = optsMap\n    .filter(o => o['DHIS2 DE UID'] === 'qptKDiv9uPl')\n    .reduce((acc, obj) => {\n      acc[obj['value.display - Answers']] = obj['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  const latestGenderUpdate = findlatestAnswer(\n    encounters,\n    'ec42d68d-3e23-43de-b8c5-a03bb538e7c7'\n  );\n\n  const latestEducationUpdate = findlatestAnswer(\n    encounters,\n    'cc3a5a7a-abfe-4630-b0c0-c1275c6cbb54'\n  );\n\n  console.log({latestEducationUpdate})\n\n  const genderUpdated = latestGenderUpdate\n    .map(answer => {\n      const { trackedEntity } = TEIs[answer?.person?.uuid] || {};\n      if (!trackedEntity) {\n        console.log('No TEI found for person', answer.person.uuid);\n      }\n      if (trackedEntity) {\n        return {\n          trackedEntity,\n          program,\n          orgUnit,\n          trackedEntityType: 'cHlzCA2MuEF',\n          attributes: [\n            {\n              attribute: 'qptKDiv9uPl', //gender\n              value: genderMap[answer.value.display],\n            },\n            {\n              attribute: 'AYbfTPYMNJH', //OpenMRS Patient UID to use to upsert TEI\n              value: answer.person.uuid,\n            },\n          ],\n        };\n      }\n    })\n    .filter(Boolean)\n    .flat();\n\n  const educationUpdated = latestEducationUpdate\n    .map(answer => {\n      const { trackedEntity } = TEIs[answer?.person?.uuid] || {};\n      if (!trackedEntity) {\n        console.log('No TEI found for person', answer.person.uuid);\n      }\n      if (trackedEntity) {\n        return {\n          trackedEntity,\n          program, \n          orgUnit,\n          trackedEntityType: 'cHlzCA2MuEF',\n          attributes: [\n            {\n              attribute: 'Dggll4f9Efj', //education\n              value: optsMap.find(\n                o => o['value.display - Answers'] === answer.value.display\n              )?.['DHIS2 Option Code'], //map to DHIS2 Option Code in optsMap\n            },\n          ],\n        };\n      }\n    })\n    .filter(Boolean)\n    .flat();\n\n  return {\n    ...next,\n    teisToUpdate: [...genderUpdated, ...educationUpdated],\n  };\n});\n\nfnIf(\n  state => state.teisToUpdate.length === 0,\n  ({ lastRunDateTime }) => ({ lastRunDateTime })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Update-TEIs": {
          "id": "2b12eded-b70a-4f94-8fd2-5fe07a533461",
          "name": "Update TEIs",
          "body": "// Update TEIs\ncreate(\n  'tracker',\n  { trackedEntities: $.teisToUpdate },\n  { params: { async: false, importStrategy: 'UPDATE' } }\n);\n\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Event-Mappings": {
          "id": "e62747ec-9cdf-4613-8400-780605fb569e",
          "name": "Event Mappings",
          "body": "const getRangePhq = input => {\n  if (input >= 20) return '>20';\n  if (input >= 15) return '15_19';\n  if (input >= 10) return '10_14';\n  if (input >= 5) return '5_9';\n  return '0_4';\n};\nconst processAnswer = (\n  answer,\n  conceptUuid,\n  dataElement,\n  optsMap,\n  optionSetKey,\n  formUuid\n) => {\n  if (typeof answer.value === 'object') {\n    const isDiagnosisByPsychologist =\n      conceptUuid === '722dd83a-c1cf-48ad-ac99-45ac131ccc96' &&\n      dataElement === 'pN4iQH4AEzk';\n    if (isDiagnosisByPsychologist) {\n      console.log('Yes done by psychologist..');\n      return '' + answer.value.uuid === '278401ee-3d6f-4c65-9455-f1c16d0a7a98';\n    }\n\n    const isTrueOnlyQuestion =\n      conceptUuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9' &&\n      dataElement === 'G0hLyxqgcO7';\n\n    if (isTrueOnlyQuestion) {\n      console.log('True only question detected..', dataElement);\n      return answer.value.uuid === '681cf0bc-5213-492a-8470-0a0b3cc324dd'\n        ? 'true'\n        : undefined;\n    }\n\n    const optionKey = `${formUuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      o =>\n        o['value.uuid - External ID'] === answer.value.uuid &&\n        o['DHIS2 Option Set UID'] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.['DHIS2 Option Code'] ||\n      opt?.['DHIS2 Option name'] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    // console.log(`matchingOption value: \"${matchingOption}\" for`);\n    // console.log({\n    //   optionKey,\n    //   conceptUid: answer.concept.uuid,\n    //   'answer.value.uid': answer.value.uuid,\n    //   'answer.value.display': answer.value.display,\n    //   matchingOption,\n    //   matchingOptionSet,\n    // });\n\n    if (matchingOption === 'FALSE' || matchingOption === 'No') {\n      return 'false';\n    }\n    if (matchingOption === 'TRUE' || matchingOption === 'Yes') {\n      return 'true';\n    }\n\n    return matchingOption || '';\n  }\n\n  const PHQ9_CONCEPT_UUIDS = [\n    '5f3d618e-5c89-43bd-8c79-07e4e98c2f23',\n    '6545b874-f44d-4d18-9ab1-7a8bb21c0a15',\n  ];\n  const isPhq9Score =\n    typeof answer.value === 'number' &&\n    PHQ9_CONCEPT_UUIDS.includes(conceptUuid);\n  if (isPhq9Score) {\n    return getRangePhq(answer.value);\n  }\n  return answer.value;\n};\n\nconst processNoAnswer = (encounter, conceptUuid, dataElement) => {\n  const isEncounterDate =\n    conceptUuid === 'encounter-date' &&\n    ['CXS4qAJH2qD', 'I7phgLmRWQq', 'yUT7HyjWurN', 'EOFi7nk2vNM'].includes(\n      dataElement\n    );\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace('+0000', '');\n  }\n  return '';\n};\n\nconst findAnswerByConcept = (encounter, conceptUuid) => {\n  const answer = encounter.obs.find(o => o.concept.uuid === conceptUuid);\n  return answer?.value?.display;\n};\n\n// Helper functions for finding observations\nconst findObsByConcept = (encounter, conceptUuid) =>\n  encounter.obs.find(o => o.concept.uuid === conceptUuid);\n\n// Concept UUIDs\nconst CONCEPTS = {\n  BASELINE_CONCEPT: '22809b19-54ca-4d88-8d26-9577637c184e',\n  PRIORITY_1: '45b39cbf-0fb2-4682-8544-8aaf3e07a744',\n  PRIORITY_2: 'ee1b7973-e931-494e-a9cb-22b814b4d8ed',\n  PRIORITY_3: '92a92f62-3ff6-4944-9ea9-a7af23949bad',\n  OTHER_SPECIFY: 'e08d532b-e56c-43dc-b831-af705654d2dc',\n  PRECIPITATING_EVENT_1: 'd5e3d927-f7ce-4fdd-ac4e-6ad0b510b608',\n  PRECIPITATING_EVENT_2: '54a9b20e-bce5-4d4a-8c9c-e0248a182586',\n  PRECIPITATING_EVENT_3: 'e0d4e006-85b5-41cb-8a21-e013b1978b8b',\n  PRECIPITATING_EVENT_OTHER: '790b41ce-e1e7-11e8-b02f-0242ac130002',\n};\n\n// DHIS2 Data Elements\nconst DATA_ELEMENTS = {\n  BASELINE: 'pN4iQH4AEzk',\n  PRIORITY_1_OTHER: 'pj5hIE6iyAR',\n  PRIORITY_2_OTHER: 'Em5zvpdd5ha',\n  PRIORITY_3_OTHER: 'aWsxYkJR8Ua',\n  PRECIPITATING_EVENT_1_OTHER: 'm8qis4iUOTo',\n  PRECIPITATING_EVENT_2_OTHER: 'mNK6CITsdWD',\n  PRECIPITATING_EVENT_3_OTHER: 'jocqmYW394G',\n};\n\n// Prepare DHIS2 data model for create events\nfn(state => {\n  const handleMissingRecord = (data, state) => {\n    const { uuid, display } = data.patient;\n\n    console.log(uuid, 'Patient is missing trackedEntity && enrollment');\n\n    state.missingRecords ??= {};\n    state.missingRecords[uuid] ??= {\n      encounters: [],\n      patient: display,\n    };\n\n    state.missingRecords[uuid].encounters.push(data.uuid);\n  };\n\n  state.eventsMapping = state.encounters\n    .map(encounter => {\n      const form = state.formMaps[encounter.form.uuid];\n      if (!form?.dataValueMap) {\n        return null;\n      }\n      const { trackedEntity, enrollment, events } =\n        state.TEIs[encounter.patient.uuid] || {};\n\n      if (!trackedEntity || !enrollment) {\n        handleMissingRecord(encounter, state);\n        return null;\n      }\n      let formDataValues = Object.keys(form.dataValueMap)\n        .map(dataElement => {\n          const conceptUuid = form.dataValueMap[dataElement];\n          const obsAnswer = encounter.obs.find(\n            o => o.concept.uuid === conceptUuid\n          );\n          const answer = obsAnswer;\n          const value = answer\n            ? processAnswer(\n                answer,\n                conceptUuid,\n                dataElement,\n                state.optsMap,\n                state.optionSetKey,\n                encounter.form.uuid\n              )\n            : processNoAnswer(encounter, conceptUuid, dataElement);\n          if (value) {\n            return { dataElement, value };\n          }\n        })\n        .filter(d => d);\n\n      let customMapping = [];\n\n      if (\n        encounter.form.description.includes('F11-Family Planning Assessment')\n      ) {\n        const answers = encounter.obs.filter(\n          o => o.concept.uuid === '30b2d692-6a05-401f-8ede-13e027b8a436'\n        );\n\n        const mappingConfig = [\n          { dataElement: 'DYTLOoEKRas', index: 0 },\n          { dataElement: 'ddTrzQtQUGz', index: 1 },\n          { dataElement: 'fuNs3Uzspsm', index: 2 },\n        ];\n\n        mappingConfig.forEach(config => {\n          if (answers[config.index]) {\n            customMapping.push({\n              dataElement: config.dataElement,\n              value: state.optsMap.find(\n                o =>\n                  o['value.display - Answers'] ===\n                  answers[config.index]?.value?.display\n              )?.['DHIS2 Option Code'],\n            });\n          }\n        });\n      }\n      if (encounter.form.description.includes('F13-PNC')) {\n        const answers = encounter.obs.filter(\n          o => o.concept.uuid === '22809b19-54ca-4d88-8d26-9577637c184e'\n        );\n\n        // Define mapping configurations\n        const mappingConfig = [\n          { dataElement: 'ErtqJsZINyX', index: 0 },\n          { dataElement: 'wWAMdsjks50', index: 1 },\n          { dataElement: 'Dh1ocjojOrC', index: 2 },\n          { dataElement: 'KR03PHkzVw1', index: 3 },\n          { dataElement: 'kDA55sgLAwY', index: 4 },\n        ];\n\n        // Only add mappings for answers that exist\n        mappingConfig.forEach(config => {\n          if (answers[config.index] !== undefined) {\n            customMapping.push({\n              dataElement: config.dataElement,\n              value: state.optsMap.find(\n                o =>\n                  o['value.display - Answers'] ===\n                  answers[config.index]?.value?.display\n              )?.['DHIS2 Option Code'],\n            });\n          }\n        });\n      }\n\n      if (encounter.form.description.includes('F29-MHPSS Baseline v2')) {\n        customMapping.push({\n          dataElement: DATA_ELEMENTS.BASELINE,\n          value: findAnswerByConcept(encounter, CONCEPTS.BASELINE_CONCEPT)\n            ? true\n            : false,\n        });\n\n        const priority1 = findObsByConcept(encounter, CONCEPTS.PRIORITY_1);\n        if (priority1 && priority1?.value?.display === 'Other') {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_1_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const priority2 = findObsByConcept(encounter, CONCEPTS.PRIORITY_2);\n        if (priority2 && priority2?.value?.display === 'Other') {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_2_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const priority3 = findObsByConcept(encounter, CONCEPTS.PRIORITY_3);\n        if (priority3 && priority3?.value?.display === 'Other') {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_3_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const precipitatingEvent1 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_1\n        );\n        const otherValue = encounter.obs.find(o =>\n          o.display.includes('Past / Precipitating Events - Other')\n        );\n\n        if (\n          precipitatingEvent1 &&\n          precipitatingEvent1?.value?.uuid === otherValue?.value?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            o => o['value.uuid - External ID'] === otherValue?.value?.uuid\n          );\n\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_1_OTHER,\n            value: opt?.['DHIS2 Option Code'],\n          });\n        }\n\n        const precipitatingEvent2 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_2\n        );\n\n        if (\n          precipitatingEvent2 &&\n          precipitatingEvent2?.value?.uuid === otherValue?.value?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            o => o['value.uuid - External ID'] === otherValue?.value?.uuid\n          );\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_2_OTHER,\n            value: opt?.['DHIS2 Option Code'],\n          });\n        }\n\n        const precipitatingEvent3 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_3\n        );\n\n        if (\n          precipitatingEvent3 &&\n          precipitatingEvent3?.value?.uuid === otherValue?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            o => o['value.uuid - External ID'] === otherValue?.value?.uuid\n          );\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_3_OTHER,\n            value: opt?.['DHIS2 Option Code'],\n          });\n        }\n      }\n\n      if (encounter.form.description.includes('F30-MHPSS Follow-up v2')) {\n        const missedSession = encounter => {\n          if (\n            encounter.obs.find(\n              o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n            )?.value?.display === 'No'\n          ) {\n            return encounter.encounterDatetime.replace('+0000', '');\n          }\n          const lastFollowupEncounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F30-MHPSS Follow-up v2') &&\n              e.patient.uuid === encounter.patient.uuid &&\n              e.uuid !== encounter.uuid &&\n              e.obs.find(\n                o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n              )?.value?.display === 'No'\n          );\n\n          if (lastFollowupEncounter) {\n            return lastFollowupEncounter.encounterDatetime.replace('+0000', '');\n          }\n\n          const f29Encounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F29-MHPSS Baseline v2') &&\n              e.patient.uuid === encounter.patient.uuid\n          );\n          if (f29Encounter) {\n            return f29Encounter.encounterDatetime.replace('+0000', '');\n          }\n          return undefined;\n        };\n        const mapping = [\n          {\n            dataElement: 'jtKIoKducvE',\n            value: missedSession(encounter),\n          },\n        ];\n        customMapping.push(...mapping);\n      }\n      if (encounter.form.description.includes('F32-mhGAP Follow-up v2')) {\n        const missedSession = encounter => {\n          if (\n            encounter.obs.find(\n              o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n            )?.value?.display === 'No'\n          ) {\n            return encounter.encounterDatetime.replace('+0000', '');\n          }\n          const lastFollowupEncounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F32-mhGAP Follow-up v2') &&\n              e.patient.uuid === encounter.patient.uuid &&\n              e.uuid !== encounter.uuid &&\n              e.obs.find(\n                o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n              )?.value?.display === 'No'\n          );\n\n          if (lastFollowupEncounter) {\n            return lastFollowupEncounter.encounterDatetime.replace('+0000', '');\n          }\n\n          const f31Encounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F31-mhGAP Baseline v2') &&\n              e.patient.uuid === encounter.patient.uuid\n          );\n\n          if (f31Encounter) {\n            return f31Encounter.encounterDatetime.replace('+0000', '');\n          }\n        };\n        const changeInDiagnosis = encounter => {\n          const patientUuid = encounter.patient.uuid;\n          const previousChangeInDiagnosis = state.allEncounters\n            .find(\n              e =>\n                e.patient.uuid === patientUuid &&\n                e.form.description.includes('F32-mhGAP Follow-up v2') &&\n                encounter.uuid !== e.uuid\n            )\n            ?.obs.find(\n              o => o.concept.uuid === '22809b19-54ca-4d88-8d26-9577637c184e'\n            )?.value?.display;\n\n          const currentChangeInDiagnosis = encounter.obs.find(\n            o => o.concept.uuid === '22809b19-54ca-4d88-8d26-9577637c184e'\n          )?.value?.display;\n\n          if (\n            previousChangeInDiagnosis &&\n            previousChangeInDiagnosis !== currentChangeInDiagnosis\n          ) {\n            return true;\n          }\n\n          return false;\n        };\n        const mapping = [\n          {\n            dataElement: 'fMqEZpiRVZV',\n            value: missedSession(encounter),\n          },\n          {\n            dataElement: 'XBVRRpgkEvE',\n            value: changeInDiagnosis(encounter),\n          },\n        ];\n        customMapping.push(...mapping);\n      }\n      if (\n        encounter.form.description.includes('F33-MHPSS Closure v2') ||\n        encounter.form.description.includes('F34-mhGAP Closure v2')\n      ) {\n        const lastScore = encounter.obs.find(\n          o => o.concept.uuid === '90b3d09c-d296-44d2-8292-8e04377fe027'\n        )?.value;\n\n        const filterOutScore = state.allEncounters.filter(e => {\n          const obs = e.obs.find(\n            o => o.concept.display === 'Mental Health Outcome Scale'\n          );\n          return e.uuid !== encounter.uuid && obs && obs?.value !== 0;\n        });\n\n        const firstScore = filterOutScore\n          .sort((a, b) => {\n            return (\n              new Date(a.encounterDatetime) - new Date(b.encounterDatetime)\n            );\n          })\n          .at(0)\n          ?.obs.find(\n            o => o.concept.display === 'Mental Health Outcome Scale'\n          )?.value;\n\n        customMapping.push({\n          dataElement: 'b8bjS7ah8Qi',\n          value: lastScore - firstScore,\n        });\n      }\n      formDataValues = formDataValues.filter(\n        item =>\n          item.dataElement !== DATA_ELEMENTS.PRIORITY_1_OTHER &&\n          item.dataElement !== 'KjgDauY9v4J' &&\n          item.dataElement !== 'DYTLOoEKRas'\n      );\n\n      return {\n        event: events.find(e => e.programStage === form.programStage)?.event,\n        program: state.formMaps[encounter.form.uuid]?.programId,\n        orgUnit: state.formMaps[encounter.form.uuid]?.orgUnit,\n        trackedEntity,\n        enrollment,\n        occurredAt: encounter.encounterDatetime.replace('+0000', ''),\n        programStage: form.programStage,\n        dataValues: [...formDataValues, ...customMapping],\n      };\n    })\n    .filter(Boolean);\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": null
        }
      },
      "edges": {
        "cron->Get-Patients": {
          "enabled": true,
          "id": "57a8ef61-a75f-4af2-8152-371d871e21bb",
          "target_job_id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "source_trigger_id": "a30ec52a-4ecc-4dbe-8b44-61c779f6f879",
          "condition_type": "always"
        },
        "Mappings->Upsert-TEIs": {
          "enabled": true,
          "id": "cec97e34-8c98-473c-87f0-f68391d38f3b",
          "target_job_id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "source_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "c051248f-741e-4eba-8880-bb6a4ddf8883",
          "target_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "source_job_id": "788df7f4-5ed3-46bd-8479-778e18c08235",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Mappings->Get-Encounters": {
          "enabled": true,
          "id": "e48fdb3b-7287-4572-8888-ea1b1206b23d",
          "target_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "source_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "33cdeb8c-524d-4a9a-8530-647907096741",
          "target_job_id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "source_job_id": "91bf81d1-e0f1-49c4-88c6-7a01344b3917",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state.encounters\n"
        },
        "Create-Events->Update-TEIs": {
          "enabled": true,
          "id": "457fb90b-4b2d-4090-8a95-8539e781044c",
          "target_job_id": "2b12eded-b70a-4f94-8fd2-5fe07a533461",
          "source_job_id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "condition_type": "js_expression",
          "condition_label": "has-gender-updated",
          "condition_expression": "state?.teisToUpdate?.length > 0\n"
        },
        "Get-Patients->Mappings": {
          "enabled": true,
          "id": "e2f4678d-270b-430c-82f6-b5553c641def",
          "target_job_id": "6f787076-7706-4104-834e-29340029c5ee",
          "source_job_id": "d99463fe-d81f-4aea-8066-49a543874dee",
          "condition_type": "on_job_success"
        },
        "Get-TEIs-and-Map-Answers->Event-Mappings": {
          "enabled": true,
          "id": "f0dcf95b-3694-4616-809a-1f4fc990c049",
          "target_job_id": "e62747ec-9cdf-4613-8400-780605fb569e",
          "source_job_id": "e9d6d118-ef3c-43a7-844e-1cb6bdf29823",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.TEIs && !state.errors\n"
        },
        "Event-Mappings->Create-Events": {
          "enabled": true,
          "id": "75db1f32-bff0-4db5-8265-12682e7097f0",
          "target_job_id": "6097052b-14ed-4ec9-88dd-3b5b7a156819",
          "source_job_id": "e62747ec-9cdf-4613-8400-780605fb569e",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors && !state.testMode\n"
        }
      }
    },
    "wf3-omrs-dhis2": {
      "id": "fb49b01d-dba8-420a-9f4c-b9ca20984ee5",
      "name": "wf3-omrs-dhis2",
      "inserted_at": "2025-07-29T10:03:29.011139Z",
      "lock_version": 37,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "cd9ea573-fb86-4ec4-8c39-200c7de22dfb",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Mappings-from-Collection": {
          "id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "name": "Get Mappings from Collection",
          "body": "const isValidUUID = id => {\n  if (!id || typeof id !== 'string') return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\ncollections.get('mosul-metadata-mappings-staging').then(state => {\n  state.optsMap = state.data\n    .filter(i => i.key.includes('optsMap-value-'))\n    .map(i => i.value);\n\n  state.identifiers = state.data\n    .filter(i => i.key.includes('identifiers-value-'))\n    .map(i => i.value);\n  state.syncedAt = state.data.find(i => i.key === 'syncedAt')?.value;\n  state.formMetadata = state.data.find(i => i.key === 'formMetadata')?.value; // filter form maps where formmap.workflow == \"WF3\"\n  state.placeOflivingMap = state.data.find(i => i.key === 'placeOflivingMap')?.value;\n  state.sourceFile = state.data.filter(i => i.key === 'sourceFile')?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    i => i.key === 'fileDateModified'\n  )?.[0]?.value;\n  state.optionSetKey = state.data.filter(\n    i => i.key === 'optionSetKey'\n  )?.[0]?.value;\n  state.formMaps = state.data.find(i => i.key === 'formMaps')?.value;\n  delete state.data\n  delete state.references\n  return state;\n});\n\n\nfn(state => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      form =>\n        isValidUUID(form['OMRS form.uuid']) &&\n        form['OMRS Form Version'] === 'v4-2025'\n    )\n    .map(form => form['OMRS form.uuid']);\n  rest.formUuids = formMetadata\n    .filter(form => isValidUUID(form['OMRS form.uuid']) &&\n      form['Workflow'] === 'WF3')\n    .map(form => form['OMRS form.uuid']);\n\n  // rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n  //   'dhis2 attribute id'\n  // ];\n\n  rest.orgUnit = \"sUpt0j2GmBD\"\n\n\n  rest.program = \"dWdzxMuKa8Z\"\n\n  rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n\n\nfn(state => {\n  state.genderOptions = state.optsMap\n    .filter(o => o['OptionSet name'] === 'Sex - Patient')\n    .reduce((acc, value) => {\n      acc[value['value.uuid - External ID']] = value['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.3.0",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        },
        "Get-Encounters": {
          "id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "name": "Get Encounters",
          "body": "// Fetch all encounters\nhttp\n  .get('/ws/fhir2/R4/Encounter', {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then(state => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find(l => l.relation === 'next')\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split('/openmrs')[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then(state => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\n\n\nfn(state => {\n  console.log(\n    'Total # of encounters fetched: ',\n    state.allResponse?.entry?.length\n  );\n\n  state.patientUuids = [\n    ...new Set(\n      state.allResponse?.entry?.map(p =>\n        p.resource.subject.reference.replace('Patient/', '')\n      )\n    ),\n  ];\n\n  return state;\n});\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n// Fetch patient encounters\neach(\n  $.patientUuids,\n  get('encounter', { patient: $.data, v: 'full' }).then(state => {\n\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map(formUuid =>\n      state?.data?.results.filter(\n        e =>\n          e.auditInfo.dateCreated >= state.cursor &&\n          e?.form?.uuid === formUuid\n      )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    const encounters = filteredEncounters.map(e => e[0]).filter(e => e);\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n    delay(1500)\n\n    return state;\n  })\n);\n\nfn(state => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map(\n      ({ uuid, patient, obs, form, encounterDatetime }) => ({\n        uuid,\n        patient,\n        obs,\n        form,\n        encounterDatetime,\n      })\n    );\n    console.log(next.encounters.length, '# of new encounters to sync to dhis2');\n  } else {\n    console.log('No encounters found for cursor: ', next.cursor);\n  }\n\n\n  // Group encounters by patient UUID\n  next.encountersByPatient = next.encounters?.reduce((acc, obj) => {\n    const key = obj.patient.uuid;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Create-Events": {
          "id": "2d668d2e-c513-4b58-88bb-8a2d3261d9a2",
          "name": "Create Events",
          "body": "// Create or update events for each encounter create(\ncreate(\"tracker\",\n  {\n    events: (state) => {\n      console.log(\n        \"Creating events for: \",\n        JSON.stringify(state.eventsMapping, null, 2)\n      );\n      return state.eventsMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: \"UID\",\n      importStrategy: \"CREATE_AND_UPDATE\",\n    },\n  }\n);\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Custom-Logic-for-Events": {
          "id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "name": "Custom Logic for Events",
          "body": "const f08Form = \"f0bb3bf7-4e0a-3545-afce-a6b33b0378e4\";\nconst f09Form = \"6e1e468b-00b1-3e5d-a8cf-00f45b8fe261\";\n\nconst processAnswer = (\n  answer,\n  conceptUuid,\n  dataElement,\n  optsMap,\n  optionSetKey\n) => {\n  if (typeof answer.value === \"object\") {\n    const optionKey = `${answer.formUuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      (o) =>\n        o[\"value.uuid - External ID\"] === answer.value.uuid &&\n        o[\"DHIS2 Option Set UID\"] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.[\"DHIS2 Option Code\"] ||\n      opt?.[\"DHIS2 Option name\"] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    // console.log(`matchingOption value: \"${matchingOption}\" for`);\n    // console.log({\n    //   optionKey,\n    //   conceptUid: answer.concept.uuid,\n    //   'answer.value.uid': answer.value.uuid,\n    //   'answer.value.display': answer.value.display,\n    //   matchingOption,\n    //   matchingOptionSet,\n    // });\n\n    if (matchingOption === \"FALSE\" || matchingOption === \"No\") {\n      return \"false\";\n    }\n    if (matchingOption === \"TRUE\" || matchingOption === \"Yes\") {\n      return \"true\";\n    }\n\n    return matchingOption || \"\";\n  }\n\n  return answer.value;\n};\n\nconst processNoAnswer = (encounter, conceptUuid, dataElement) => {\n  const isEncounterDate =\n    conceptUuid === \"encounter-date\" &&\n    [\"CXS4qAJH2qD\", \"I7phgLmRWQq\", \"yUT7HyjWurN\", \"EOFi7nk2vNM\"].includes(\n      dataElement\n    );\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace(\"+0000\", \"\");\n  }\n  return \"\";\n};\n\nconst findAnswerByConcept = (encounter, conceptUuid) => {\n  const answer = encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n  return answer?.value?.display;\n};\n\n// Helper functions for finding observations\nconst findObsByConcept = (encounter, conceptUuid) =>\n  encounter.obs.find((o) => o.concept.uuid === conceptUuid);\n\n// Helper function to process dataValues from an encounter\nfunction processEncounterDataValues(encounter, form, state) {\n  return Object.keys(form.dataValueMap)\n    .map((dataElement) => {\n      const conceptUuid = form.dataValueMap[dataElement];\n      const obsAnswer = encounter.obs.find(\n        (o) => o.concept.uuid === conceptUuid\n      );\n\n      const answer = {\n        ...obsAnswer,\n        formUuid: encounter.form.uuid,\n      };\n      const value = answer\n        ? processAnswer(\n          answer,\n          conceptUuid,\n          dataElement,\n          state.optsMap,\n          state.optionSetKey\n        )\n        : processNoAnswer(encounter, conceptUuid, dataElement);\n\n      return { dataElement, value };\n    })\n    .filter((d) => d);\n}\n\nfn((state) => {\n  state.eventsMapping = Object.entries(state.encountersByPatient)\n    .map(([patientUuid, encounters]) => {\n      // Skip if we don't have exactly 2 encounters\n      if (encounters.length !== 2) return null;\n\n\n      // Get the forms for both encounters\n      const form1 = state.formMaps[encounters[0].form.uuid];\n      const form2 = state.formMaps[encounters[1].form.uuid];\n\n      // Skip if either form doesn't have dataValueMap\n      if (!form1?.dataValueMap || !form2?.dataValueMap) return null;\n      const f8Encounter = encounters.find(e => e.form.uuid === f08Form)\n      const obsDatetime = findObsByConcept(f8Encounter, '7f00c65d-de60-467a-8964-fe80c7a85ef0')?.obsDatetime\n\n      const datePart = obsDatetime.substring(0, 10);\n      const timePart = obsDatetime.substring(11, 19);\n      const f8Mapping = [\n        {\n          dataElement: \"yprMS34o8s3\",\n          value: f8Encounter.encounterDatetime\n        },\n        {\n          dataElement: \"iQio7NYSA3m\",\n          value: datePart\n        },\n        {\n          dataElement: \"yprMS34o8s3\",\n          value: timePart\n        }\n      ]\n\n\n      const tei = state.TEIs[patientUuid];\n      console.log({ tei, patientUuid })\n\n      const attributeMap = {\n        \"Lg1LrNf9LQR\": \"qptKDiv9uPl\",\n        \"OVo3FxLURtH\": \"k26cdlS78i9\",\n        \"f3n6kIB9IbI\": \"Rv8WM2mTuS5\",\n        \"oc9zlhOoWmP\": \"YUIQIA2ClN6\",\n        \"DbyD9bbGIvE\": \"Qq6xQ2s6LO8\",\n        \"fiPFww1viBB\": \"rBtrjV1Mqkz\",\n        \"FsL5BjQocuo\": \"Xvzc9e0JJmp\"\n      };\n\n      const f9Mapping = Object.entries(attributeMap)\n        .map(([dataElement, attributeId]) => {\n          const value = tei?.attributes?.find(attr => attr.attribute === attributeId)?.value;\n\n          return { dataElement, value };\n        })\n        .filter(Boolean);\n\n      // Combine dataValues from both encounters\n      const formDataValues = [\n        ...f8Mapping,\n        ...f9Mapping,\n        ...processEncounterDataValues(encounters[0], form1, state),\n        ...processEncounterDataValues(encounters[1], form2, state),\n      ].filter(d => d.value)\n\n      // Use properties from the first encounter for the event metadata\n      // (or choose which encounter to use for each field)\n      return {\n        program: form1.programId,\n        orgUnit: form1.orgUnit,\n        occurredAt: encounters[0].encounterDatetime.replace(\"+0000\", \"\"),\n        programStage: form1.programStage,\n        dataValues: formDataValues,\n        trackedEntityInstance: patientUuid,\n      };\n    })\n    .filter(Boolean);\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": null
        },
        "Get-Patients": {
          "id": "51485ee3-05c2-4690-8da6-9b962b6c19d5",
          "name": "Get Patients",
          "body": "// Enable test mode\nconst testMode = false\n\ncursor($.lastRunDateTime || $.manualCursor || '2025-03-20T06:01:24.000Z');\n\ncursor('today', {\n  key: 'lastRunDateTime',\n  format: c => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: 'IQ', v: 'full', includeVoide: true, limit: '100' });\n\nfn(state => {\n  const { cursor, data, lastRunDateTime } = state;\n  console.log('Filtering patients since cursor:', cursor);\n\n  const patients = data.results.filter(({ auditInfo }) => {\n    const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n    return lastModified > cursor;\n  });\n  console.log('# of patients to sync to dhis2 ::', patients.length);\n  console.log(\n    'uuids of patients to sync to dhis2 ::',\n    patients.map(p => p.uuid)\n  );\n\n  return { cursor, lastRunDateTime, patients, testMode };\n});\n\n// get patient - log number of patient that are fetched\n\n// get collections neccessary for patient mapping\n\n// map patient here - this will be passed down to next step\n\n// delete the initial patient object and only pass on the mapped one\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Upsert-TEIs": {
          "id": "f628007a-5a2c-463f-9de3-d2e465f95aae",
          "name": "Upsert TEIs",
          "body": "const buildPatientsUpsert = (state, patient, isNewPatient) => {\n  const { placeOflivingMap, genderOptions } = state;\n  const dateCreated = patient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find(i => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const enrollments = [\n    {\n      orgUnit: state.orgUnit,\n      program: state.program, // searching by MH program but change this EMR\n      programStage: state.patientProgramStage, //'MdTtRixaC1B',\n      enrollmentDate: dateCreated,\n    },\n  ];\n\n  const findOptsUuid = uuid =>\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value\n      ?.uuid ||\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value;\n\n  const findOptCode = optUuid =>\n    state.optsMap.find(o => o['value.uuid - External ID'] === optUuid)?.[\n      'DHIS2 Option Code'\n    ];\n\n  const patientMap = state.formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map(d => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const standardAttr = [\n    {\n      attribute: 'fa7uwpCKIwa',\n      value: patient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: 'Jt9BhFZkvP2',\n      value: patient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: 'P4wdYGkldeG', //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(patient.identifiers, state.dhis2PatientNumber) ||\n        findIdentifierByUuid(patient.identifiers, state.openmrsAutoId), //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: 'ZBoxuExmxcZ', //MSF ID ==> \"OpenMRS Patient Number\"\n      value: findIdentifierByUuid(patient.identifiers, state.openmrsAutoId),\n    },\n    {\n      attribute: 'AYbfTPYMNJH', //\"OpenMRS Patient UID\"\n      value: patient.uuid,\n    },\n    {\n      attribute: 'qptKDiv9uPl',\n      value: genderOptions[patient.person.gender],\n    },\n    {\n      attribute: 'T1iX2NuPyqS',\n      value: patient.person.age,\n    },\n    {\n      attribute: 'WDp4nVor9Z7',\n      value: patient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: 'rBtrjV1Mqkz', //Place of living\n      value: placeOflivingMap[patient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter(a => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter(a => a.value);\n  //console.log('standardAttr ::', JSON.stringify(standardAttr, null,2))\n  //console.log('filteredAttr ::', JSON.stringify(filteredAttr, null,2))\n\n  const payload = {\n    query: {\n      ou: state.orgUnit,\n      program: state.program,\n      filter: [`AYbfTPYMNJH:Eq:${patient.uuid}`], //upsert on omrs.patient.uid\n    },\n    data: {\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntityType: 'cHlzCA2MuEF',\n      attributes: [...filteredAttr, ...filteredStatusAttr],\n    },\n  };\n\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (isNewPatient) {\n    console.log('create enrollment');\n    payload.data.enrollments = enrollments;\n  }\n\n  return payload;\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\neach(\n  $.patients,\n  get(\n    'tracker/trackedEntities',\n    {\n      orgUnit: $.orgUnit,\n      filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],\n      program: $.program,\n    },\n    {},\n    async state => {\n      const patient = state.references.at(-1);\n      console.log(patient.uuid, 'patient uuid');\n\n      const isNewPatient = state.data.instances.length === 0;\n\n      state.patientsUpsert ??= [];\n      state.patientsUpsert.push(\n        buildPatientsUpsert(state, patient, isNewPatient)\n      );\n      await delay(2000);\n      return state;\n    }\n  )\n);\n\n// Upsert TEIs to DHIS2\neach(\n  $.patientsUpsert,\n  upsert('trackedEntityInstances', $.data.query, $.data.data)\n);\nfn(state => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    genderOptions,\n    identifiers,\n    ...next\n  } = state;\n\n  next.patientUuids = patients.map(p => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "7a1831ef-a388-4565-bf44-d603fdd19871",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n//TODO: Group the encounters by patient and then get the TEI for each patient\neach(\n  $.encounters,\n  get('tracker/trackedEntities', state => ({\n    orgUnit: $.orgUnit,\n    program: $.program,\n    // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n    filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n    fields: '*,enrollments[*],enrollments[events[*]], attributes[*]',\n  })).then(async state => {\n    const encounter = state.references.at(-1);\n    console.log(encounter.patient.uuid, 'Encounter patient uuid');\n\n    const { trackedEntity, enrollments, attributes } = state.data?.instances?.[0] || {};\n    if (trackedEntity && enrollments) {\n      state.TEIs ??= {};\n      state.TEIs[encounter.patient.uuid] = {\n        trackedEntity,\n        events: enrollments[0]?.events,\n        enrollment: enrollments[0]?.enrollment,\n        attributes\n      };\n    }\n\n    await delay(2000);\n    return state;\n  })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Tie": {
          "id": "47c1397c-a146-4511-bada-7ab0bd07b123",
          "name": "Get Tie",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst patientUid = \"d464433d-41d5-482f-808c-7fe364847352\"\n//TODO: Group the encounters by patient and then get the TEI for each patient\nget('tracker/trackedEntities', state => ({\n  orgUnit: \"sUpt0j2GmBD\",\n  program: \"dWdzxMuKa8Z\",\n  // orgUnit: state.formMaps[state.data.form.uuid].orgUnit, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  // program: state.formMaps[state.data.form.uuid].programId, //TODO: the org unit and program should be fetched from fromMap by mapping encounter.form.uuid\n  filter: [`AYbfTPYMNJH:Eq:${patientUid}`],\n  fields: '*,enrollments[*],enrollments[events[*]], attributes[*]',\n})).then(async state => {\n  \n  console.log(patientUid, 'Encounter patient uuid');\n\n  const { trackedEntity, enrollments, attributes } = state.data?.instances?.[0] || {};\n  if (trackedEntity && enrollments) {\n    state.TEIs ??= {};\n    state.TEIs[patientUid] = {\n      trackedEntity,\n      events: enrollments[0]?.events,\n      enrollment: enrollments[0]?.enrollment,\n      attributes\n    };\n  }\n\n  await delay(2000);\n  return state;\n})\n",
          "adaptor": "@openfn/language-dhis2@7.1.3",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        }
      },
      "edges": {
        "Custom-Logic-for-Events->Create-Events": {
          "enabled": true,
          "id": "168e2969-4f85-4c05-843c-445ca7102086",
          "target_job_id": "2d668d2e-c513-4b58-88bb-8a2d3261d9a2",
          "source_job_id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors && !state.testMode\n"
        },
        "Get-Mappings-from-Collection->Get-Encounters": {
          "enabled": true,
          "id": "d9d6c1fb-627e-491e-88b1-ed2575e77de3",
          "target_job_id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "source_job_id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        },
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "1d37cfc8-1a71-4cc8-809d-583d6d8b8fca",
          "target_job_id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "source_job_id": "f628007a-5a2c-463f-9de3-d2e465f95aae",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Get-Patients->Get-Mappings-from-Collection": {
          "enabled": true,
          "id": "15dc93e4-fb96-4cc5-b0c3-c0bd544bdc6d",
          "target_job_id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "source_job_id": "51485ee3-05c2-4690-8da6-9b962b6c19d5",
          "condition_type": "on_job_success"
        },
        "Get-TEIs-and-Map-Answers->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "9eb6f99d-434c-4b47-ab4b-058a5930435c",
          "target_job_id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "source_job_id": "7a1831ef-a388-4565-bf44-d603fdd19871",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "condition_expression": "state.TEIs && !state.errors\n"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "bd5834d4-b481-47f0-b497-c56dbd05ed03",
          "target_job_id": "7a1831ef-a388-4565-bf44-d603fdd19871",
          "source_job_id": "2b1e02ae-7546-480a-86cc-77a815f61256",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state?.encounters?.length > 0\n"
        },
        "cron->Get-Patients": {
          "enabled": true,
          "id": "d681f4f9-4e4f-415f-a52c-a6fcd9f2740b",
          "target_job_id": "51485ee3-05c2-4690-8da6-9b962b6c19d5",
          "source_trigger_id": "cd9ea573-fb86-4ec4-8c39-200c7de22dfb",
          "condition_type": "always"
        },
        "Get-Mappings-from-Collection->Upsert-TEIs": {
          "enabled": true,
          "id": "7b001148-c273-49f5-9582-09979cbd4ca9",
          "target_job_id": "f628007a-5a2c-463f-9de3-d2e465f95aae",
          "source_job_id": "0acf6701-064d-412d-8672-db507c9e95c6",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Get-Tie->Custom-Logic-for-Events": {
          "enabled": true,
          "id": "80f9eb77-8bc4-4557-8c9b-907ab7408473",
          "target_job_id": "782cdfc3-9357-4763-8681-798ae1b29fd1",
          "source_job_id": "47c1397c-a146-4511-bada-7ab0bd07b123",
          "condition_type": "js_expression",
          "condition_label": "test-mode",
          "condition_expression": "state.testMode\n"
        }
      }
    },
    "130-wf2-omrs-dhis2-new": {
      "id": "8829bb03-58c7-4634-908d-281844b4bde0",
      "name": "130-wf2-omrs-dhis2-new",
      "inserted_at": "2025-08-18T10:38:59.110613Z",
      "lock_version": 8,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "27d46ab5-a5ef-4bd6-8535-490576aaf8c5",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Patients": {
          "id": "238eda1d-7088-4592-8f57-5a6175a48253",
          "name": "Get Patients",
          "body": "cursor($.lastRunDateTime || \"2025-03-20T06:01:24.000Z\");\n\ncursor(\"today\", {\n  key: \"lastRunDateTime\",\n  format: (c) => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: \"IQ\", v: \"full\", limit: \"100\" });\nfn((state) => {\n  const { cursor, data } = state;\n  console.log(\"Filtering patients since cursor:\", cursor);\n  console.log('Patient fetched', data.results.length)\n\n  state.patients = data.results.filter(({ auditInfo }) => {\n    const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n    return lastModified > cursor;\n  });\n  state.searchPatientUuids = state.patients.map((p) => p.uuid);\n  console.log(\"# of patients to sync to dhis2 ::\", state.patients.length);\n\n  return state;\n});\n\n// Fetch all encounters\nhttp\n  .get(\"/ws/fhir2/R4/Encounter\", {\n    query: { _count: 100, _lastUpdated: `ge${$.cursor}` },\n  })\n  .then((state) => {\n    const { link, total } = state.data;\n    state.nextUrl = link\n      .find((l) => l.relation === \"next\")\n      ?.url.replace(/(_count=)\\d+/, `$1${total}`)\n      .split(\"/openmrs\")[1];\n\n    state.allResponse = state.data;\n    return state;\n  });\n\nfnIf(\n  $.nextUrl,\n  http.get($.nextUrl).then((state) => {\n    console.log(`Fetched ${state.data.entry.length} remaining encounters`);\n    delete state.allResponse.link;\n    state.allResponse.entry.push(...state.data.entry);\n    return state;\n  })\n);\n\nfn((state) => {\n  console.log(\n    \"Total # of encounters fetched: \",\n    state.allResponse?.entry?.length\n  );\n\n  const uuids = [\n    ...new Set(\n      state.allResponse?.entry?.map((p) =>\n        p.resource?.subject?.reference?.replace(\"Patient/\", \"\")\n      )\n    ),\n  ];\n  state.encounterPatientUuids = [...new Set(uuids)];\n\n  return state;\n});\n\nfn((state) => {\n  const {\n    cursor,\n    lastRunDateTime,\n    patients,\n    searchPatientUuids,\n    encounterPatientUuids,\n  } = state;\n\n  const onlyInSearchPatient = searchPatientUuids.filter(\n    (id) => !encounterPatientUuids.includes(id)\n  );\n\n  const onlyInR4Encounter = encounterPatientUuids.filter(\n    (id) => !searchPatientUuids.includes(id)\n  );\n  const inbothResults = searchPatientUuids.filter((id) =>\n    encounterPatientUuids.includes(id)\n  );\n  const patientUuids = [...new Set(searchPatientUuids, encounterPatientUuids)];\n\n  console.log('inbothResults', inbothResults.length)\n  console.log('patient-search-array', onlyInSearchPatient.length)\n  console.log('r4-encounter-array', onlyInR4Encounter.length)\n  console.log('combined uuids', patientUuids.length)\n\n  return { cursor, lastRunDateTime, patients, patientUuids };\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Mappings": {
          "id": "5a91d4b5-31b8-4fbd-8e6d-27c0b4136285",
          "name": "Mappings",
          "body": "const isValidUUID = id => {\n  if (!id || typeof id !== 'string') return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\ncollections.get('mosul-metadata-mappings-staging').then(state => {\n  state.optsMap = state.data\n    .filter(i => i.key.includes('optsMap-value-'))\n    .map(i => i.value);\n\n  state.identifiers = state.data\n    .filter(i => i.key.includes('identifiers-value-'))\n    .map(i => i.value);\n  state.syncedAt = state.data.find(i => i.key === 'syncedAt')?.value;\n  state.formMetadata = state.data.find(i => i.key === 'formMetadata')?.value;\n  state.placeOflivingMap = state.data.find(i => i.key === 'placeOflivingMap')?.value;\n  state.sourceFile = state.data.filter(i => i.key === 'sourceFile')?.[0]?.value;\n  state.fileDateModified = state.data.filter(\n    i => i.key === 'fileDateModified'\n  )?.[0]?.value;\n  state.optionSetKey = state.data.filter(\n    i => i.key === 'optionSetKey'\n  )?.[0]?.value;\n  state.formMaps = state.data.find(i => i.key === 'formMaps')?.value;\n\n  delete state.data\n  delete state.references\n  return state;\n});\n\nfn(state => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.v2FormUuids = formMetadata\n    .filter(\n      form =>\n        isValidUUID(form['OMRS form.uuid']) &&\n        form['OMRS Form Version'] === 'v4-2025'\n    )\n    .map(form => form['OMRS form.uuid']);\n  rest.formUuids = formMetadata\n    .filter(form => isValidUUID(form['OMRS form.uuid']) &&\n      form['Workflow'] === 'WF2')\n    .map(form => form['OMRS form.uuid']);\n\n  \n  rest.patientProgramStage = \"vN61drMkGqO\"\n\n// rest.orgUnit = \"sUpt0j2GmBD\"\n  rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n    'dhis2 attribute id'\n  ];\n  // rest.program = \"dWdzxMuKa8Z\"\n  rest.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n    'dhis2 attribute id'\n  ];\n  // rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n\nfn(state => {\n  state.genderOptions = state.optsMap\n    .filter(o => o['OptionSet name'] === 'Sex - Patient')\n    .reduce((acc, value) => {\n      acc[value['value.uuid - External ID']] = value['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@2.1.1",
          "project_credential_id": "90cddfa1-9b77-4625-a812-2a04d061522c"
        },
        "Upsert-Parent-TEIs": {
          "id": "bbe84ea4-5f2a-4916-8202-e65deaf27054",
          "name": "Upsert Parent TEIs",
          "body": "const buildPatientsUpsert = (globals, dhis2Config, patient) => {\n  const { placeOflivingMap, genderOptions, formMaps, optsMap } = globals;\n  const dateCreated = patient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find((i) => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const findOptsUuid = (uuid) =>\n    patient.person.attributes.find((a) => a.attributeType.uuid === uuid)?.value\n      ?.uuid ||\n    patient.person.attributes.find((a) => a.attributeType.uuid === uuid)?.value;\n\n  const findOptCode = (optUuid) =>\n    optsMap.find((o) => o[\"value.uuid - External ID\"] === optUuid)?.[\n    \"DHIS2 Option Code\"\n    ];\n\n  const patientMap = formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map((d) => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid) || optUid,\n    };\n  });\n\n  const omrsId = findIdentifierByUuid(\n    patient.identifiers,\n    dhis2Config.openmrsAutoId\n  );\n  const standardAttr = [\n    {\n      attribute: \"fa7uwpCKIwa\",\n      value: patient.person?.names[0]?.givenName,\n    },\n    {\n      attribute: \"Jt9BhFZkvP2\",\n      value: patient.person?.names[0]?.familyName,\n    },\n    {\n      attribute: \"P4wdYGkldeG\", //DHIS2 ID ==> \"Patient Number\"\n      value:\n        findIdentifierByUuid(\n          patient.identifiers,\n          dhis2Config.dhis2PatientNumber\n        ) || omrsId, //map OMRS ID if no DHIS2 id\n    },\n    {\n      attribute: \"ZBoxuExmxcZ\", //MSF ID ==> \"OpenMRS Patient Number\"\n      value: omrsId,\n    },\n    {\n      attribute: \"AYbfTPYMNJH\", //\"OpenMRS Patient UID\"\n      value: patient.uuid,\n    },\n    {\n      attribute: \"qptKDiv9uPl\",\n      value: genderOptions[patient.person.gender],\n    },\n    {\n      attribute: \"T1iX2NuPyqS\",\n      value: patient.person.age,\n    },\n    {\n      attribute: \"WDp4nVor9Z7\",\n      value: patient.person.birthdate?.slice(0, 10),\n    },\n    {\n      attribute: \"rBtrjV1Mqkz\", //Place of living\n      value: placeOflivingMap[patient.person?.addresses[0]?.cityVillage],\n    },\n  ];\n\n  //filter out attributes that don't have a value from dhis2\n  const filteredAttr = standardAttr.filter((a) => a.value);\n  const filteredStatusAttr = statusAttrMaps.filter((a) => a.value);\n  //console.log('standardAttr ::', JSON.stringify(standardAttr, null,2))\n  //console.log('filteredAttr ::', JSON.stringify(filteredAttr, null,2))\n\n  const payload = {\n    query: {\n      ou: dhis2Config.orgUnit,\n      program: dhis2Config.program,\n      filter: [`AYbfTPYMNJH:Eq:${patient.uuid}`], //upsert on omrs.patient.uid\n    },\n    data: {\n      program: dhis2Config.program,\n      orgUnit: dhis2Config.orgUnit,\n      trackedEntityType: \"cHlzCA2MuEF\",\n      attributes: [...filteredAttr, ...filteredStatusAttr],\n    },\n  };\n\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (patient.isNewPatient) {\n    console.log(\"create enrollment\");\n    const enrollments = [\n      {\n        orgUnit: dhis2Config.orgUnit,\n        program: dhis2Config.program, // searching by MH program but change this EMR\n        programStage: dhis2Config.patientProgramStage, //'MdTtRixaC1B',\n        enrollmentDate: dateCreated,\n      },\n    ];\n    payload.data.enrollments = enrollments;\n  }\n\n  return payload;\n};\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\neach(\n  $.patients,\n  get(\n    \"tracker/trackedEntities\",\n    {\n      orgUnit: $.orgUnit,\n      filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],\n      program: $.program,\n    },\n    {},\n    async (state) => {\n      const {\n        placeOflivingMap,\n        genderOptions,\n        formMaps,\n        optsMap,\n        program,\n        orgUnit,\n        openmrsAutoId,\n        dhis2PatientNumber,\n        patientProgramStage,\n      } = state;\n      const globals = { placeOflivingMap, genderOptions, formMaps, optsMap };\n      const dhis2Config = {\n        orgUnit,\n        program,\n        openmrsAutoId,\n        dhis2PatientNumber,\n        patientProgramStage,\n      };\n      const patient = state.references.at(-1);\n      console.log(patient.uuid, \"patient uuid\");\n      patient.isNewPatient = state.data.instances.length === 0;\n\n      const parentMapping = buildPatientsUpsert(globals, dhis2Config, patient);\n      // const childMapping = buildPatientsUpsert()\n      state.patientsUpsert ??= [];\n      state.patientsUpsert.push(parentMapping);\n      await delay(2000);\n      return state;\n    }\n  )\n);\n\n// Upsert TEIs to DHIS2\neach(\n  $.patientsUpsert,\n  upsert('trackedEntityInstances', $.data.query, $.data.data)\n);\nfn(state => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    genderOptions,\n    identifiers,\n    ...next\n  } = state;\n\n  next.patientUuids = patients.map(p => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Get-Encounters": {
          "id": "6ad5eba6-bfe2-41b3-8d5a-fc3863cd0e4f",
          "name": "Get Encounters",
          "body": "// Fetch patient encounters\neach(\n  $.patientUuids,\n  get('encounter', { patient: $.data, v: 'full' }).then(state => {\n    state.allEncounters ??= [];\n    state.allEncounters.push(\n      // v2FormsUuids are for mental health forms\n      // ...state.data.results.filter(e =>\n      //   state.v2FormUuids.includes(e?.form?.uuid)\n      // )\n      ...state.data.results.filter(e =>\n        state.formUuids.includes(e?.form?.uuid)\n      )\n    );\n\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map(formUuid =>\n      state.data.results\n        .filter(\n          e =>\n            e.auditInfo.dateCreated >= state.cursor &&\n            e?.form?.uuid === formUuid\n        )\n        .sort(\n          (a, b) =>\n            new Date(b.auditInfo.dateCreated) -\n            new Date(a.auditInfo.dateCreated)\n        )\n    );\n\n    const encounters = filteredEncounters.map(pe => {\n      const isLatestForm = pe.find(e => {\n        return state.formMaps[e?.form?.uuid]?.syncType === 'latest'\n      })\n      if (isLatestForm) {\n        return [isLatestForm]\n      } else {\n        const allPatientEncounter = pe.filter(e => state.formMaps[e?.form?.uuid]?.syncType === 'all')\n        return allPatientEncounter\n      }\n    }).flat()\n\n    state.encounters ??= [];\n    state.encounters.push(...encounters);\n\n    console.log(\n      encounters.length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n\n    return state;\n  })\n);\n\nfn(state => {\n  const {\n    data,\n    index,\n    response,\n    references,\n    allResponse,\n    patientUuids,\n    patients,\n    ...next\n  } = state;\n\n  if (next.encounters?.length) {\n    next.encounters = next.encounters.map(\n      ({ uuid, patient, obs, form, encounterDatetime }) => ({\n        uuid,\n        patient,\n        obs,\n        form,\n        encounterDatetime,\n      })\n    )\n    console.log(next.encounters.length, '# of new encounters to sync to dhis2');\n  } else {\n    console.log('No encounters found for cursor: ', next.cursor);\n  }\n  next.allEncounters = next.allEncounters?.map(\n    ({ uuid, patient, obs, form, encounterDatetime }) => ({\n      uuid,\n      patient,\n      obs,\n      form,\n      encounterDatetime,\n    })\n  );\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.3.0",
          "project_credential_id": "efd2a233-caf8-4346-bc0c-6a25c24e1a08"
        },
        "Get-TEIs-and-Map-Answers": {
          "id": "39f3376e-d72d-4e74-8559-5b4816c04c84",
          "name": "Get TEIs and Map Answers",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nfn(state => {\n  // Group encounters by patient UUID\n  state.encountersByPatient = state.encounters.reduce((acc, obj) => {\n    const key = obj.patient.uuid;\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(obj);\n    return acc;\n  }, {});\n\n  return state;\n})\n\neach(state => Object.keys(state.encountersByPatient), get('tracker/trackedEntities', {\n  orgUnit: $.orgUnit,\n  program: $.program,\n  filter: [`AYbfTPYMNJH:Eq:${$.data}`]\n}).then(state => {\n  const patientUid = state.references.at(-1)\n\n  const tei = state.data?.instances?.[0];\n  if (tei?.trackedEntity) {\n    console.log('Parent TEI found:', tei.trackedEntity)\n    state.parentTeis ??= {};\n    state.parentTeis[patientUid] = tei;\n  } else {\n    console.log('Parent TEI Not Found for Patient:', patientUid)\n    state.missingParentTeis ??= {}\n    state.missingParentTeis[patientUid] = state.encountersByPatient[patientUid]\n  }\n  return state\n}))\n\neach(\n  $.encounters,\n  get('tracker/trackedEntities', state => ({\n    orgUnit: state.formMaps[state.data.form.uuid].orgUnit,\n    program: state.formMaps[state.data.form.uuid].programId,\n    filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n    fields: '*,enrollments[*],enrollments[events[*]], relationships[*]',\n  })).then(async state => {\n    const encounter = state.references.at(-1);\n    console.log(encounter.patient.uuid, 'Encounter patient uuid');\n\n    const { trackedEntity, enrollments } = state.data?.instances?.[0] || {};\n    if (trackedEntity) {\n      state.childTeis ??= {};\n      state.childTeis[encounter.patient.uuid] = {\n        trackedEntity,\n        events: enrollments?.[0]?.events,\n        enrollment: enrollments?.[0]?.enrollment,\n      };\n    } else {\n      state.teisToCreate ??= {}\n      const { attributes, trackedEntityType } = state.parentTeis[encounter.patient.uuid]\n      const program = state.formMaps[encounter.form.uuid].programId\n      const orgUnit = state.formMaps[encounter.form.uuid].orgUnit\n\n      state.teisToCreate[encounter.patient.uuid] = {\n        trackedEntityType,\n        enrollments: [{\n          orgUnit,\n          program,\n          enrollmentDate: new Date().toISOString().split('T')[0],\n        }],\n        attributes,\n        orgUnit,\n        program\n      }\n    }\n\n    await delay(2000);\n    return state;\n  })\n);\n\neach(state => {\n  return state?.teisToCreate ? Object.entries(state?.teisToCreate) : []\n}, create('trackedEntityInstances', state => {\n  const payload = state.data[1]\n  return payload\n}).then(state => {\n  const [patient, payload] = state.references.at(-1)\n  const trackedEntity = state.data?.response?.importSummaries[0]?.reference\n  state.childTeis ??= {}\n  state.createdTeis ??= []\n  state.createdTeis.push(trackedEntity)\n  state.childTeis[patient] = { trackedEntity }\n  return state\n}))\n\neach($?.createdTeis || [], get(`tracker/trackedEntities/${$.data}`, { fields: 'attributes[*],enrollments,trackedEntity' }).then(state => {\n  const { trackedEntity, enrollments, attributes } = state.data || {};\n  console.log(state.data)\n  const patientUuid = attributes.find(a => a.attribute === 'AYbfTPYMNJH').value\n\n  console.log('Fetched Teis', state.data)\n  state.childTeis ??= {};\n  state.childTeis[patientUuid] = {\n    trackedEntity,\n    events: enrollments?.[0]?.events,\n    enrollment: enrollments?.[0]?.enrollment,\n  };\n\n  return state\n}))\n\n\nfnIf($.childTeis && $.parentTeis, state => {\n  const { childTeis, parentTeis } = state\n  state.relationshipsMapping = Object.keys(childTeis).map(uuid => {\n    const childTei = childTeis[uuid].trackedEntity\n    const parentTei = parentTeis[uuid].trackedEntity\n\n    if (childTei != parentTei) {\n      return {\n        \"from\": {\n          \"trackedEntityInstance\": {\n            \"trackedEntityInstance\": parentTei\n          }\n        },\n        \"to\": {\n          \"trackedEntityInstance\": {\n            \"trackedEntityInstance\": childTei\n          }\n        },\n        \"relationshipType\": \"cJJTZ51EK24\"\n      }\n    }\n\n  }).filter(Boolean)\n  return state\n})\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Create-Events": {
          "id": "21b0b3aa-d5f3-4e36-8d8a-5f44564372e7",
          "name": "Create Events",
          "body": "// Create or update events for each encounter\ncreate(\n  'tracker',\n  {\n    events: state => {\n      console.log(\n        'Creating events for: ',\n        JSON.stringify(state.eventsMapping, null, 2)\n      );\n      return state.eventsMapping;\n    },\n  },\n  {\n    params: {\n      async: false,\n      dataElementIdScheme: 'UID',\n      importStrategy: 'CREATE_AND_UPDATE',\n    },\n  }\n);\n\nconst findlatestAnswer = (encounters, conceptUuid) => {\n  const latestAnswer = encounters.reduce((acc, e) => {\n    const answer = e.obs.find((o) => o.concept.uuid === conceptUuid);\n    if (answer) {\n      const personUuid = answer.person.uuid;\n      if (\n        !acc[personUuid] ||\n        new Date(answer.obsDatetime) > new Date(acc[personUuid].obsDatetime)\n      ) {\n        acc[personUuid] = { ...answer, formUuid: e.form.uuid };\n      }\n    }\n    return acc;\n  }, {});\n\n  return Object.values(latestAnswer);\n};\n\nfn((state) => {\n  const {\n    encounters,\n    childTeis,\n    parentTeis,\n    program,\n    orgUnit,\n    optsMap,\n    // Lighten state by removing unused properties\n    formMaps,\n    optionSetKey,\n    eventsMapping,\n    formUuids,\n    references,\n    ...next\n  } = state;\n\n  const genderMap = optsMap\n    .filter((o) => o[\"DHIS2 DE UID\"] === \"qptKDiv9uPl\")\n    .reduce((acc, obj) => {\n      acc[obj[\"value.display - Answers\"]] = obj[\"DHIS2 Option Code\"];\n      return acc;\n    }, {});\n\n  const latestGenderUpdate = findlatestAnswer(\n    encounters,\n    \"ec42d68d-3e23-43de-b8c5-a03bb538e7c7\"\n  );\n\n  const genderUpdated = latestGenderUpdate\n    .map((answer) => {\n      const parentTei = parentTeis[answer?.person?.uuid].trackedEntity\n      const childTei = childTeis[answer?.person?.uuid].trackedEntity\n\n      const mappings = [];\n      const sharedMapping = {\n        trackedEntityType: \"cHlzCA2MuEF\",\n        attributes: [\n          {\n            attribute: \"qptKDiv9uPl\", //gender\n            value: genderMap[answer.value.display],\n          },\n          {\n            attribute: \"AYbfTPYMNJH\", //OpenMRS Patient UID to use to upsert TEI\n            value: answer.person.uuid,\n          },\n        ],\n      };\n      if (!childTei) {\n        console.log(\"No TEI found for person\", answer.person.uuid);\n      }\n      if (childTei) {\n        mappings.push({\n          ...sharedMapping,\n          trackedEntity: childTei,\n          program: formMaps[answer.formUuid].programId,\n          orgUnit: formMaps[answer.formUuid].orgUnit,\n        });\n      }\n      if (parentTei) {\n        mappings.push({\n          ...sharedMapping,\n          trackedEntity: parentTei,\n          program,\n          orgUnit,\n        });\n      }\n      return mappings\n    })\n    .filter(Boolean)\n    .flat();\n\n  const latestEducationUpdate = findlatestAnswer(\n    encounters,\n    \"cc3a5a7a-abfe-4630-b0c0-c1275c6cbb54\"\n  );\n\n  // console.log({ latestEducationUpdate })\n  const educationUpdated = latestEducationUpdate\n    .map((answer) => {\n      const parentTei = parentTeis[answer?.person?.uuid]?.trackedEntity\n      const childTei = childTeis[answer?.person?.uuid]?.trackedEntity\n      console.log({ parentTei, childTei })\n      const mappings = []\n      const sharedMapping = {\n        trackedEntityType: \"cHlzCA2MuEF\",\n        attributes: [\n          {\n            attribute: \"Dggll4f9Efj\", //education\n            value: optsMap.find(\n              (o) => o[\"value.display - Answers\"] === answer.value.display\n            )?.[\"DHIS2 Option Code\"], //map to DHIS2 Option Code in optsMap\n          },\n        ],\n      }\n      if (!childTei) {\n        console.log(\"No TEI found for person\", answer.person.uuid);\n      }\n\n      if (parentTei) {\n        mappings.push({\n          trackedEntity: parentTei,\n          program,\n          orgUnit,\n          ...sharedMapping\n        })\n      }\n      if (childTei) {\n        mappings.push({\n          trackedEntity: childTei,\n          program: formMaps[answer.formUuid].programId,\n          orgUnit: formMaps[answer.formUuid].orgUnit,\n          ...sharedMapping\n        })\n      }\n\n      return mappings\n    })\n    .filter(Boolean)\n    .flat();\n\n  return {\n    ...next,\n    teisToUpdate: [...genderUpdated, ...educationUpdated],\n  };\n});\n\nfnIf(\n  (state) => state.teisToUpdate.length === 0,\n  ({ lastRunDateTime }) => ({ lastRunDateTime })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Update-TEIs": {
          "id": "19325c1c-50e4-4e28-871a-71e71954e0ef",
          "name": "Update TEIs",
          "body": "// Update TEIs\ncreate(\n  'tracker',\n  { trackedEntities: $.teisToUpdate },\n  { params: { async: false, importStrategy: 'UPDATE' } }\n);\n\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        },
        "Event-Mappings": {
          "id": "fe42aa13-5f60-4685-83c4-1a13fa6142e8",
          "name": "Event Mappings",
          "body": "const getRangePhq = input => {\n  if (input >= 20) return '>20';\n  if (input >= 15) return '15_19';\n  if (input >= 10) return '10_14';\n  if (input >= 5) return '5_9';\n  return '0_4';\n};\nconst processAnswer = (\n  answer,\n  conceptUuid,\n  dataElement,\n  optsMap,\n  optionSetKey,\n  formUuid\n) => {\n  if (typeof answer.value === 'object') {\n    const isDiagnosisByPsychologist =\n      conceptUuid === '722dd83a-c1cf-48ad-ac99-45ac131ccc96' &&\n      dataElement === 'pN4iQH4AEzk';\n    if (isDiagnosisByPsychologist) {\n      console.log('Yes done by psychologist..');\n      return '' + answer.value.uuid === '278401ee-3d6f-4c65-9455-f1c16d0a7a98';\n    }\n\n    const isTrueOnlyQuestion =\n      conceptUuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9' &&\n      dataElement === 'G0hLyxqgcO7';\n\n    if (isTrueOnlyQuestion) {\n      console.log('True only question detected..', dataElement);\n      return answer.value.uuid === '681cf0bc-5213-492a-8470-0a0b3cc324dd'\n        ? 'true'\n        : undefined;\n    }\n\n    const optionKey = `${formUuid}-${answer.concept.uuid}`;\n    const matchingOptionSet = optionSetKey[optionKey];\n    const opt = optsMap.find(\n      o =>\n        o['value.uuid - External ID'] === answer.value.uuid &&\n        o['DHIS2 Option Set UID'] === matchingOptionSet\n    );\n    const matchingOption =\n      opt?.['DHIS2 Option Code'] ||\n      opt?.['DHIS2 Option name'] || // TODO: Sync with AK: We have added this because  Opticon Code is empty in some cases.\n      answer?.value?.display; //TODO: revisit this logic if optionSet not found\n\n    // console.log(`matchingOption value: \"${matchingOption}\" for`);\n    // console.log({\n    //   optionKey,\n    //   conceptUid: answer.concept.uuid,\n    //   'answer.value.uid': answer.value.uuid,\n    //   'answer.value.display': answer.value.display,\n    //   matchingOption,\n    //   matchingOptionSet,\n    // });\n\n    if (matchingOption === 'FALSE' || matchingOption === 'No') {\n      return 'false';\n    }\n    if (matchingOption === 'TRUE' || matchingOption === 'Yes') {\n      return 'true';\n    }\n\n    return matchingOption || '';\n  }\n\n  const PHQ9_CONCEPT_UUIDS = [\n    '5f3d618e-5c89-43bd-8c79-07e4e98c2f23',\n    '6545b874-f44d-4d18-9ab1-7a8bb21c0a15',\n  ];\n  const isPhq9Score =\n    typeof answer.value === 'number' &&\n    PHQ9_CONCEPT_UUIDS.includes(conceptUuid);\n  if (isPhq9Score) {\n    return getRangePhq(answer.value);\n  }\n  return answer.value;\n};\n\nconst processNoAnswer = (encounter, conceptUuid, dataElement) => {\n  const isEncounterDate =\n    conceptUuid === 'encounter-date' &&\n    ['CXS4qAJH2qD', 'I7phgLmRWQq', 'yUT7HyjWurN', 'EOFi7nk2vNM'].includes(\n      dataElement\n    );\n  // These are data elements for encounter date in DHIS2\n  // F29 MHPSS Baseline v2, F31-mhGAP Baseline v2, F30-MHPSS Follow-up v2, F32-mhGAp Follow-up v2\n  if (isEncounterDate) {\n    return encounter.encounterDatetime.replace('+0000', '');\n  }\n  return '';\n};\n\nconst findAnswerByConcept = (encounter, conceptUuid) => {\n  const answer = encounter.obs.find(o => o.concept.uuid === conceptUuid);\n  return answer?.value?.display;\n};\n\n// Helper functions for finding observations\nconst findObsByConcept = (encounter, conceptUuid) =>\n  encounter.obs.find(o => o.concept.uuid === conceptUuid);\n\n// Concept UUIDs\nconst CONCEPTS = {\n  BASELINE_CONCEPT: '22809b19-54ca-4d88-8d26-9577637c184e',\n  PRIORITY_1: '45b39cbf-0fb2-4682-8544-8aaf3e07a744',\n  PRIORITY_2: 'ee1b7973-e931-494e-a9cb-22b814b4d8ed',\n  PRIORITY_3: '92a92f62-3ff6-4944-9ea9-a7af23949bad',\n  OTHER_SPECIFY: 'e08d532b-e56c-43dc-b831-af705654d2dc',\n  PRECIPITATING_EVENT_1: 'd5e3d927-f7ce-4fdd-ac4e-6ad0b510b608',\n  PRECIPITATING_EVENT_2: '54a9b20e-bce5-4d4a-8c9c-e0248a182586',\n  PRECIPITATING_EVENT_3: 'e0d4e006-85b5-41cb-8a21-e013b1978b8b',\n  PRECIPITATING_EVENT_OTHER: '790b41ce-e1e7-11e8-b02f-0242ac130002',\n};\n\n// DHIS2 Data Elements\nconst DATA_ELEMENTS = {\n  BASELINE: 'pN4iQH4AEzk',\n  PRIORITY_1_OTHER: 'pj5hIE6iyAR',\n  PRIORITY_2_OTHER: 'Em5zvpdd5ha',\n  PRIORITY_3_OTHER: 'aWsxYkJR8Ua',\n  PRECIPITATING_EVENT_1_OTHER: 'm8qis4iUOTo',\n  PRECIPITATING_EVENT_2_OTHER: 'mNK6CITsdWD',\n  PRECIPITATING_EVENT_3_OTHER: 'jocqmYW394G',\n};\n\n// Prepare DHIS2 data model for create events\nfn(state => {\n  const handleMissingRecord = (data, state) => {\n    const { uuid, display } = data.patient;\n\n    console.log(uuid, 'Patient is missing trackedEntity && enrollment');\n\n    state.missingRecords ??= {};\n    state.missingRecords[uuid] ??= {\n      encounters: [],\n      patient: display,\n    };\n\n    state.missingRecords[uuid].encounters.push(data.uuid);\n  };\n\n  state.eventsMapping = state.encounters\n    .map(encounter => {\n      const form = state.formMaps[encounter.form.uuid];\n      if (!form?.dataValueMap) {\n        return null;\n      }\n      const { trackedEntity, enrollment, events } =\n        state.childTeis[encounter.patient.uuid] || {};\n\n      if (!trackedEntity || !enrollment) {\n        handleMissingRecord(encounter, state);\n        return null;\n      }\n      let formDataValues = Object.keys(form.dataValueMap)\n        .map(dataElement => {\n          const conceptUuid = form.dataValueMap[dataElement];\n          const obsAnswer = encounter.obs.find(\n            o => o.concept.uuid === conceptUuid\n          );\n          const answer = obsAnswer;\n          const value = answer\n            ? processAnswer(\n                answer,\n                conceptUuid,\n                dataElement,\n                state.optsMap,\n                state.optionSetKey,\n                encounter.form.uuid\n              )\n            : processNoAnswer(encounter, conceptUuid, dataElement);\n          if (value) {\n            return { dataElement, value };\n          }\n        })\n        .filter(d => d);\n\n      let customMapping = [];\n\n      if (\n        encounter.form.description.includes('F11-Family Planning Assessment')\n      ) {\n        const answers = encounter.obs.filter(\n          o => o.concept.uuid === '30b2d692-6a05-401f-8ede-13e027b8a436'\n        );\n\n        const mappingConfig = [\n          { dataElement: 'DYTLOoEKRas', index: 0 },\n          { dataElement: 'ddTrzQtQUGz', index: 1 },\n          { dataElement: 'fuNs3Uzspsm', index: 2 },\n        ];\n\n        mappingConfig.forEach(config => {\n          if (answers[config.index]) {\n            customMapping.push({\n              dataElement: config.dataElement,\n              value: state.optsMap.find(\n                o =>\n                  o['value.display - Answers'] ===\n                  answers[config.index]?.value?.display\n              )?.['DHIS2 Option Code'],\n            });\n          }\n        });\n      }\n      if (encounter.form.description.includes('F13-PNC')) {\n        const answers = encounter.obs.filter(\n          o => o.concept.uuid === '22809b19-54ca-4d88-8d26-9577637c184e'\n        );\n\n        // Define mapping configurations\n        const mappingConfig = [\n          { dataElement: 'ErtqJsZINyX', index: 0 },\n          { dataElement: 'wWAMdsjks50', index: 1 },\n          { dataElement: 'Dh1ocjojOrC', index: 2 },\n          { dataElement: 'KR03PHkzVw1', index: 3 },\n          { dataElement: 'kDA55sgLAwY', index: 4 },\n        ];\n\n        // Only add mappings for answers that exist\n        mappingConfig.forEach(config => {\n          if (answers[config.index] !== undefined) {\n            customMapping.push({\n              dataElement: config.dataElement,\n              value: state.optsMap.find(\n                o =>\n                  o['value.display - Answers'] ===\n                  answers[config.index]?.value?.display\n              )?.['DHIS2 Option Code'],\n            });\n          }\n        });\n      }\n\n      if (encounter.form.description.includes('F29-MHPSS Baseline v2')) {\n        customMapping.push({\n          dataElement: DATA_ELEMENTS.BASELINE,\n          value: findAnswerByConcept(encounter, CONCEPTS.BASELINE_CONCEPT)\n            ? true\n            : false,\n        });\n\n        const priority1 = findObsByConcept(encounter, CONCEPTS.PRIORITY_1);\n        if (priority1 && priority1?.value?.display === 'Other') {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_1_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const priority2 = findObsByConcept(encounter, CONCEPTS.PRIORITY_2);\n        if (priority2 && priority2?.value?.display === 'Other') {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_2_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const priority3 = findObsByConcept(encounter, CONCEPTS.PRIORITY_3);\n        if (priority3 && priority3?.value?.display === 'Other') {\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRIORITY_3_OTHER,\n            value: findObsByConcept(encounter, CONCEPTS.OTHER_SPECIFY).value,\n          });\n        }\n\n        const precipitatingEvent1 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_1\n        );\n        const otherValue = encounter.obs.find(o =>\n          o.display.includes('Past / Precipitating Events - Other')\n        );\n\n        if (\n          precipitatingEvent1 &&\n          precipitatingEvent1?.value?.uuid === otherValue?.value?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            o => o['value.uuid - External ID'] === otherValue?.value?.uuid\n          );\n\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_1_OTHER,\n            value: opt?.['DHIS2 Option Code'],\n          });\n        }\n\n        const precipitatingEvent2 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_2\n        );\n\n        if (\n          precipitatingEvent2 &&\n          precipitatingEvent2?.value?.uuid === otherValue?.value?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            o => o['value.uuid - External ID'] === otherValue?.value?.uuid\n          );\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_2_OTHER,\n            value: opt?.['DHIS2 Option Code'],\n          });\n        }\n\n        const precipitatingEvent3 = findObsByConcept(\n          encounter,\n          CONCEPTS.PRECIPITATING_EVENT_3\n        );\n\n        if (\n          precipitatingEvent3 &&\n          precipitatingEvent3?.value?.uuid === otherValue?.uuid\n        ) {\n          const opt = state.optsMap.find(\n            o => o['value.uuid - External ID'] === otherValue?.value?.uuid\n          );\n          customMapping.push({\n            dataElement: DATA_ELEMENTS.PRECIPITATING_EVENT_3_OTHER,\n            value: opt?.['DHIS2 Option Code'],\n          });\n        }\n      }\n\n      if (encounter.form.description.includes('F30-MHPSS Follow-up v2')) {\n        const missedSession = encounter => {\n          if (\n            encounter.obs.find(\n              o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n            )?.value?.display === 'No'\n          ) {\n            return encounter.encounterDatetime.replace('+0000', '');\n          }\n          const lastFollowupEncounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F30-MHPSS Follow-up v2') &&\n              e.patient.uuid === encounter.patient.uuid &&\n              e.uuid !== encounter.uuid &&\n              e.obs.find(\n                o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n              )?.value?.display === 'No'\n          );\n\n          if (lastFollowupEncounter) {\n            return lastFollowupEncounter.encounterDatetime.replace('+0000', '');\n          }\n\n          const f29Encounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F29-MHPSS Baseline v2') &&\n              e.patient.uuid === encounter.patient.uuid\n          );\n          if (f29Encounter) {\n            return f29Encounter.encounterDatetime.replace('+0000', '');\n          }\n          return undefined;\n        };\n        const mapping = [\n          {\n            dataElement: 'jtKIoKducvE',\n            value: missedSession(encounter),\n          },\n        ];\n        customMapping.push(...mapping);\n      }\n      if (encounter.form.description.includes('F32-mhGAP Follow-up v2')) {\n        const missedSession = encounter => {\n          if (\n            encounter.obs.find(\n              o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n            )?.value?.display === 'No'\n          ) {\n            return encounter.encounterDatetime.replace('+0000', '');\n          }\n          const lastFollowupEncounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F32-mhGAP Follow-up v2') &&\n              e.patient.uuid === encounter.patient.uuid &&\n              e.uuid !== encounter.uuid &&\n              e.obs.find(\n                o => o.concept.uuid === '54e8c1b6-6397-4822-89a4-cf81fbc68ce9'\n              )?.value?.display === 'No'\n          );\n\n          if (lastFollowupEncounter) {\n            return lastFollowupEncounter.encounterDatetime.replace('+0000', '');\n          }\n\n          const f31Encounter = state.allEncounters.find(\n            e =>\n              e.form.description.includes('F31-mhGAP Baseline v2') &&\n              e.patient.uuid === encounter.patient.uuid\n          );\n\n          if (f31Encounter) {\n            return f31Encounter.encounterDatetime.replace('+0000', '');\n          }\n        };\n        const changeInDiagnosis = encounter => {\n          const patientUuid = encounter.patient.uuid;\n          const previousChangeInDiagnosis = state.allEncounters\n            .find(\n              e =>\n                e.patient.uuid === patientUuid &&\n                e.form.description.includes('F32-mhGAP Follow-up v2') &&\n                encounter.uuid !== e.uuid\n            )\n            ?.obs.find(\n              o => o.concept.uuid === '22809b19-54ca-4d88-8d26-9577637c184e'\n            )?.value?.display;\n\n          const currentChangeInDiagnosis = encounter.obs.find(\n            o => o.concept.uuid === '22809b19-54ca-4d88-8d26-9577637c184e'\n          )?.value?.display;\n\n          if (\n            previousChangeInDiagnosis &&\n            previousChangeInDiagnosis !== currentChangeInDiagnosis\n          ) {\n            return true;\n          }\n\n          return false;\n        };\n        const mapping = [\n          {\n            dataElement: 'fMqEZpiRVZV',\n            value: missedSession(encounter),\n          },\n          {\n            dataElement: 'XBVRRpgkEvE',\n            value: changeInDiagnosis(encounter),\n          },\n        ];\n        customMapping.push(...mapping);\n      }\n      if (\n        encounter.form.description.includes('F33-MHPSS Closure v2') ||\n        encounter.form.description.includes('F34-mhGAP Closure v2')\n      ) {\n        const lastScore = encounter.obs.find(\n          o => o.concept.uuid === '90b3d09c-d296-44d2-8292-8e04377fe027'\n        )?.value;\n\n        const filterOutScore = state.allEncounters.filter(e => {\n          const obs = e.obs.find(\n            o => o.concept.display === 'Mental Health Outcome Scale'\n          );\n          return e.uuid !== encounter.uuid && obs && obs?.value !== 0;\n        });\n\n        const firstScore = filterOutScore\n          .sort((a, b) => {\n            return (\n              new Date(a.encounterDatetime) - new Date(b.encounterDatetime)\n            );\n          })\n          .at(0)\n          ?.obs.find(\n            o => o.concept.display === 'Mental Health Outcome Scale'\n          )?.value;\n\n        customMapping.push({\n          dataElement: 'b8bjS7ah8Qi',\n          value: lastScore - firstScore,\n        });\n      }\n      formDataValues = formDataValues.filter(\n        item =>\n          item.dataElement !== DATA_ELEMENTS.PRIORITY_1_OTHER &&\n          item.dataElement !== 'KjgDauY9v4J' &&\n          item.dataElement !== 'DYTLOoEKRas'\n      );\n\n      return {\n        event: events.find(e => e.programStage === form.programStage)?.event,\n        program: state.formMaps[encounter.form.uuid]?.programId,\n        orgUnit: state.formMaps[encounter.form.uuid]?.orgUnit,\n        trackedEntity,\n        enrollment,\n        occurredAt: encounter.encounterDatetime.replace('+0000', ''),\n        programStage: form.programStage,\n        dataValues: [...formDataValues, ...customMapping],\n      };\n    })\n    .filter(Boolean);\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": null
        },
        "Create-TEIs-Relationship": {
          "id": "a2d53e7a-eec3-42f5-8605-4823862b18d4",
          "name": "Create TEIs Relationship",
          "body": "// Check if relationship exist\neach($.relationshipsMapping, get('tracker/relationships', { trackedEntity: $.data.from.trackedEntityInstance.trackedEntityInstance }).then(state => {\n  const relationship = state.references.at(-1)\n  const toTei = relationship.to.trackedEntityInstance.trackedEntityInstance\n  const hasRelationship = state.data.instances.find(r => r.to.trackedEntity.trackedEntity === toTei)\n  state.relationshipsToCreate ??= []\n  if (!hasRelationship) {\n    state.relationshipsToCreate.push(relationship)\n  }\n  return state\n}))\n\n// Creating relationship between parent and child tei\neach($.relationshipsToCreate, create('relationships', $.data))",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "448e46cd-482d-4cb5-88f9-b413cdd7ff3f"
        }
      },
      "edges": {
        "cron->Get-Patients": {
          "enabled": true,
          "id": "cc3fa8bc-379f-4f0b-8154-347f1c0c0535",
          "target_job_id": "238eda1d-7088-4592-8f57-5a6175a48253",
          "source_trigger_id": "27d46ab5-a5ef-4bd6-8535-490576aaf8c5",
          "condition_type": "always"
        },
        "Mappings->Upsert-Parent-TEIs": {
          "enabled": true,
          "id": "e33dbdd6-d775-446a-8e82-adf335844669",
          "target_job_id": "bbe84ea4-5f2a-4916-8202-e65deaf27054",
          "source_job_id": "5a91d4b5-31b8-4fbd-8e6d-27c0b4136285",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "condition_expression": "state.patients.length > 0 && !state.errors\n"
        },
        "Upsert-Parent-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "8aaf4c3b-5d30-429f-81d0-2cb350076a12",
          "target_job_id": "6ad5eba6-bfe2-41b3-8d5a-fc3863cd0e4f",
          "source_job_id": "bbe84ea4-5f2a-4916-8202-e65deaf27054",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n"
        },
        "Mappings->Get-Encounters": {
          "enabled": true,
          "id": "9c393fe7-b84f-4d6b-83d6-9d6f4015889f",
          "target_job_id": "6ad5eba6-bfe2-41b3-8d5a-fc3863cd0e4f",
          "source_job_id": "5a91d4b5-31b8-4fbd-8e6d-27c0b4136285",
          "condition_type": "js_expression",
          "condition_label": "has-no-patients",
          "condition_expression": "!state.errors && state.patients.length === 0\n"
        },
        "Get-Encounters->Get-TEIs-and-Map-Answers": {
          "enabled": true,
          "id": "9cdba99d-f7ac-43df-8260-543885100334",
          "target_job_id": "39f3376e-d72d-4e74-8559-5b4816c04c84",
          "source_job_id": "6ad5eba6-bfe2-41b3-8d5a-fc3863cd0e4f",
          "condition_type": "js_expression",
          "condition_label": "has-encounters",
          "condition_expression": "!state.errors && state.encounters.length > 0\n"
        },
        "Create-Events->Update-TEIs": {
          "enabled": true,
          "id": "823b26a4-b3e7-4689-8ba9-dcb1d953622c",
          "target_job_id": "19325c1c-50e4-4e28-871a-71e71954e0ef",
          "source_job_id": "21b0b3aa-d5f3-4e36-8d8a-5f44564372e7",
          "condition_type": "js_expression",
          "condition_label": "has-gender-updated",
          "condition_expression": "state?.teisToUpdate?.length > 0\n"
        },
        "Event-Mappings->Create-Events": {
          "enabled": true,
          "id": "c6d8a838-9a3c-4b19-8bb5-2ef3f5fea59a",
          "target_job_id": "21b0b3aa-d5f3-4e36-8d8a-5f44564372e7",
          "source_job_id": "fe42aa13-5f60-4685-83c4-1a13fa6142e8",
          "condition_type": "js_expression",
          "condition_label": "has-events",
          "condition_expression": "state?.eventsMapping?.length > 0 && !state.errors\n"
        },
        "Get-TEIs-and-Map-Answers->Create-TEIs-Relationship": {
          "enabled": true,
          "id": "441535ac-c931-4bac-8c4c-b4c994f5fd98",
          "target_job_id": "a2d53e7a-eec3-42f5-8605-4823862b18d4",
          "source_job_id": "39f3376e-d72d-4e74-8559-5b4816c04c84",
          "condition_type": "js_expression",
          "condition_label": "relationship-mapping",
          "condition_expression": "state?.relationshipsMapping?.length > 0"
        },
        "Create-TEIs-Relationship->Event-Mappings": {
          "enabled": true,
          "id": "9db5fc75-f1ea-4fb3-8a3d-237c87b49659",
          "target_job_id": "fe42aa13-5f60-4685-83c4-1a13fa6142e8",
          "source_job_id": "a2d53e7a-eec3-42f5-8605-4823862b18d4",
          "condition_type": "js_expression",
          "condition_label": "has-child-teis",
          "condition_expression": "state.childTeis && !state.errors"
        },
        "Get-Patients->Mappings": {
          "enabled": true,
          "id": "5415a735-9bcb-4d26-80a3-c7256b91e4b2",
          "target_job_id": "5a91d4b5-31b8-4fbd-8e6d-27c0b4136285",
          "source_job_id": "238eda1d-7088-4592-8f57-5a6175a48253",
          "condition_type": "on_job_success"
        }
      }
    }
  },
  "allow_support_access": false,
  "requires_mfa": false
}