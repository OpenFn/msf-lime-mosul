name: msf-lime-iraq
description: null
credentials:
  aleksa@openfn.org-AK-Sharepoint:
    name: AK Sharepoint
    owner: aleksa@openfn.org
  mtuchi@openfn.org-MSF-DHIS2-UAT:
    name: MSF DHIS2 UAT
    owner: mtuchi@openfn.org
  mtuchi@openfn.org-OpenMRS-Demo:
    name: OpenMRS Demo
    owner: mtuchi@openfn.org
  "mtuchi@openfn.org-OpenMRS-Demo-(HTTP)":
    name: 'OpenMRS Demo (HTTP)'
    owner: mtuchi@openfn.org
  "mtuchi@openfn.org-googlesheets-(mtuchi@openfn.org)-2":
    name: 'googlesheets (mtuchi@openfn.org)-2'
    owner: mtuchi@openfn.org
workflows:
  Sharepoint-test:
    name: Sharepoint test
    jobs:
      New-job:
        name: New job
        adaptor: '@openfn/language-msgraph@latest'
        credential: null
        body: |
          
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->New-job:
        source_trigger: webhook
        target_job: New-job
        condition_type: always
        enabled: true
  fhir-encounters:
    name: fhir-encounters
    jobs:
      Fetch-FHIR-Encounters:
        name: Fetch FHIR Encounters
        adaptor: '@openfn/language-http@latest'
        credential: 'mtuchi@openfn.org-OpenMRS-Demo-(HTTP)'
        body: |
          cursor("2024-09-29");

          get(
            "/ws/fhir2/R4/Encounter",
            { query: { _count: 10, _lastUpdated: `ge${$.cursor}` }, parseAs: "json" },
            (state) => {
              const { link, total } = state.data;
              state.nextUrl = link
                .find((l) => l.relation === "next")
                ?.url.replace(/(_count=)\d+/, `$1${total}`);

              state.encounters = state.data;
              return state;
            }
          );

          fnIf(
            $.nextUrl,
            get($.nextUrl, { parseAs: "json" }, (state) => {
              delete state.encounters.link;
              state.encounters.entry.push(...state.data.entry);
              console.log(state.encounters.entry.length);
              return state;
            })
          );
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Fetch-FHIR-Encounters:
        source_trigger: webhook
        target_job: Fetch-FHIR-Encounters
        condition_type: always
        enabled: true
  sharepoint-test:
    name: sharepoint-test
    jobs:
      New-job:
        name: New job
        adaptor: '@openfn/language-msgraph@latest'
        credential: aleksa@openfn.org-AK-Sharepoint
        body: |
          
          // Check out the Job Writing Guide for help getting started:
          // https://docs.openfn.org/documentation/jobs/job-writing-guide
          get('sites/root/lists')
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->New-job:
        source_trigger: webhook
        target_job: New-job
        condition_type: always
        enabled: true
  wf-3-generate-optsmap:
    name: wf-3-generate-optsmap
    jobs:
      Fetch-OptionSets-Metadata:
        name: Fetch OptionSets Metadata
        adaptor: '@openfn/language-googlesheets@latest'
        credential: 'mtuchi@openfn.org-googlesheets-(mtuchi@openfn.org)-2'
        body: |
          
          getValues('1OuR7laA7Oc2QnoiT8S3Thhf-HNh7uFY8ILLEu-idXuk', 
          'optionsets_oct1')

      Key-Value-Pair:
        name: Key Value Pair
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          fn((state) => {
            const [keys, ...rows] = state.data.values;
            state.data = rows.map((item) => {
              const obj = item.reduce((acc, value, idx) => {
                acc[keys[idx]] = value;
                return acc;
              }, {});

              return obj;
            });

            return state;
          });

          fn((state) => {
            const isValidValue = value => value !== "" && value !== "NA";
            const optsMap = state.data.filter(o =>
              isValidValue(o["External ID"]) && isValidValue(o["DHIS2 DE full name"])
            )
              .map((o) => {
                return {
                  "value.display - Answers": o["Answers"],
                  "value.uuid - External ID": o["External ID"],
                  "DHIS2 DE full name": o["DHIS2 DE full name"],
                  "DHIS2 DE UID": o["DHIS2 DE UID"],
                  "OptionSet name": o["OptionSet name"],
                  "DHIS2 Option Set UID": o["DHIS2 Option Set name"],
                  "DHIS2 Option name": o["DHIS2 Option name"],
                  "DHIS2 Option UID": o["DHIS2 Option UID"],
                  "DHIS2 Option Code": o["DHIS2 Option code"],
                };
              })

            return { optsMap };
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      webhook->Fetch-OptionSets-Metadata:
        source_trigger: webhook
        target_job: Fetch-OptionSets-Metadata
        condition_type: always
        enabled: true
      Fetch-OptionSets-Metadata->Key-Value-Pair:
        source_job: Fetch-OptionSets-Metadata
        target_job: Key-Value-Pair
        condition_type: on_job_success
        enabled: true
  wf1-dhis2-omrs-migration:
    name: wf1-dhis2-omrs-migration
    jobs:
      Get-Teis:
        name: Get Teis
        adaptor: '@openfn/language-dhis2@latest'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf1/1-get-teis.js

      Get-Locations:
        name: Get Locations
        adaptor: '@openfn/language-dhis2@latest'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf1/2-get-locations.js

      Create-Patients:
        name: Create Patients
        adaptor: '@openfn/language-openmrs@latest'
        credential: mtuchi@openfn.org-OpenMRS-Demo
        body:
          path: workflows/wf1/3-create-patients.js

      Update-Teis:
        name: Update Teis
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf1/4-update-teis.js

    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: false
    edges:
      cron->Get-Teis:
        source_trigger: cron
        target_job: Get-Teis
        condition_type: always
        enabled: true
      Get-Teis->Get-Locations:
        source_job: Get-Teis
        target_job: Get-Locations
        condition_type: js_expression
        condition_label: has-teis
        condition_expression: |
          state.trackedEntityInstances.length > 0
        enabled: true
      Get-Locations->Create-Patients:
        source_job: Get-Locations
        target_job: Create-Patients
        condition_type: on_job_success
        enabled: true
      Create-Patients->Update-Teis:
        source_job: Create-Patients
        target_job: Update-Teis
        condition_type: on_job_success
        enabled: true
  wf2-omrs-dhis2:
    name: wf2-omrs-dhis2
    jobs:
      Get-Patients:
        name: Get Patients
        adaptor: '@openfn/language-openmrs@latest'
        credential: mtuchi@openfn.org-OpenMRS-Demo
        body:
          path: workflows/wf2/1-get-patients.js

      Upsert-TEIs:
        name: Upsert TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/2-upsert-teis.js

      Get-Encounters:
        name: Get Encounters
        adaptor: '@openfn/language-openmrs@4.0.0'
        credential: mtuchi@openfn.org-OpenMRS-Demo
        body:
          path: workflows/wf2/3-get-encounters.js

      Get-Options-Map:
        name: Get Options Map
        adaptor: '@openfn/language-http@latest'
        credential: null
        body:
          path: workflows/wf2/4-get-options-map.js

      Get-TEIs:
        name: Get TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/5-get-teis.js

      Create-Events:
        name: Create Events
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/6-create-events.js

      Mappings:
        name: Mappings
        adaptor: '@openfn/language-common@latest'
        credential: null
        body:
          path: workflows/wf2/2-mappings.js

      Update-TEIs:
        name: Update TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/7-update-teis.js

    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: false
    edges:
      cron->Get-Patients:
        source_trigger: cron
        target_job: Get-Patients
        condition_type: always
        enabled: true
      Upsert-TEIs->Get-Encounters:
        source_job: Upsert-TEIs
        target_job: Get-Encounters
        condition_type: js_expression
        condition_label: has-patient-uuids
        condition_expression: |
          state.patientUuids.length > 0 && !state.errors
        enabled: true
      Get-Encounters->Get-Options-Map:
        source_job: Get-Encounters
        target_job: Get-Options-Map
        condition_type: js_expression
        condition_label: has-encounters
        condition_expression: |
          state.encounters.length > 0
        enabled: true
      Get-TEIs->Create-Events:
        source_job: Get-TEIs
        target_job: Create-Events
        condition_type: js_expression
        condition_label: has-teis
        condition_expression: |
          state.TEIs && !state.errors
        enabled: true
      Get-Options-Map->Get-TEIs:
        source_job: Get-Options-Map
        target_job: Get-TEIs
        condition_type: on_job_success
        enabled: true
      Get-Patients->Mappings:
        source_job: Get-Patients
        target_job: Mappings
        condition_type: js_expression
        condition_label: has-patients
        condition_expression: |
          state.patients.length > 0 && !state.errors
        enabled: true
      Mappings->Upsert-TEIs:
        source_job: Mappings
        target_job: Upsert-TEIs
        condition_type: on_job_success
        enabled: true
      Create-Events->Update-TEIs:
        source_job: Create-Events
        target_job: Update-TEIs
        condition_type: js_expression
        condition_label: has-gender-updated
        condition_expression: |
          state.genderUpdated.length > 0 && !state.errors
        enabled: true
