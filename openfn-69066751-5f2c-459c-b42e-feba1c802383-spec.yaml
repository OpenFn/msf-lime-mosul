name: msf-lime-test
description: null
credentials:
  aleksa@openfn.org-AK-Sharepoint:
    name: AK Sharepoint
    owner: aleksa@openfn.org
  mtuchi@openfn.org-MSF-DHIS2-UAT:
    name: MSF DHIS2 UAT
    owner: mtuchi@openfn.org
  mtuchi@openfn.org-OpenFnSharepoint:
    name: OpenFnSharepoint
    owner: mtuchi@openfn.org
  mtuchi@openfn.org-OpenMRS-Demo:
    name: OpenMRS Demo
    owner: mtuchi@openfn.org
  "mtuchi@openfn.org-OpenMRS-Demo-(HTTP)":
    name: 'OpenMRS Demo (HTTP)'
    owner: mtuchi@openfn.org
  "mtuchi@openfn.org-googlesheets-(mtuchi@openfn.org)-2":
    name: 'googlesheets (mtuchi@openfn.org)-2'
    owner: mtuchi@openfn.org
  mtuchi@openfn.org-mtuchi-github-token:
    name: mtuchi-github-token
    owner: mtuchi@openfn.org
workflows:
  fetch-metadata-and-generate-opts-json:
    name: fetch-metadata-and-generate-opts-json
    jobs:
      Get-metadata-file-from-Sharepoint:
        name: Get metadata file from Sharepoint
        adaptor: '@openfn/language-msgraph@latest'
        credential: null
        body: |
          const toCamelCase = text => {
            return text
              .toLowerCase()
              .replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase());
          };

          const sheets = [
            'OptionSets',
            'F01-MHPSS Baseline',
            'F02-MHPSS Follow-up',
            'F03-mhGAP Baseline',
            'F04-mhGAP Follow-up',
            'F05-MHPSS Closure',
          ];

          fn(state => {
            state.siteId =
              'openfnorg.sharepoint.com,4724a499-afbc-4ded-a371-34ae40bf5d8d,1d20a7d4-a6f1-407c-aa77-76bd47bb0f32';
            return state;
          });

          getDrive(
            {
              id: $.siteId,
              owner: 'sites',
            },
            'default'
          );

          getFile('/msf-metadata/LIME EMR - Iraq Metadata - Release 1.xlsx', {
            metadata: true,
          });

          fn(state => {
            const itemId = state.data.id;
            const driveId = state.drives.default.id;
            state.workbookBase = `sites/${state.siteId}/drives/${driveId}/items/${itemId}/workbook`;
            return state;
          });

          each(
            sheets,
            get(`${$.workbookBase}/worksheets('${$.data}')/usedRange`, {}, state => {
              const sheetName = toCamelCase(state.references.at(-1));
              console.log('Fetched sheet: ', sheetName);
              state[sheetName] = state.data.values;
              return state;
            })
          );

          fn(state => {
            delete state.data;
            delete state.response;
            delete state.references;
            return state;
          });

      Map-metadata-file-to-option-set-Json-format:
        name: Map metadata file to option-set Json format
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          const isValidValue = value => value !== '' && value !== 'NA';

          const mapArrayToObject = (item, keys) => {
            return item.reduce((acc, value, idx) => {
              acc[keys[idx]] = value;
              return acc;
            }, {});
          };
          fn(state => {
            const { optionsets } = state;
            const keys = optionsets[1];

            const optsMap = optionsets.slice(2).map(item => mapArrayToObject(item, keys));

            state.optionSets = optsMap
              .filter(
                o =>
                  isValidValue(o['External ID']) && isValidValue(o['DHIS2 DE full name'])
              )
              .map(o => {
                return {
                  'value.display - Answers': o['Answers'],
                  'value.uuid - External ID': o['External ID'],
                  'DHIS2 DE full name': o['DHIS2 DE full name'],
                  'DHIS2 DE UID': o['DHIS2 DE UID'],
                  'OptionSet name': o['OptionSet name'],
                  'DHIS2 Option Set UID': o['DHIS2 Option Set name'],
                  'DHIS2 Option name': o['DHIS2 Option name'],
                  'DHIS2 Option UID': o['DHIS2 Option UID'],
                  'DHIS2 Option Code': o['DHIS2 Option code'],
                };
              });

            return state;
          });

          const safeKeyValuePairs = arr => {
            if (arr === null || arr === undefined) {
              return arr;
            }
            const mappedArr = arr.slice(2).map(item => mapArrayToObject(item, arr[1]));
            try {
              return mappedArr
                .filter(
                  o => isValidValue(o['External ID']) && isValidValue(o['DHIS2 DE UID'])
                )
                .reduce((acc, value) => {
                  acc[value['DHIS2 DE UID']] = value['External ID'];
                  return acc;
                }, {});
            } catch (error) {
              console.error(`Error processing ${arr}:`, error);
              return arr; // Return original value if processing fails
            }
          };

          fn(
            ({
              optionSets,
              f01MhpssBaseline,
              f02MhpssFollowUp,
              f03MhgapBaseline,
              f04MhgapFollowUp,
              f05MhpssClosure,
            }) => {
              const processedState = Object.fromEntries(
                Object.entries({
                  f01MhpssBaseline,
                  f02MhpssFollowUp,
                  f03MhgapBaseline,
                  f04MhgapFollowUp,
                  f05MhpssClosure,
                }).map(([key, value]) => [key, safeKeyValuePairs(value)])
              );

              return {
                optionSets,
                ...processedState,
              };
            }
          );

      Save-option-set-json-to-github:
        name: Save option-set json to github
        adaptor: '@openfn/language-http@latest'
        credential: null
        body: |
          const metadataPath =
            'repos/OpenFn/openfn-lime-pilot/contents/metadata/metadata_mapping.json';

          get(metadataPath, {
            headers: {
              'user-agent': 'OpenFn',
            },
          });

          fn(state => {
            const {
              optionSets,
              f01MhpssBaseline,
              f02MhpssFollowUp,
              f03MhgapBaseline,
              f04MhgapFollowUp,
              f05MhpssClosure,
              data,
            } = state;

            state.body = {
              message: 'Update metadata content',
              committer: {
                name: 'Emmanuel Evance',
                email: 'mtuchidev@gmail.com',
              },
              content: util.encode(
                JSON.stringify({
                  optionSets,
                  f01MhpssBaseline,
                  f02MhpssFollowUp,
                  f03MhgapBaseline,
                  f04MhgapFollowUp,
                  f05MhpssClosure,
                })
              ),
              sha: data.sha,
            };

            return state;
          });

          put(metadataPath, {
            body: $.body,
            headers: {
              Accept: 'application/vnd.github+json',
              'X-GitHub-Api-Version': '2022-11-28',
              'user-agent': 'OpenFn',
            },
          });

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      Get-metadata-file-from-Sharepoint->Map-metadata-file-to-option-set-Json-format:
        source_job: Get-metadata-file-from-Sharepoint
        target_job: Map-metadata-file-to-option-set-Json-format
        condition_type: on_job_success
        enabled: true
      Map-metadata-file-to-option-set-Json-format->Save-option-set-json-to-github:
        source_job: Map-metadata-file-to-option-set-Json-format
        target_job: Save-option-set-json-to-github
        condition_type: on_job_success
        enabled: true
      webhook->Get-metadata-file-from-Sharepoint:
        source_trigger: webhook
        target_job: Get-metadata-file-from-Sharepoint
        condition_type: always
        enabled: true
  wf-3-generate-optsmap:
    name: wf-3-generate-optsmap
    jobs:
      Fetch-OptionSets-Metadata:
        name: Fetch OptionSets Metadata
        adaptor: '@openfn/language-googlesheets@latest'
        credential: null
        body: |
          
          getValues('1OuR7laA7Oc2QnoiT8S3Thhf-HNh7uFY8ILLEu-idXuk', 
          'optionsets_oct1')

      Key-Value-Pair:
        name: Key Value Pair
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          fn((state) => {
            const [keys, ...rows] = state.data.values;
            state.data = rows.map((item) => {
              const obj = item.reduce((acc, value, idx) => {
                acc[keys[idx]] = value;
                return acc;
              }, {});

              return obj;
            });

            return state;
          });

          fn((state) => {
            const isValidValue = value => value !== "" && value !== "NA";
            const optsMap = state.data.filter(o =>
              isValidValue(o["External ID"]) && isValidValue(o["DHIS2 DE full name"])
            )
              .map((o) => {
                return {
                  "value.display - Answers": o["Answers"],
                  "value.uuid - External ID": o["External ID"],
                  "DHIS2 DE full name": o["DHIS2 DE full name"],
                  "DHIS2 DE UID": o["DHIS2 DE UID"],
                  "OptionSet name": o["OptionSet name"],
                  "DHIS2 Option Set UID": o["DHIS2 Option Set name"],
                  "DHIS2 Option name": o["DHIS2 Option name"],
                  "DHIS2 Option UID": o["DHIS2 Option UID"],
                  "DHIS2 Option Code": o["DHIS2 Option code"],
                };
              })

            return { optsMap };
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      Fetch-OptionSets-Metadata->Key-Value-Pair:
        source_job: Fetch-OptionSets-Metadata
        target_job: Key-Value-Pair
        condition_type: on_job_success
        enabled: true
      webhook->Fetch-OptionSets-Metadata:
        source_trigger: webhook
        target_job: Fetch-OptionSets-Metadata
        condition_type: always
        enabled: true
  wf1-dhis2-omrs-migration:
    name: wf1-dhis2-omrs-migration
    jobs:
      Fetch-Metadata:
        name: Fetch Metadata
        adaptor: '@openfn/language-http@latest'
        credential: null
        body: |
          fn(state => state)
      Get-Teis-and-Locations:
        name: Get Teis and Locations
        adaptor: '@openfn/language-dhis2@latest'
        credential: null
        body: |
          fn(state => {
            // const manualCursor = '2023-06-20T17:00:00.00';
            state.cursor = state.manualCursor || state.lastRunDateTime;
            console.log('Date cursor to filter TEI extract ::', state.cursor);

            return state;
          });

          // Get trackedEntityInstances that are "active" in the target program
          get(
            'tracker/trackedEntities',
            {
              orgUnit: 'OPjuJMZFLop',
              program: 'w9MSPn5oSqp',
              programStatus: 'ACTIVE',
            },
            {},
            state => {
              const trackedEntityInstances = state.data.instances
                .filter(tei => tei.updatedAt >= state.cursor) //for testing
                //.filter(tei => tei.createdAt > state.cursor) //for prod
                //.slice(0, 1); //to limit 1 for testing
              const offset = 2; // GMT+2 (Geneva time)
              const currentDateTime = new Date();
              currentDateTime.setHours(currentDateTime.getHours() + offset);

              const lastRunDateTime = currentDateTime.toISOString().replace('Z', '');
              //console.log('TEI payload found before filter ::', JSON.stringify(state.data.instances, null, 2));
              console.log('# of TEIs found before filter ::', state.data.instances.length);
              //console.log('lastUpdated of TEI eWXRNHtmHB0 :: ', JSON.stringify(state.data.instances.filter(tei => tei.trackedEntity == 'eWXRNHtmHB0'), null, 2)); 
              console.log('# of TEIs to migrate to OMRS ::', trackedEntityInstances.length);
              // console.log(
              //   'trackedEntityInstance IDs ::',
              //   trackedEntityInstances.map(tei => tei.trackedEntityInstance)
              // );

              console.log('Next sync start date:', lastRunDateTime);
              return {
                ...state,
                // data: {},
                references: [],
                trackedEntityInstances,
                lastRunDateTime,
              };
            }
          );


          get('optionGroups/kdef7pUey9f', {
            fields: 'id,displayName,options[id,displayName,code]',
          });

          fn(({ data, ...state }) => {
            state.locations = data;
            return state;
          });

          fn(state => {
            state.nationalityMap = {
              afghanistan: '84066564-253e-43d8-b141-76730cffa878',
              albania: 'db21f4f9-faf2-4358-8297-0ae76627b3b8',
              algeria: '5f6c017f-074c-46b3-92d0-d055e2094366',
              angola: '8a2e5a03-8a74-41ae-9a98-2310f9ce400d',
              anguilla: 'c911af8a-171c-4ee9-b1ff-934373e8a819',
              argentina: 'b83d24e8-34d8-4920-83c0-8ba014467ff4',
              armenia: '39f1652a-f2b7-4b65-a7e1-7097ac6cdef0',
              aruba: 'f3f1cba1-7c1e-4234-86a2-f27bb5964fee',
              azerbaijan: '29750013-0e35-47ca-8f77-9192a923fb07',
              bangladesh: 'a99de53c-ce76-4b1e-91b2-461094baf79e',
              belarus: '664baba4-c552-47b9-97c0-ff67dafd27d6',
              benin: 'cf863e31-bb38-48ed-90dd-f3dedcac304c',
              bhutan: 'd45a57c9-994f-4deb-8845-9b785860a2ec',
              bolivia: 'd8800d10-862b-42f1-8e22-cac1ce1bbcae',
              bosnia_and_herzegovina: '05d8f4ef-45eb-463d-b2f3-8a5a613ee6b9',
              botswana: '1304a0de-5b70-4d36-a873-e72a82963316',
              brazil: '353ff388-64e6-434c-b78f-ca9636390389',
              british_virgin_islands: 'b02c6d20-83a2-4947-8a7d-91d1f9c4d8a2',
              bulgaria: '91c85a62-2b02-483a-aefd-e29d368565fe',
              burkina_faso: '6c90c1ae-17a4-4e94-a267-4fba4c94efd8',
              burundi: '8a2ed0db-eaad-44bc-bf06-5cb1b2a3db0b',
              cambodia: '4fd14df8-8279-4dfa-bdd3-e1ab26bc0264',
              cameroon: '873552ac-9850-4cc1-ae09-17eb0fccf405',
              cape_verde: 'cfbc220a-1d6c-4469-bb6d-a8e3deb4f7e7',
              central_african_republic: '61a4c4a4-25c2-4459-a874-ec1d24f8323a',
              chad: '9e41e71c-f5d5-456c-a6f9-2129b8055bfc',
              chile: '05333883-44e9-4f57-836a-041391803007',
              china: '15016874-3e20-484a-baa8-9b94e1a3d358',
              colombia: 'a008dff8-ce96-4662-bf8a-372e43d424f0',
              comoros: '9d8738c8-40c2-4c66-aabb-ef176a20ffe8',
              costa_rica: 'fb52f8c9-40ec-4dc4-92a4-d465612de2ff',
              cote_divoire: '513cb36a-3f67-46ea-a789-fcdaca0e26f5',
              cuba: '147c2434-5d7e-420c-8053-ba623301f3f5',
              djibouti: 'cf5b334f-1c0f-41fc-ab54-53ff1e942830',
              dominica: 'f70e51e5-b76c-4c38-9bf2-ef8e1f308ce1',
              dominican_republic: 'ce72fc9b-619b-4c32-b865-600e888ad814',
              drc_congo: '8f6d3d2a-e09f-473b-99c9-e539f97ceab6',
              east_timor: '854f2f66-40e1-4a6a-9dee-09c832a52289',
              ecuador: 'f9810f9a-78a7-42a2-99e6-19c629642386',
              egypt: 'cc7343f8-9243-4d09-b378-58363850d624',
              el_salvador: '9a34935e-5a8a-45be-8ccd-cb23192e420f',
              equatorial_guinea: '7e591605-d723-4398-982a-8737af63a2dc',
              eritrea: 'c61f03c2-0d1f-444f-a974-0a61063aff71',
              ethiopia: '7478d375-014e-410e-a355-090143e88f5b',
              gabon: '9f46ae06-114a-47fa-8f8d-e9749f04da25',
              gambia: '5ec7ddd7-14a5-48ec-9e7c-8896d1010655',
              georgia: 'bc71788f-db69-4b6f-8d1c-57a74395bdd2',
              ghana: '2eb4ff46-d908-4148-9b0d-40ccfc1a655a',
              greece: 'b75d6bcc-fadf-4141-8d0f-2463154b89f7',
              guam: '51fa502b-98a3-4c42-b5fd-7b4d64489bb9',
              guatemala: '3725a4d2-b28f-466b-905a-bafeaeb75855',
              guinea: 'eeaff39c-8afd-43f7-b9a0-53729f5df1d8',
              guinea_bissau: '14e90203-9197-42ea-9222-acafd2fd6984',
              guyana: 'ba4dfa7e-f3cd-4e94-8ca7-6b96a93378a8',
              haiti: 'f76f7dcb-f82e-4257-a627-1685ff3f3586',
              honduras: 'cdd1336e-495b-4868-aace-57a84442d6fd',
              india: '378d0107-eb43-485d-930c-0704b4e5aa11',
              indonesia: '1cbe17e6-adc2-4680-bee0-54d94af75ebf',
              iran: 'b422270e-d8af-4a32-b523-742545a17a3f',
              iraq: '03aa7d6e-7656-48e4-8dc0-5e27706722c0',
              jordan: '842f963c-f84d-4076-a8db-337295fd9b91',
              kazakhstan: '6f6d0e78-2c81-411d-8d13-367e250dc110',
              kenya: 'ad351a33-8846-4cad-8195-b07b6041d4a5',
              kuwait: '4aee7a88-cda9-454e-9f25-4a6420270417',
              kyrgyzstan: 'ace3b851-042b-46a6-8fea-68aae042d614',
              laos: 'dfb01b39-c224-459e-b045-dd9461b9a1e5',
              lebanon: '7de78f22-f53e-48d2-923f-ae1e4d814f46',
              lesotho: 'b35b29c5-9bb7-4b40-ad33-29eecd28a9e6',
              liberia: 'a5fd61b4-fd27-433d-8428-7e88a7f27921',
              libya: '600c6af4-b767-423c-b942-7f06ca467258',
              macedonia: '5837cc40-9ab5-4088-91c8-ca6e4b57e903',
              madagascar: '3782bf3c-380e-4b60-b21a-38199073f112',
              malawi: 'e8b5f188-6a5c-43ae-b4a5-200abb13153e',
              malaysia: '3facca11-fbaa-4c40-8fac-4751d45c3f1b',
              mali: '3e844a47-526a-46f9-afea-1af9ff8690aa',
              martinique: '051ce04e-05e8-4430-8b75-3e499bbffbc8',
              mauritania: '8acb006b-8596-4a98-8177-acb4cb575956',
              mauritius: '17ced083-eb2a-4046-a713-26cabc7af95d',
              mayotte: '1af148fe-2698-4b89-bf7f-87e5c48b6848',
              mexico: '8381208f-01ca-4ed3-8f2c-f73ed1c316e3',
              moldova: 'f0e9c8b5-69b5-48df-8cb9-2d089ba04e46',
              mongolia: '9f341cb1-dcb5-4f6c-bd21-b57db01b4193',
              morocco: 'ef467a17-91e8-4124-a136-7ed8ff7c7d15',
              mozambique: '0916133b-4d93-4d60-9c20-e7ee3936f391',
              myanmar: 'e81ba700-f9fc-4ed0-b248-578a25717cdb',
              namibia: '0cb123dc-8810-4840-b6ab-6a527c5a79ef',
              nauru: '3386fe63-2158-4040-a502-9f65fd2079d3',
              nepal: 'fb01b01a-6775-423c-8012-7d43f587cb6c',
              new_caledonia: 'e67c072b-7707-491f-8c2e-13c914216b61',
              nicaragua: 'f6a9521c-596b-49f9-b914-67138e8c17e6',
              niger: '7561db90-a866-4443-93f4-95cac1d47e9c',
              nigeria: '4134651a-7f53-45fb-8bc6-7fed9cf36f51',
              north_korea: '4d3079e4-8568-48e6-9342-665896875a38',
              oman: '9b0af037-99d1-43b8-ac06-82137ec4b06d',
              other: 'Other',
              pakistan: 'f45d93c3-c9b0-4333-a5e6-299b7c425812',
              palestine: 'e2a19948-49aa-44c0-98ef-67ae1160ef43',
              panama: '1ef5a828-9d0d-4336-91ab-880d5dc0151c',
              papua_new_guinea: 'e1e6b451-d7fe-4954-b225-99b2de82a4c0',
              paraguay: 'd8412016-82f5-4801-a026-1bdc429850b7',
              peru: 'e74fa87f-8469-46b0-975f-6cb37c394564',
              philippines: 'bdbd5c9f-1f28-4f4d-a254-4a84f8bb2c8f',
              puerto_rico: '39fca1d0-d2e7-4b13-82bd-626fbec71252',
              republic_of_congo: '5db9afa5-b57e-4f45-8b1c-af766f14fc58',
              reunion: '1dae4b2d-50c9-4bf1-b25a-7063600a5e74',
              romania: '457e745e-ae97-463d-95a9-8d5689d3ca2b',
              rwanda: '6bc925a1-7699-496a-85b0-c290699381db',
              samoa: 'e03b381b-a7f4-40eb-964f-51571dc3c48c',
              sao_tome_and_principe: 'f66bbb42-684f-42d7-bfcd-95d586eb7dc9',
              saudi_arabia: 'fdf495a4-e60c-46f7-a8a2-61a216849086',
              senegal: 'ad948f1b-0733-4f8d-b049-d64289b43a10',
              serbia: 'd2e69cef-3bff-4220-ba91-a6a678fb606b',
              sierra_leone: 'ffba9caf-b6aa-4078-845e-578f7a7fd566',
              somalia: '99c8dccc-4dfa-4d30-86be-42a309ab431f',
              south_africa: '75882d62-1c55-480d-b411-8ca40c3307df',
              south_korea: '0603d6b9-334f-4443-ab60-7c5d457b95fc',
              south_sudan: 'f113e24e-2ea9-49a2-9b28-59241b9adb21',
              sri_lanka: 'b0031c01-d242-4410-b98b-cc1511590b85',
              sudan: '2f03a932-2b75-4e8b-9f44-0fcd83c75dc4',
              suriname: 'c65d3329-98d4-4dd7-89d3-141b70d00eb2',
              swaziland: '06a2703b-af17-4e44-83f5-6cc9a8a75320',
              switzerland: 'dcdcdc70-a006-4b0a-bac2-7de89b022b65',
              syria: '1e34ee55-ef9f-4386-bae6-6995555ded75',
              tajikistan: '34836c60-5449-48d6-b3c9-c0b3361b9f2c',
              tanzania: '050a8eb1-0d77-4f65-a2da-776a13bcd2a4',
              thailand: '289ac5bd-6434-4837-86bf-b54d22970ac8',
              togo: '6a583e64-869d-477d-a1c1-746320d45fc4',
              tonga: 'd381f06d-2365-4f40-948b-cfe90d8cb532',
              tunisia: '56be7864-fde6-4db3-8fa5-b9dd42cd9c53',
              turkey: '7429c779-1d3a-4aec-8256-d0b1637e1bd1',
              turkmenistan: '3ef17df5-299b-4385-9ea6-572df4b6f9ca',
              uganda: 'be3d11d3-446d-440c-a582-d01c7cbb0eda',
              ukraine: '38c99c8d-2b93-4848-a537-b1865a260bb2',
              unknown: 'Unknown',
              uruguay: 'c2e45baf-748b-4d7b-a391-ed6b802b6f94',
              uzbekistan: '60512350-d79b-41aa-aff0-1b28ca4aa5f1',
              venezuela: '557cea4a-0049-4b7a-b373-ed63f294a2a0',
              vietnam: '49509c5f-e533-48a8-bf06-86935e3376b2',
              western_sahara: '4086dfd2-f4f5-4107-93e8-07bee235af8f',
              yemen: '6a3214e0-f94b-414c-8148-968e24386671',
              zambia: '3ec0432d-ea37-4159-a658-29d6f07fe21a',
              zimbabwe: 'ce1b0d8d-0a2d-4f93-a6ed-64aca2fd0f45',
            };
            state.statusMap = {
              asylum_seeker: 'f921ffdd-72ca-4d58-a89b-1fa2e959d110',
              no_status: '2bacead2-f280-457c-9d28-e80e106f7d25',
              refugee: 'MSF-AAAAAA000000000000001929',
              single: '20b8524e-4c26-4fa0-81f0-fa23ebacc54d',
              married: 'MSF-AAAAAA000000000000001863',
              widowed: 'MSF-AAAAAA000000000000001864',
              divorced_separated: 'MSF-AAAAAA000000000000001865',
              concubine: '1060AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
              not_applicable: 'MSF-AAAAAA000000000000001823',
              student: 'MSF-AAAAAA000000000000001871',
              permanent_employee: '4a18a820-f3a1-4bb7-9138-558a9ecc81da',
              occasional_employee: '2cb73bee-7f94-4695-89c7-c81187dbc90c',
              unemployed: 'MSF-AAAAAA000000000000001870',
              housewife: '9b14b4d4-b749-4acf-acfe-79c480f3c4b3',
              other: 'MSF-AAAAAA000000000000001329',
              unknown: '1067AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',
              idp: 'MSF-AAAAAA000000000000001930',
              internationally_displaced: '515c5abe-4172-4d0c-a991-0de2888228d7',
              non_displaced: 'bbdb287c-4ba1-4944-bd87-eb126c5f9d92',
              returnee: 'fc49acaa-ece2-4365-9dfb-70c2105de8b1',
            };
            return state;
          });

      Create-Patients:
        name: Create Patients
        adaptor: '@openfn/language-openmrs@latest'
        credential: null
        body: |
          //Define gender options and prepare newPatientUuid and identifiers
          fn(state => {
            const genderOptions = {
              male: 'M',
              female: 'F',
              unknown: 'U',
              transgender_female: 'O',
              transgender_male: 'O',
              prefer_not_to_answer: 'O',
              gender_variant_non_conforming: 'O',
            };

            const identifiers = [];
            const newPatientUuid = [];

            const { trackedEntityInstances } = state;
            if (trackedEntityInstances.length > 0)
              console.log(
                '# of TEIs to send to OpenMRS: ',
                trackedEntityInstances.length
              );
            if (trackedEntityInstances.length === 0)
              console.log('No data fetched in step prior to sync.');

            return {
              ...state,
              genderOptions,
              newPatientUuid,
              identifiers,
            };
          });

          //First we generate a unique OpenMRS ID for each patient
          each(
            'trackedEntityInstances[*]',
            post(
              'idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier',
              {}
            ).then(state => {
              state.identifiers.push(state.data.identifier);
              return state;
            })
          );

          // Then we map trackedEntityInstances to openMRS data model
          fn(state => {
            const {
              trackedEntityInstances,
              identifiers,
              genderOptions,
              nationalityMap,
              statusMap,
              locations,
            } = state;

            const getValueForCode = (attributes, code) => {
              const result = attributes.find(attribute => attribute.code === code);
              return result ? result.value : undefined;
            };

            const calculateDOB = age => {
              const currentDate = new Date();
              const currentYear = currentDate.getFullYear();
              const birthYear = currentYear - age;

              const birthday = new Date(
                birthYear,
                currentDate.getMonth(),
                currentDate.getDay()
              );

              return birthday.toISOString().replace(/\.\d+Z$/, '+0000');
            };

            state.patients = trackedEntityInstances.map((d, i) => {
              const patientNumber = getValueForCode(d.attributes, 'patient_number'); // Add random number for testing + Math.random()

              const nationality =
                nationalityMap[getValueForCode(d.attributes, 'origin_nationality')];
              const currentStatus =
                statusMap[getValueForCode(d.attributes, 'current_status')];
              const legalStatus =
                getValueForCode(d.attributes, 'legal_status') &&
                statusMap[getValueForCode(d.attributes, 'legal_status')];
              const maritalStatus =
                statusMap[getValueForCode(d.attributes, 'marital_status')];
              const employmentStatus =
                statusMap[getValueForCode(d.attributes, 'occupation')];

              const noOfChildren = d.attributes.find(
                a => a.attribute === 'SVoT2cVLd5O'
              )?.value;

              const lonlat = d.attributes.find(a => a.attribute === 'rBtrjV1Mqkz')?.value;
              const location = lonlat
                ? locations.options.find(o => o.code === lonlat)?.displayName
                : undefined;

              let countyDistrict, cityVillage;

              if (location) {
                const match = location.match(/^(.*?)\s*\((.*?)\)/);
                if (match) {
                  [, countyDistrict, cityVillage] = match;
                  cityVillage = cityVillage.split('-')[0].trim(); // Remove country code and trim
                }
              }

              return {
                patientNumber,
                person: {
                  age: getValueForCode(d.attributes, 'age'),
                  gender: genderOptions[getValueForCode(d.attributes, 'sex')],
                  birthdate:
                    d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ??
                    calculateDOB(getValueForCode(d.attributes, 'age')),
                  birthdateEstimated: d.attributes.find(
                    a => a.attribute === 'WDp4nVor9Z7'
                  )
                    ? true
                    : false,
                  names: [
                    {
                      familyName:
                        d.attributes.find(a => a.attribute === 'fa7uwpCKIwa')?.value ??
                        'unknown',
                      givenName:
                        d.attributes.find(a => a.attribute === 'Jt9BhFZkvP2')?.value ??
                        'unknown',
                    },
                  ],
                  addresses: [
                    {
                      country: 'Iraq',
                      stateProvince: 'Ninewa',
                      countyDistrict,
                      cityVillage,
                    },
                  ],
                  attributes: [
                    {
                      attributeType: '24d1fa23-9778-4a8e-9f7b-93f694fc25e2',
                      value: nationality,
                    },
                    {
                      attributeType: 'e0b6ed99-72c4-4847-a442-e9929eac4a0f',
                      value: currentStatus,
                    },
                    legalStatus && {
                      attributeType: 'a9b2c642-097f-43f8-b96b-4d2f50ffd9b1',
                      value: legalStatus,
                    },
                    {
                      attributeType: '3884dc76-c271-4bcb-8df8-81c6fb897f53',
                      value: maritalStatus,
                    },
                    employmentStatus && {
                      attributeType: 'dd1f7f0f-ccea-4228-9aa8-a8c3b0ea4c3e',
                      value: employmentStatus,
                    },
                    noOfChildren && {
                      attributeType: 'e363161a-9d5c-4331-8463-238938f018ed',
                      value: noOfChildren,
                    },
                  ].filter(i => i),
                },

                identifiers: [
                  {
                    identifier: identifiers[i], //map ID value from DHIS2 attribute
                    identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',
                    location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location old:44c3efb0-2583-4c80-a79e-1f756a03c0a1
                    preferred: true,
                  },
                  {
                    uuid: d.trackedEntity,
                    identifier: patientNumber,
                    identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f', //Old Identification number
                    location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location
                    preferred: false, //default value for this identifiertype
                  },
                ],
              };
            });

            return state;
          });

          // Creating patients in openMRS
          each(
            '$.patients[*]',
            upsert(
              'patient',
              state => {
                return { q: state.data.patientNumber };
              },
              state => {
                const { patientNumber, ...patient } = state.data;
                console.log(
                  'Upserting patient record\n',
                  JSON.stringify(patient, null, 2)
                );
                return patient;
              },
              state => {
                state.newPatientUuid.push({
                  patient_number: state.references.at(-1)?.patientNumber,
                  uuid: state.data.uuid,
                });
                return state;
              }
            )
          );

          // Clean up state
          fn(({ data, references, ...state }) => state);

      Update-Teis:
        name: Update Teis
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: null
        body: |
          fn(state => {
            if (state.newPatientUuid.length === 0) {
              console.log('No data fetched in step prior to sync.');
            }

            console.log(
              'newPatientUuid ::',
              JSON.stringify(state.newPatientUuid, null, 2)
            );
            return state;
          });

          // Update TEI on DHIS2
          each(
            'newPatientUuid[*]',
            upsert(
              'trackedEntityInstances',
              state => ({
                ou: 'OPjuJMZFLop',
                program: 'w9MSPn5oSqp',
                filter: [`P4wdYGkldeG:Eq:${state.data.patient_number}`],
              }),
              {
                orgUnit: 'OPjuJMZFLop',
                program: 'w9MSPn5oSqp',
                trackedEntityType: 'cHlzCA2MuEF',
                attributes: [
                  { attribute: 'P4wdYGkldeG', value: `${$.data.patient_number}` }, //DHIS2 patient number to use as lookup key
                  { attribute: 'AYbfTPYMNJH', value: `${$.data.patient.uuid}` }, //OMRS patient uuid
                  {
                    attribute: 'ZBoxuExmxcZ',
                    value: `${$.data.patient.identifier[0].identifier}`,
                  }, //id generated in wf1-2 e.g., "IQ146-24-000-027"
                ],
              }
            )
          );

    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: false
    edges:
      cron->Fetch-Metadata:
        source_trigger: cron
        target_job: Fetch-Metadata
        condition_type: always
        enabled: true
      Fetch-Metadata->Get-Teis-and-Locations:
        source_job: Fetch-Metadata
        target_job: Get-Teis-and-Locations
        condition_type: on_job_success
        enabled: true
      Create-Patients->Update-Teis:
        source_job: Create-Patients
        target_job: Update-Teis
        condition_type: on_job_success
        enabled: true
      Get-Teis-and-Locations->Create-Patients:
        source_job: Get-Teis-and-Locations
        target_job: Create-Patients
        condition_type: js_expression
        condition_label: has-teis
        condition_expression: |
          state.teis.length > 0 && !state.errors
        enabled: true
  wf2-omrs-dhis2:
    name: wf2-omrs-dhis2
    jobs:
      Get-Patients:
        name: Get Patients
        adaptor: '@openfn/language-openmrs@latest'
        credential: null
        body: |
          //Here we define the date cursor
          //$.cursor at beggining of the project 2023-05-20T06:01:24.000+0000
          cursor($.lastRunDateTime || $.manualCursor || '2023-05-20T06:01:24.000+0000');
          // Update the lastRunDateTime for the next run
          cursor('today', {
            key: 'lastRunDateTime',
            format: c => dateFns.format(new Date(c), "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"),
          });

          searchPatient({ q: 'IQ', v: 'full', limit: '100' });
          //searchPatient({ q: 'Katrina', v: 'full', limit: '100' });
          //Query all patients (q=all) not supported on demo OpenMRS; needs to be configured
          //...so we query all Patients with name "Patient" instead

          fn(state => {
            const { cursor, data, lastRunDateTime } = state;
            console.log('Filtering patients since:', cursor);

            const patients = data.results.filter(({ auditInfo }) => {
              const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;
              return lastModified > cursor;
            });
            console.log('# of patients to sync to dhis2 ::', patients.length);
            console.log(
              'uuids of patients to sync to dhis2 ::',
              patients.map(p => p.uuid)
            );

            return { cursor, lastRunDateTime, patients };
          });

      Upsert-TEIs:
        name: Upsert TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: null
        body: |
          const buildPatientsUpsert = (state, patient, isNewPatient) => {
            const { nationalityMap, statusMap, placeOflivingMap, genderOptions } = state;
            const DHIS2_PATIENT_NUMBER = '8d79403a-c2cc-11de-8d13-0010c6dffd0f'; //DHIS2 ID or DHIS2 Patient Number
            const OPENMRS_AUTO_ID = '05a29f94-c0ed-11e2-94be-8c13b969e334'; //MSF ID or OpenMRS Patient Number
            const dateCreated = patient.auditInfo.dateCreated.substring(0, 10);
            const findIdentifierByUuid = (identifiers, targetUuid) =>
              identifiers.find(i => i.identifierType.uuid === targetUuid)?.identifier;

            const enrollments = [
              {
                orgUnit: 'OPjuJMZFLop',
                program: 'w9MSPn5oSqp',
                programStage: 'MdTtRixaC1B',
                enrollmentDate: dateCreated,
              },
            ];

            const payload = {
              query: {
                ou: 'OPjuJMZFLop',
                program: 'w9MSPn5oSqp',
                filter: [`AYbfTPYMNJH:Eq:${patient.uuid}`], //upsert on omrs.patient.uid
              },
              data: {
                program: 'w9MSPn5oSqp',
                orgUnit: 'OPjuJMZFLop',
                trackedEntityType: 'cHlzCA2MuEF',
                attributes: [
                  {
                    attribute: 'fa7uwpCKIwa',
                    value: patient.person?.names[0]?.givenName,
                  },
                  {
                    attribute: 'Jt9BhFZkvP2',
                    value: patient.person?.names[0]?.familyName,
                  },
                  {
                    attribute: 'P4wdYGkldeG', //DHIS2 ID ==> "Patient Number"
                    value:
                      findIdentifierByUuid(patient.identifiers, DHIS2_PATIENT_NUMBER) ||
                      findIdentifierByUuid(patient.identifiers, OPENMRS_AUTO_ID), //map OMRS ID if no DHIS2 id
                  },
                  {
                    attribute: 'ZBoxuExmxcZ', //MSF ID ==> "OpenMRS Patient Number"
                    value: findIdentifierByUuid(patient.identifiers, OPENMRS_AUTO_ID),
                  },
                  {
                    attribute: 'AYbfTPYMNJH', //"OpenMRS Patient UID"
                    value: patient.uuid,
                  },
                  {
                    attribute: 'qptKDiv9uPl',
                    value: genderOptions[patient.person.gender],
                  },
                  {
                    attribute: 'T1iX2NuPyqS',
                    value: patient.person.age,
                  },
                  {
                    attribute: 'WDp4nVor9Z7',
                    value: patient.person.birthdate.slice(0, 10),
                  },
                  {
                    attribute: 'rBtrjV1Mqkz', //Place of living
                    value: placeOflivingMap[patient.person?.addresses[0]?.cityVillage],
                  },
                  {
                    attribute: 'Xvzc9e0JJmp', //nationality
                    value:
                      nationalityMap[
                        patient.person.attributes.find(
                          a =>
                            a.attributeType.uuid ===
                            '24d1fa23-9778-4a8e-9f7b-93f694fc25e2'
                        )?.value?.uuid
                      ], //input.attributeType = "24d1fa23-9778-4a8e-9f7b-93f694fc25e2"
                  },
                  {
                    attribute: 'YUIQIA2ClN6', //current status
                    value:
                      statusMap[
                        patient.person.attributes.find(
                          a =>
                            a.attributeType.uuid ===
                            'e0b6ed99-72c4-4847-a442-e9929eac4a0f'
                        )?.value?.uuid
                      ], //input.attributeType = "e0b6ed99-72c4-4847-a442-e9929eac4a0f"
                  },
                  // TODO: Qq6xQ2s6LO8 has an error, Aleksa to ask the client
                  {
                    attribute: 'Qq6xQ2s6LO8', //legal status
                    value:
                      statusMap[
                        patient.person.attributes.find(
                          a =>
                            a.attributeType.uuid ===
                            'a9b2c642-097f-43f8-b96b-4d2f50ffd9b1'
                        )?.value?.uuid
                      ], //input.attributeType = "a9b2c642-097f-43f8-b96b-4d2f50ffd9b1"
                  },
                  {
                    attribute: 'FpuGAOu6itZ', //marital status
                    value:
                      statusMap[
                        patient.person.attributes.find(
                          a =>
                            a.attributeType.uuid ===
                            '3884dc76-c271-4bcb-8df8-81c6fb897f53'
                        )?.value?.uuid
                      ], //input.attributeType = "3884dc76-c271-4bcb-8df8-81c6fb897f53"
                  },
                  {
                    attribute: 'v7k4OcXrWR8', //employment status
                    value:
                      statusMap[
                        patient.person.attributes.find(
                          a =>
                            a.attributeType.uuid ===
                            'dd1f7f0f-ccea-4228-9aa8-a8c3b0ea4c3e'
                        )?.value?.uuid
                      ], //input.attributeType = "dd1f7f0f-ccea-4228-9aa8-a8c3b0ea4c3e"
                  },
                  {
                    attribute: 'SVoT2cVLd5O', //Number of children
                    value: patient.person.attributes.find(
                      a => a.attributeType.uuid === 'e363161a-9d5c-4331-8463-238938f018ed'
                    )?.value, //input.attributeType = "e363161a-9d5c-4331-8463-238938f018ed"
                  },
                ],
              },
            };

            console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));

            if (isNewPatient) {
              console.log('create enrollment');
              payload.data.enrollments = enrollments;
            }

            return payload;
          };

          const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

          each(
            '$.patients[*]',
            get(
              'tracker/trackedEntities',
              {
                orgUnit: 'OPjuJMZFLop',
                filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],
                program: 'w9MSPn5oSqp',
              },
              {},
              async state => {
                const patient = state.references.at(-1);
                console.log(patient.uuid, 'patient uuid');

                const isNewPatient = state.data.instances.length === 0;

                state.patientsUpsert ??= [];
                state.patientsUpsert.push(
                  buildPatientsUpsert(state, patient, isNewPatient)
                );
                await delay(2000);
                return state;
              }
            )
          );

          // Upsert TEIs to DHIS2
          each(
            $.patientsUpsert,
            upsert('trackedEntityInstances', $.data.query, $.data.data)
          );
          fn(state => {
            const {
              data,
              response,
              references,
              patients,
              statusMap,
              patientsUpsert,
              nationalityMap,
              placeOflivingMap,
              genderOptions,
              ...next
            } = state;

            next.patientUuids = patients.map(p => p.uuid);
            return next;
          });

      Get-Encounters:
        name: Get Encounters
        adaptor: '@openfn/language-openmrs@4.0.0'
        credential: null
        body: |
          const formUuids = [
            '82db23a1-4eb1-3f3c-bb65-b7ebfe95b19b',
            '6a3e1e0e-dd13-3465-b8f5-ee2d42691fe5',
            'be8c12f9-e6fd-369a-9bc7-46a191866f15',
            '48577ac5-d9c0-3000-9bac-075409b38336',
            'ee6b1b06-3163-334a-8538-be69250af727',
          ];
          // Fetch patient encounters then filter by cursor date
          // OpenMRS demo instance does not support querying ALL records (q=all)
          each(
            '$.patientUuids[*]',
            getEncounters({ patient: $.data, v: 'full' }, state => {
              const patientUuid = state.references.at(-1);
              const filteredEncounters = formUuids.map(formUuid =>
                state.data.results.filter(
                  encounter =>
                    encounter.encounterDatetime >= state.cursor &&
                    encounter?.form?.uuid === formUuid
                )
              );

              state.encounters ??= [];
              state.encounters.push(
                filteredEncounters.map(encounters => encounters[0]).filter(e => e)
              );

              console.log(
                filteredEncounters.flat().length,
                `# of filtered encounters found in OMRS for ${patientUuid}`
              );

              return state;
            })
          );

          // Log filtered encounters
          fn(state => {
            const {
              data,
              index,
              response,
              encounters,
              references,
              patientUuids,
              ...next
            } = state;
            next.encounters = encounters.flat();
            console.log(next.encounters.length, '# of new encounters to sync to dhis2');

            return next;
          });

      Get-Options-Map:
        name: Get Options Map
        adaptor: '@openfn/language-http@latest'
        credential: null
        body: |
          // state.mhgapClosure = { //Waiting on form
          //   yUT7HyjWurN: 'encounter-date', // encounterDate
          // };
          get(
            'https://raw.githubusercontent.com/OpenFn/openfn-lime-pilot/refs/heads/main/metadata/metadata_mapping.json',
            { parseAs: 'json' }
          );

          fn(({ data, response, references, ...next }) => {
            const {
              optionSets,
              f01MhpssBaseline,
              f02MhpssFollowUp,
              f03MhgapBaseline,
              f04MhgapFollowUp,
              f05MhpssClosure,
            } = data;

            next.optionSets = optionSets;
            next.formMaps = {
              '6a3e1e0e-dd13-3465-b8f5-ee2d42691fe5': {
                //formName: mhpss baseline
                programStage: 'MdTtRixaC1B',
                dataValueMap: f01MhpssBaseline,
              },
              '82db23a1-4eb1-3f3c-bb65-b7ebfe95b19b': {
                ////formName: mhgap baseline
                programStage: 'EZJ9FsNau7Q',
                dataValueMap: f03MhgapBaseline,
              },
              'be8c12f9-e6fd-369a-9bc7-46a191866f15': {
                //formName: mhpss followup
                programStage: 'eUCtSH80vMe',
                dataValueMap: f02MhpssFollowUp,
              },
              '48577ac5-d9c0-3000-9bac-075409b38336': {
                //formName: mhgap followup
                programStage: 'hjHwYnSfJnX',
                dataValueMap: f04MhgapFollowUp,
              },
              'ee6b1b06-3163-334a-8538-be69250af727': {
                //formName: mhpss closure
                programStage: 'xrCTheIzyDV',
                dataValueMap: f05MhpssClosure,
              },
            };
            return next;
          });

      Get-TEIs:
        name: Get TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: null
        body: |
          const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

          each(
            '$.encounters[*]',
            get(
              'tracker/trackedEntities',
              {
                orgUnit: 'OPjuJMZFLop',
                program: 'w9MSPn5oSqp',
                filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],
                fields: '*',
              },
              {},
              async state => {
                const encounter = state.references.at(-1);
                console.log(encounter.patient.uuid, 'Encounter patient uuid');

                const { trackedEntity, enrollments } = state.data?.instances?.[0] || {};
                if (trackedEntity && enrollments) {
                  state.TEIs ??= {};
                  state.TEIs[encounter.patient.uuid] = {
                    trackedEntity,
                    enrollment: enrollments[0]?.enrollment,
                  };
                }

                await delay(2000);
                return state;
              }
            )
          );

      Create-Events:
        name: Create Events
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: null
        body: |
          const processAnswer = (answer, conceptUuid, dataElement, optionSets) => {
            // console.log('Has answer', conceptUuid, dataElement);
            return typeof answer.value === 'object'
              ? processObjectAnswer(answer, conceptUuid, dataElement, optionSets)
              : processOtherAnswer(answer, conceptUuid, dataElement);
          };

          const processObjectAnswer = (answer, conceptUuid, dataElement, optionSets) => {
            if (isDiagnosisByPsychologist(conceptUuid, dataElement)) {
              return '' + answer.value.uuid === '278401ee-3d6f-4c65-9455-f1c16d0a7a98';
            }
            return findMatchingOption(answer, optionSets);
          };

          const processOtherAnswer = (answer, conceptUuid, dataElement) => {
            if (isPhq9Score(answer.value, conceptUuid, dataElement)) {
              return getRangePhq(answer.value);
            }
            return answer.value;
          };

          const processNoAnswer = (data, conceptUuid, dataElement) => {
            // console.log('No answer', conceptUuid, dataElement);
            if (isEncounterDate(conceptUuid, dataElement)) {
              return data.encounterDatetime.replace('+0000', '');
            }
            return '';
          };

          const findMatchingOption = (answer, optionSets) => {
            const matchingOption = optionSets.find(
              o => o['value.uuid - External ID'] === answer.value.uuid
            )?.['DHIS2 Option Code'];

            return matchingOption || '';
          };

          const isEncounterDate = (conceptUuid, dataElement) => {
            return (
              conceptUuid === 'encounter-date' &&
              ['CXS4qAJH2qD', 'I7phgLmRWQq', 'yUT7HyjWurN'].includes(dataElement)
            );
          };

          const isDiagnosisByPsychologist = (conceptUuid, dataElement) =>
            conceptUuid === '722dd83a-c1cf-48ad-ac99-45ac131ccc96' &&
            dataElement === 'pN4iQH4AEzk';

          const isPhq9Score = (value, conceptUuid, dataElement) =>
            typeof value === 'number' &&
            conceptUuid === '5f3d618e-5c89-43bd-8c79-07e4e98c2f23' &&
            dataElement === 'tsFOVnlc6lz';

          const getRangePhq = input => {
            if (input >= 20) return '>20';
            if (input >= 15) return '15_19';
            if (input >= 10) return '10_14';
            if (input >= 5) return '5_9';
            return '0_4';
          };

          const dataValuesMapping = (data, dataValueMap, optionSets) => {
            return Object.keys(dataValueMap)
              .map(dataElement => {
                const conceptUuid = dataValueMap[dataElement];
                const answer = data.obs.find(o => o.concept.uuid === conceptUuid);
                const value = answer
                  ? processAnswer(answer, conceptUuid, dataElement, optionSets)
                  : processNoAnswer(data, conceptUuid, dataElement);

                return { dataElement, value };
              })
              .filter(d => d);
          };

          // Prepare DHIS2 data model for create events
          fn(state => {
            state.encountersMapping = state.encounters.map(data => {
              const form = state.formMaps[data.form.uuid];
              const eventDate = data.encounterDatetime.replace('+0000', '');
              const { trackedEntity, enrollment } = state.TEIs[data.patient.uuid];

              const event = {
                program: 'w9MSPn5oSqp',
                orgUnit: 'OPjuJMZFLop',
                trackedEntityInstance: trackedEntity,
                enrollment,
                eventDate,
              };
              if (form) {
                return {
                  ...event,
                  programStage: form.programStage,
                  dataValues: dataValuesMapping(data, form.dataValueMap, state.optionSets),
                };
              }
            });

            return state;
          });

          // Create events for each encounter
          each(
            '$.encountersMapping[*]',
            create(
              'events',
              state => {
                console.log('dhis2 event to import:: ', state.data);
                return state.data;
              },
              {
                params: {
                  dataElementIdScheme: 'UID',
                },
              }
            )
          );

          fn(state => {
            const latestGenderUpdate = state.encounters.reduce((acc, e) => {
              const answer = e.obs.find(
                o => o.concept.uuid === 'ec42d68d-3e23-43de-b8c5-a03bb538e7c7'
              );
              if (answer) {
                const personUuid = answer.person.uuid;
                if (
                  !acc[personUuid] ||
                  new Date(answer.obsDatetime) > new Date(acc[personUuid].obsDatetime)
                ) {
                  acc[personUuid] = answer;
                }
              }
              return acc;
            }, {});

            state.genderUpdated = Object.values(latestGenderUpdate);

            return state;
          });

          // Return only lastRunDateTime
          fnIf(
            state => state.genderUpdated.length === 0,
            ({ lastRunDateTime }) => ({ lastRunDateTime })
          );

      Mappings:
        name: Mappings
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          fn(state => {
            state.placeOflivingMap = {
              'Al Ayadya': 'lon42.423409_lat36.481517',
              'Al Bosaif': 'lon43.159987_lat36.27218',
              'Al Jazaer': 'lon43.164382_lat36.354178',
              'Al Karama': 'lon43.203229_lat36.341201',
              'Al Mothana': 'lon43.171821_lat36.37478',
              'Al Nabi Younis': 'lon43.165939_lat36.348147',
              'Al Qawsyat': 'lon43.103793_lat36.440127',
              'Al Rashedia': 'lon43.092499_lat36.405267',
              'Al Sahaji': 'lon42.94467_lat36.280869',
              'Al Salamya': 'lon43.314713_lat36.142365',
              'Al Shora': 'lon43.223899_lat35.994031',
              'Al Sokar': 'lon43.169151_lat36.389263',
              'Al Zahra': 'lon43.209061_lat36.384103',
              'Al-Abar': 'lon43.097359_lat36.337313',
              'Al-Adba': 'lon43.107228_lat36.228804',
              Alamel: 'lon43.095958_lat36.324676',
              'Al-Araby': 'lon43.116613_lat36.405873',
              Alathba: 'lon43.107062_lat36.228771',
              'Al-Auraiby': 'lon43.092403_lat36.35815',
              'Al-Baaj': 'lon41.715935_lat36.04154',
              'Al-Bakeer': 'lon43.2005_lat36.372429',
              'Al-Dandan': 'lon43.146081_lat36.33257',
              'Al-Ekhaa': 'lon43.216323_lat36.353175',
              'Al-Ektasadeen': 'lon43.086044_lat36.361673',
              'Al-Entesar': 'lon43.213825_lat36.326253',
              Aleslaah: 'lon43.082506_lat36.350517',
              'Al-Faroak': 'lon43.128901_lat36.337586',
              Alflah: 'lon43.183338_lat36.394155',
              Algosq: 'lon43.150265_lat36.327732',
              Algzlany: 'lon43.137129_lat36.320443',
              'Al-Hadbaa': 'lon43.15051_lat36.394474',
              Alhrmat: 'lon43.072674_lat36.362245',
              'Al-Humaidat': 'lon42.978138_lat36.403105',
              Aljazeera: 'lon42.268108_lat35.764664',
              'Al-Kadasia': 'lon43.200525_lat36.380719',
              'Al-Kuba': 'lon43.072704_lat36.410733',
              'Al-Ma`Mun': 'lon43.10664_lat36.310099',
              'Al-Maghrab': 'lon43.079798_lat36.334318',
              Almalayeen: 'lon43.103821_lat36.424167',
              'Al-Masarf': 'lon43.179613_lat36.38814',
              'Al-Matahen': 'lon43.09246_lat36.338635',
              Almnsoor: 'lon43.11188_lat36.318691',
              Almoaly: 'lon42.838777_lat36.324391',
              Almohalabya: 'lon42.703975_lat36.265162',
              Almshahda: 'lon43.120709_lat36.343216',
              'Al-Mualamin': 'lon42.923458_lat36.31039',
              Almuhandseen: 'lon43.137239_lat36.367498',
              Alngar: 'lon43.100449_lat36.357173',
              Alnuor: 'lon43.187796_lat36.365769',
              Alobor: 'lon43.059863_lat36.313292',
              Alquds: 'lon43.22851_lat36.344222',
              'Al-Qyaraa': 'lon43.29582_lat35.798215',
              Alresala: 'lon43.090091_lat36.322804',
              'Al-Rifa`I': 'lon43.102846_lat36.360217',
              'Al-Saaha': 'lon43.097854_lat36.34371',
              'Al-Sahaji': 'lon42.94396_lat36.280114',
              'Al-Samah': 'lon43.212253_lat36.35825',
              'Al-Sekak': 'lon43.100669_lat36.339441',
              'Al-Shefaa': 'lon43.121928_lat36.352',
              Alshohadaa: 'lon43.101322_lat36.318532',
              Alshykhan: 'lon43.350052_lat36.691541',
              'Alsinaa Alkadema': 'lon43.071956_lat36.347428',
              Alsmood: 'lon43.111796_lat36.320265',
              'Al-Tahrer': 'lon43.201287_lat36.390342',
              'Al-Taiaran': 'lon43.140315_lat36.325341',
              Altank: 'lon43.069844_lat36.334344',
              Althoraa: 'lon43.110259_lat36.343145',
              'Al-Wahdaa': 'lon43.184839_lat36.331538',
              'Al-Warshan': 'lon43.097102_lat36.350075',
              Alyrmoq: 'lon43.082273_lat36.336458',
              Alzngly: 'lon43.109626_lat36.353944',
              'Aski Mousl': 'lon42.73514_lat36.513471',
              Auenat: 'lon42.399071_lat36.67976',
              'Bab Al-Bead': 'lon43.127605_lat36.334953',
              Badush: 'lon42.967959_lat36.41445',
              Bartella: 'lon43.380304_lat36.349597',
              Basheeka: 'lon43.342171_lat36.451798',
              Dohok: 'lon42.9842_lat36.859369',
              Gogjali: 'lon43.246833_lat36.353981',
              'Hamaam Alaleel': 'lon43.260379_lat36.160157',
              'Hawi Al-Kanisa': 'lon43.085152_lat36.381247',
              'Mosul Algdida': 'lon43.104377_lat36.331809',
              'Mosul Al-Kadema': 'lon43.126541_lat36.342823',
              Msherfa: 'lon43.179668_lat36.387648',
              Nablus: 'lon43.084701_lat36.328359',
              Rabeaa: 'lon42.08276_lat36.808678',
              'Ragm Hadid': 'lon43.076396_lat36.326236',
              Sadam: 'lon43.208775_lat36.383105',
              Sanjar: 'lon41.864538_lat36.316244',
              Somer: 'lon43.200918_lat36.301028',
              Sumeel: 'lon42.847606_lat36.857084',
              'Tal Abta': 'lon42.563028_lat35.94226',
              'Tal Afer': 'lon42.450003_lat36.374589',
              'Tal Alroman': 'lon43.089466_lat36.316493',
              'Tal Keef': 'lon43.120284_lat36.489935',
              'Tal Zalt': 'lon42.829782_lat36.282837',
              Tmooz: 'lon43.084933_lat36.365008',
              'Twim & Mjarin': 'lon42.692998_lat36.363335',
              'Wady Alaen': 'lon43.103452_lat36.325881',
              'Wady Hagr': 'lon43.126976_lat36.320946',
              Zakho: 'lon42.688446_lat37.146393',
              Zumar: 'lon42.603252_lat36.655901',
              Other: 'lon0.0_lat0.0',
            };
            return state;
          });
          fn(state => {
            state.nationalityMap = {
              '84066564-253e-43d8-b141-76730cffa878': 'afghanistan',
              'db21f4f9-faf2-4358-8297-0ae76627b3b8': 'albania',
              '5f6c017f-074c-46b3-92d0-d055e2094366': 'algeria',
              '8a2e5a03-8a74-41ae-9a98-2310f9ce400d': 'angola',
              'c911af8a-171c-4ee9-b1ff-934373e8a819': 'anguilla',
              'b83d24e8-34d8-4920-83c0-8ba014467ff4': 'argentina',
              '39f1652a-f2b7-4b65-a7e1-7097ac6cdef0': 'armenia',
              'f3f1cba1-7c1e-4234-86a2-f27bb5964fee': 'aruba',
              '29750013-0e35-47ca-8f77-9192a923fb07': 'azerbaijan',
              'a99de53c-ce76-4b1e-91b2-461094baf79e': 'bangladesh',
              '664baba4-c552-47b9-97c0-ff67dafd27d6': 'belarus',
              'cf863e31-bb38-48ed-90dd-f3dedcac304c': 'benin',
              'd45a57c9-994f-4deb-8845-9b785860a2ec': 'bhutan',
              'd8800d10-862b-42f1-8e22-cac1ce1bbcae': 'bolivia',
              '05d8f4ef-45eb-463d-b2f3-8a5a613ee6b9': 'bosnia_and_herzegovina',
              '1304a0de-5b70-4d36-a873-e72a82963316': 'botswana',
              '353ff388-64e6-434c-b78f-ca9636390389': 'brazil',
              'b02c6d20-83a2-4947-8a7d-91d1f9c4d8a2': 'british_virgin_islands',
              '91c85a62-2b02-483a-aefd-e29d368565fe': 'bulgaria',
              '6c90c1ae-17a4-4e94-a267-4fba4c94efd8': 'burkina_faso',
              '8a2ed0db-eaad-44bc-bf06-5cb1b2a3db0b': 'burundi',
              '4fd14df8-8279-4dfa-bdd3-e1ab26bc0264': 'cambodia',
              '873552ac-9850-4cc1-ae09-17eb0fccf405': 'cameroon',
              'cfbc220a-1d6c-4469-bb6d-a8e3deb4f7e7': 'cape_verde',
              '61a4c4a4-25c2-4459-a874-ec1d24f8323a': 'central_african_republic',
              '9e41e71c-f5d5-456c-a6f9-2129b8055bfc': 'chad',
              '05333883-44e9-4f57-836a-041391803007': 'chile',
              '15016874-3e20-484a-baa8-9b94e1a3d358': 'china',
              'a008dff8-ce96-4662-bf8a-372e43d424f0': 'colombia',
              '9d8738c8-40c2-4c66-aabb-ef176a20ffe8': 'comoros',
              'fb52f8c9-40ec-4dc4-92a4-d465612de2ff': 'costa_rica',
              '513cb36a-3f67-46ea-a789-fcdaca0e26f5': 'cote_divoire',
              '147c2434-5d7e-420c-8053-ba623301f3f5': 'cuba',
              'cf5b334f-1c0f-41fc-ab54-53ff1e942830': 'djibouti',
              'f70e51e5-b76c-4c38-9bf2-ef8e1f308ce1': 'dominica',
              'ce72fc9b-619b-4c32-b865-600e888ad814': 'dominican_republic',
              '8f6d3d2a-e09f-473b-99c9-e539f97ceab6': 'drc_congo',
              '854f2f66-40e1-4a6a-9dee-09c832a52289': 'east_timor',
              'f9810f9a-78a7-42a2-99e6-19c629642386': 'ecuador',
              'cc7343f8-9243-4d09-b378-58363850d624': 'egypt',
              '9a34935e-5a8a-45be-8ccd-cb23192e420f': 'el_salvador',
              '7e591605-d723-4398-982a-8737af63a2dc': 'equatorial_guinea',
              'c61f03c2-0d1f-444f-a974-0a61063aff71': 'eritrea',
              '7478d375-014e-410e-a355-090143e88f5b': 'ethiopia',
              '9f46ae06-114a-47fa-8f8d-e9749f04da25': 'gabon',
              '5ec7ddd7-14a5-48ec-9e7c-8896d1010655': 'gambia',
              'bc71788f-db69-4b6f-8d1c-57a74395bdd2': 'georgia',
              '2eb4ff46-d908-4148-9b0d-40ccfc1a655a': 'ghana',
              'b75d6bcc-fadf-4141-8d0f-2463154b89f7': 'greece',
              '51fa502b-98a3-4c42-b5fd-7b4d64489bb9': 'guam',
              '3725a4d2-b28f-466b-905a-bafeaeb75855': 'guatemala',
              'eeaff39c-8afd-43f7-b9a0-53729f5df1d8': 'guinea',
              '14e90203-9197-42ea-9222-acafd2fd6984': 'guinea_bissau',
              'ba4dfa7e-f3cd-4e94-8ca7-6b96a93378a8': 'guyana',
              'f76f7dcb-f82e-4257-a627-1685ff3f3586': 'haiti',
              'cdd1336e-495b-4868-aace-57a84442d6fd': 'honduras',
              '378d0107-eb43-485d-930c-0704b4e5aa11': 'india',
              '1cbe17e6-adc2-4680-bee0-54d94af75ebf': 'indonesia',
              'b422270e-d8af-4a32-b523-742545a17a3f': 'iran',
              '03aa7d6e-7656-48e4-8dc0-5e27706722c0': 'iraq',
              '842f963c-f84d-4076-a8db-337295fd9b91': 'jordan',
              '6f6d0e78-2c81-411d-8d13-367e250dc110': 'kazakhstan',
              'ad351a33-8846-4cad-8195-b07b6041d4a5': 'kenya',
              '4aee7a88-cda9-454e-9f25-4a6420270417': 'kuwait',
              'ace3b851-042b-46a6-8fea-68aae042d614': 'kyrgyzstan',
              'dfb01b39-c224-459e-b045-dd9461b9a1e5': 'laos',
              '7de78f22-f53e-48d2-923f-ae1e4d814f46': 'lebanon',
              'b35b29c5-9bb7-4b40-ad33-29eecd28a9e6': 'lesotho',
              'a5fd61b4-fd27-433d-8428-7e88a7f27921': 'liberia',
              '600c6af4-b767-423c-b942-7f06ca467258': 'libya',
              '5837cc40-9ab5-4088-91c8-ca6e4b57e903': 'macedonia',
              '3782bf3c-380e-4b60-b21a-38199073f112': 'madagascar',
              'e8b5f188-6a5c-43ae-b4a5-200abb13153e': 'malawi',
              '3facca11-fbaa-4c40-8fac-4751d45c3f1b': 'malaysia',
              '3e844a47-526a-46f9-afea-1af9ff8690aa': 'mali',
              '051ce04e-05e8-4430-8b75-3e499bbffbc8': 'martinique',
              '8acb006b-8596-4a98-8177-acb4cb575956': 'mauritania',
              '17ced083-eb2a-4046-a713-26cabc7af95d': 'mauritius',
              '1af148fe-2698-4b89-bf7f-87e5c48b6848': 'mayotte',
              '8381208f-01ca-4ed3-8f2c-f73ed1c316e3': 'mexico',
              'f0e9c8b5-69b5-48df-8cb9-2d089ba04e46': 'moldova',
              '9f341cb1-dcb5-4f6c-bd21-b57db01b4193': 'mongolia',
              'ef467a17-91e8-4124-a136-7ed8ff7c7d15': 'morocco',
              '0916133b-4d93-4d60-9c20-e7ee3936f391': 'mozambique',
              'e81ba700-f9fc-4ed0-b248-578a25717cdb': 'myanmar',
              '0cb123dc-8810-4840-b6ab-6a527c5a79ef': 'namibia',
              '3386fe63-2158-4040-a502-9f65fd2079d3': 'nauru',
              'fb01b01a-6775-423c-8012-7d43f587cb6c': 'nepal',
              'e67c072b-7707-491f-8c2e-13c914216b61': 'new_caledonia',
              'f6a9521c-596b-49f9-b914-67138e8c17e6': 'nicaragua',
              '7561db90-a866-4443-93f4-95cac1d47e9c': 'niger',
              '4134651a-7f53-45fb-8bc6-7fed9cf36f51': 'nigeria',
              '4d3079e4-8568-48e6-9342-665896875a38': 'north_korea',
              '9b0af037-99d1-43b8-ac06-82137ec4b06d': 'oman',
              Other: 'other',
              'f45d93c3-c9b0-4333-a5e6-299b7c425812': 'pakistan',
              'e2a19948-49aa-44c0-98ef-67ae1160ef43': 'palestine',
              '1ef5a828-9d0d-4336-91ab-880d5dc0151c': 'panama',
              'e1e6b451-d7fe-4954-b225-99b2de82a4c0': 'papua_new_guinea',
              'd8412016-82f5-4801-a026-1bdc429850b7': 'paraguay',
              'e74fa87f-8469-46b0-975f-6cb37c394564': 'peru',
              'bdbd5c9f-1f28-4f4d-a254-4a84f8bb2c8f': 'philippines',
              '39fca1d0-d2e7-4b13-82bd-626fbec71252': 'puerto_rico',
              '5db9afa5-b57e-4f45-8b1c-af766f14fc58': 'republic_of_congo',
              '1dae4b2d-50c9-4bf1-b25a-7063600a5e74': 'reunion',
              '457e745e-ae97-463d-95a9-8d5689d3ca2b': 'romania',
              '6bc925a1-7699-496a-85b0-c290699381db': 'rwanda',
              'e03b381b-a7f4-40eb-964f-51571dc3c48c': 'samoa',
              'f66bbb42-684f-42d7-bfcd-95d586eb7dc9': 'sao_tome_and_principe',
              'fdf495a4-e60c-46f7-a8a2-61a216849086': 'saudi_arabia',
              'ad948f1b-0733-4f8d-b049-d64289b43a10': 'senegal',
              'd2e69cef-3bff-4220-ba91-a6a678fb606b': 'serbia',
              'ffba9caf-b6aa-4078-845e-578f7a7fd566': 'sierra_leone',
              '99c8dccc-4dfa-4d30-86be-42a309ab431f': 'somalia',
              '75882d62-1c55-480d-b411-8ca40c3307df': 'south_africa',
              '0603d6b9-334f-4443-ab60-7c5d457b95fc': 'south_korea',
              'f113e24e-2ea9-49a2-9b28-59241b9adb21': 'south_sudan',
              'b0031c01-d242-4410-b98b-cc1511590b85': 'sri_lanka',
              '2f03a932-2b75-4e8b-9f44-0fcd83c75dc4': 'sudan',
              'c65d3329-98d4-4dd7-89d3-141b70d00eb2': 'suriname',
              '06a2703b-af17-4e44-83f5-6cc9a8a75320': 'swaziland',
              'dcdcdc70-a006-4b0a-bac2-7de89b022b65': 'switzerland',
              '1e34ee55-ef9f-4386-bae6-6995555ded75': 'syria',
              '34836c60-5449-48d6-b3c9-c0b3361b9f2c': 'tajikistan',
              '050a8eb1-0d77-4f65-a2da-776a13bcd2a4': 'tanzania',
              '289ac5bd-6434-4837-86bf-b54d22970ac8': 'thailand',
              '6a583e64-869d-477d-a1c1-746320d45fc4': 'togo',
              'd381f06d-2365-4f40-948b-cfe90d8cb532': 'tonga',
              '56be7864-fde6-4db3-8fa5-b9dd42cd9c53': 'tunisia',
              '7429c779-1d3a-4aec-8256-d0b1637e1bd1': 'turkey',
              '3ef17df5-299b-4385-9ea6-572df4b6f9ca': 'turkmenistan',
              'be3d11d3-446d-440c-a582-d01c7cbb0eda': 'uganda',
              '38c99c8d-2b93-4848-a537-b1865a260bb2': 'ukraine',
              Unknown: 'unknown',
              'c2e45baf-748b-4d7b-a391-ed6b802b6f94': 'uruguay',
              '60512350-d79b-41aa-aff0-1b28ca4aa5f1': 'uzbekistan',
              '557cea4a-0049-4b7a-b373-ed63f294a2a0': 'venezuela',
              '49509c5f-e533-48a8-bf06-86935e3376b2': 'vietnam',
              '4086dfd2-f4f5-4107-93e8-07bee235af8f': 'western_sahara',
              '6a3214e0-f94b-414c-8148-968e24386671': 'yemen',
              '3ec0432d-ea37-4159-a658-29d6f07fe21a': 'zambia',
              'ce1b0d8d-0a2d-4f93-a6ed-64aca2fd0f45': 'zimbabwe',
            };

            state.statusMap = {
              '18692c24-4d33-4cdc-a92c-bf4138da5d6d': 'unknown', //Inconnu
              'f921ffdd-72ca-4d58-a89b-1fa2e959d110': 'asylum_seeker',
              '2bacead2-f280-457c-9d28-e80e106f7d25': 'no_status',
              'MSF-AAAAAA000000000000001929': 'refugee',
              '1067AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA': 'unknown',
              '20b8524e-4c26-4fa0-81f0-fa23ebacc54d': 'single',
              'MSF-AAAAAA000000000000001863': 'married',
              'MSF-AAAAAA000000000000001864': 'widowed',
              'MSF-AAAAAA000000000000001865': 'divorced_separated',
              '1060AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA': 'concubine',
              'MSF-AAAAAA000000000000001823': 'not_applicable',
              '1067AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA': 'unknown',
              'MSF-AAAAAA000000000000001871': 'student',
              '4a18a820-f3a1-4bb7-9138-558a9ecc81da': 'fixed_employee',
              '2cb73bee-7f94-4695-89c7-c81187dbc90c': 'occasional_employee',
              'MSF-AAAAAA000000000000001870': 'unemployed',
              '9b14b4d4-b749-4acf-acfe-79c480f3c4b3': 'housewife',
              'MSF-AAAAAA000000000000001823': 'not_applicable',
              'MSF-AAAAAA000000000000001329': 'unknown',
              '1067AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA': 'unknown',
              'MSF-AAAAAA000000000000001930': 'idp',
              '515c5abe-4172-4d0c-a991-0de2888228d7': 'internationally_displaced',
              'bbdb287c-4ba1-4944-bd87-eb126c5f9d92': 'non_displaced',
              'fc49acaa-ece2-4365-9dfb-70c2105de8b1': 'returnee',
              '1067AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA': 'unknown',
            };

            state.genderOptions = {
              M: 'male',
              F: 'female',
              U: 'unknown',
              O: 'prefer_not_to_answer',
            };

            return state;
          });

      Update-TEIs:
        name: Update TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: null
        body: |
          fn(state => {
            const { optionSets, genderUpdated, TEIs } = state;
            const genderMap = optionSets
              .filter(o => o['DHIS2 DE UID'] === 'qptKDiv9uPl')
              .reduce((acc, obj) => {
                acc[obj['value.display - Answers']] = obj['DHIS2 Option Code'];
                return acc;
              }, {});

            state.teisToUpdate = genderUpdated.map(answer => {
              const { trackedEntity } = TEIs[answer.person.uuid];
              return {
                trackedEntity,
                program: 'w9MSPn5oSqp',
                orgUnit: 'OPjuJMZFLop',
                trackedEntityType: 'cHlzCA2MuEF',
                attributes: [
                  {
                    attribute: 'qptKDiv9uPl', //gender
                    value: genderMap[answer.value.display],
                  },
                  {
                    attribute: 'AYbfTPYMNJH', //OpenMRS Patient UID to use to upsert TEI
                    value: answer.person.uuid,
                  },
                ],
              };
            });
            return state;
          });

          // Update TEIs
          create(
            'tracker',
            { trackedEntities: $.teisToUpdate },
            { params: { async: false, importStrategy: 'UPDATE' } }
          );
          // Return only lastRunDateTime
          fn(({ lastRunDateTime }) => ({ lastRunDateTime }));

    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: false
    edges:
      Upsert-TEIs->Get-Encounters:
        source_job: Upsert-TEIs
        target_job: Get-Encounters
        condition_type: js_expression
        condition_label: has-patient-uuids
        condition_expression: |
          state.patientUuids.length > 0 && !state.errors

        enabled: true
      cron->Get-Patients:
        source_trigger: cron
        target_job: Get-Patients
        condition_type: always
        enabled: true
      Mappings->Upsert-TEIs:
        source_job: Mappings
        target_job: Upsert-TEIs
        condition_type: on_job_success
        enabled: true
      Get-Patients->Mappings:
        source_job: Get-Patients
        target_job: Mappings
        condition_type: js_expression
        condition_label: has-patients
        condition_expression: |
          state.patients.length > 0 && !state.errors

        enabled: true
      Create-Events->Update-TEIs:
        source_job: Create-Events
        target_job: Update-TEIs
        condition_type: js_expression
        condition_label: has-gender-updated
        condition_expression: |
          state.genderUpdated.length > 0 && !state.errors

        enabled: true
      Get-Encounters->Get-Options-Map:
        source_job: Get-Encounters
        target_job: Get-Options-Map
        condition_type: js_expression
        condition_label: has-encounters
        condition_expression: |
          state.encounters.length > 0

        enabled: true
      Get-Options-Map->Get-TEIs:
        source_job: Get-Options-Map
        target_job: Get-TEIs
        condition_type: on_job_success
        enabled: true
      Get-TEIs->Create-Events:
        source_job: Get-TEIs
        target_job: Create-Events
        condition_type: js_expression
        condition_label: has-teis
        condition_expression: |
          state.TEIs && !state.errors

        enabled: true
