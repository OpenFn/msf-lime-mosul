name: msf-lime-test
description: null
credentials:
  aleksa@openfn.org-AK-Sharepoint:
    name: AK Sharepoint
    owner: aleksa@openfn.org
  mtuchi@openfn.org-MSF-DHIS2-UAT:
    name: MSF DHIS2 UAT
    owner: mtuchi@openfn.org
  mtuchi@openfn.org-OpenFnSharepoint:
    name: OpenFnSharepoint
    owner: mtuchi@openfn.org
  mtuchi@openfn.org-OpenMRS-Demo:
    name: OpenMRS Demo
    owner: mtuchi@openfn.org
  "mtuchi@openfn.org-OpenMRS-Demo-(HTTP)":
    name: 'OpenMRS Demo (HTTP)'
    owner: mtuchi@openfn.org
  "mtuchi@openfn.org-googlesheets-(mtuchi@openfn.org)-2":
    name: 'googlesheets (mtuchi@openfn.org)-2'
    owner: mtuchi@openfn.org
  mtuchi@openfn.org-mtuchi-github-token:
    name: mtuchi-github-token
    owner: mtuchi@openfn.org
workflows:
  fetch-metadata-and-generate-opts-json:
    name: fetch-metadata-and-generate-opts-json
    jobs:
      Get-metadata-file-from-Sharepoint:
        name: Get metadata file from Sharepoint
        adaptor: '@openfn/language-msgraph@latest'
        credential: null
        body: |
          const toCamelCase = text => {
            return text
              .toLowerCase()
              .replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase());
          };

          const sheets = [
            'OptionSets',
            'F01-MHPSS Baseline',
            'F02-MHPSS Follow-up',
            'F03-mhGAP Baseline',
            'F04-mhGAP Follow-up',
            'F05-MHPSS Closure',
          ];

          fn(state => {
            state.siteId =
              'openfnorg.sharepoint.com,4724a499-afbc-4ded-a371-34ae40bf5d8d,1d20a7d4-a6f1-407c-aa77-76bd47bb0f32';
            return state;
          });

          getDrive(
            {
              id: $.siteId,
              owner: 'sites',
            },
            'default'
          );

          getFile('/msf-metadata/LIME EMR - Iraq Metadata - Release 1.xlsx', {
            metadata: true,
          });

          fn(state => {
            const itemId = state.data.id;
            const driveId = state.drives.default.id;
            state.workbookBase = `sites/${state.siteId}/drives/${driveId}/items/${itemId}/workbook`;
            return state;
          });

          each(
            sheets,
            get(`${$.workbookBase}/worksheets('${$.data}')/usedRange`, {}, state => {
              const sheetName = toCamelCase(state.references.at(-1));
              console.log('Fetched sheet: ', sheetName);
              state[sheetName] = state.data.values;
              return state;
            })
          );

          fn(state => {
            delete state.data;
            delete state.response;
            delete state.references;
            return state;
          });

      Map-metadata-file-to-option-set-Json-format:
        name: Map metadata file to option-set Json format
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          const isValidValue = value => value !== '' && value !== 'NA';

          const mapArrayToObject = (item, keys) => {
            return item.reduce((acc, value, idx) => {
              acc[keys[idx]] = value;
              return acc;
            }, {});
          };
          fn(state => {
            const { optionsets } = state;
            const keys = optionsets[1];

            const optsMap = optionsets.slice(2).map(item => mapArrayToObject(item, keys));

            state.optionSets = optsMap
              .filter(
                o =>
                  isValidValue(o['External ID']) && isValidValue(o['DHIS2 DE full name'])
              )
              .map(o => {
                return {
                  'value.display - Answers': o['Answers'],
                  'value.uuid - External ID': o['External ID'],
                  'DHIS2 DE full name': o['DHIS2 DE full name'],
                  'DHIS2 DE UID': o['DHIS2 DE UID'],
                  'OptionSet name': o['OptionSet name'],
                  'DHIS2 Option Set name': o['DHIS2 Option Set name'],
                  'DHIS2 Option Set UID': o['DHIS2 Option Set UID'],
                  'DHIS2 Option name': o['DHIS2 Option name'],
                  'DHIS2 Option UID': o['DHIS2 Option UID'],
                  'DHIS2 Option Code': o['DHIS2 Option code'],
                };
              });

            return state;
          });

          const safeKeyValuePairs = arr => {
            if (arr === null || arr === undefined) {
              return arr;
            }
            const mappedArr = arr.slice(2).map(item => mapArrayToObject(item, arr[1]));
            try {
              return mappedArr
                .filter(
                  o => isValidValue(o['External ID']) && isValidValue(o['DHIS2 DE UID'])
                )
                .reduce((acc, value) => {
                  acc[value['DHIS2 DE UID']] = value['External ID'];
                  return acc;
                }, {});
            } catch (error) {
              console.error(`Error processing ${arr}:`, error);
              return arr; // Return original value if processing fails
            }
          };

          fn(
            ({
              optionSets,
              f01MhpssBaseline,
              f02MhpssFollowUp,
              f03MhgapBaseline,
              f04MhgapFollowUp,
              f05MhpssClosure,
            }) => {
              const processedState = Object.fromEntries(
                Object.entries({
                  f01MhpssBaseline,
                  f02MhpssFollowUp,
                  f03MhgapBaseline,
                  f04MhgapFollowUp,
                  f05MhpssClosure,
                }).map(([key, value]) => [key, safeKeyValuePairs(value)])
              );

              return {
                optionSets,
                ...processedState,
              };
            }
          );

      Save-option-set-json-to-github:
        name: Save option-set json to github
        adaptor: '@openfn/language-http@latest'
        credential: null
        body: |
          const metadataPath =
            'repos/OpenFn/openfn-lime-pilot/contents/metadata/metadata_mapping.json';

          get(metadataPath, {
            headers: {
              'user-agent': 'OpenFn',
            },
          });

          fn(state => {
            const {
              optionSets,
              f01MhpssBaseline,
              f02MhpssFollowUp,
              f03MhgapBaseline,
              f04MhgapFollowUp,
              f05MhpssClosure,
              data,
            } = state;

            state.body = {
              message: 'Update metadata content',
              committer: {
                name: 'Emmanuel Evance',
                email: 'mtuchidev@gmail.com',
              },
              content: util.encode(
                JSON.stringify({
                  optionSets,
                  f01MhpssBaseline,
                  f02MhpssFollowUp,
                  f03MhgapBaseline,
                  f04MhgapFollowUp,
                  f05MhpssClosure,
                })
              ),
              sha: data.sha,
            };

            return state;
          });

          put(metadataPath, {
            body: $.body,
            headers: {
              Accept: 'application/vnd.github+json',
              'X-GitHub-Api-Version': '2022-11-28',
              'user-agent': 'OpenFn',
            },
          });

    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      Get-metadata-file-from-Sharepoint->Map-metadata-file-to-option-set-Json-format:
        source_job: Get-metadata-file-from-Sharepoint
        target_job: Map-metadata-file-to-option-set-Json-format
        condition_type: on_job_success
        enabled: true
      Map-metadata-file-to-option-set-Json-format->Save-option-set-json-to-github:
        source_job: Map-metadata-file-to-option-set-Json-format
        target_job: Save-option-set-json-to-github
        condition_type: on_job_success
        enabled: true
      webhook->Get-metadata-file-from-Sharepoint:
        source_trigger: webhook
        target_job: Get-metadata-file-from-Sharepoint
        condition_type: always
        enabled: true
  wf-3-generate-optsmap:
    name: wf-3-generate-optsmap
    jobs:
      Fetch-OptionSets-Metadata:
        name: Fetch OptionSets Metadata
        adaptor: '@openfn/language-googlesheets@latest'
        credential: null
        body: |
          
          getValues('1OuR7laA7Oc2QnoiT8S3Thhf-HNh7uFY8ILLEu-idXuk', 
          'optionsets_oct1')

      Key-Value-Pair:
        name: Key Value Pair
        adaptor: '@openfn/language-common@latest'
        credential: null
        body: |
          fn((state) => {
            const [keys, ...rows] = state.data.values;
            state.data = rows.map((item) => {
              const obj = item.reduce((acc, value, idx) => {
                acc[keys[idx]] = value;
                return acc;
              }, {});

              return obj;
            });

            return state;
          });

          fn((state) => {
            const isValidValue = value => value !== "" && value !== "NA";
            const optsMap = state.data.filter(o =>
              isValidValue(o["External ID"]) && isValidValue(o["DHIS2 DE full name"])
            )
              .map((o) => {
                return {
                  "value.display - Answers": o["Answers"],
                  "value.uuid - External ID": o["External ID"],
                  "DHIS2 DE full name": o["DHIS2 DE full name"],
                  "DHIS2 DE UID": o["DHIS2 DE UID"],
                  "OptionSet name": o["OptionSet name"],
                  "DHIS2 Option Set UID": o["DHIS2 Option Set name"],
                  "DHIS2 Option name": o["DHIS2 Option name"],
                  "DHIS2 Option UID": o["DHIS2 Option UID"],
                  "DHIS2 Option Code": o["DHIS2 Option code"],
                };
              })

            return { optsMap };
          });

    triggers:
      webhook:
        type: webhook
        enabled: false
    edges:
      Fetch-OptionSets-Metadata->Key-Value-Pair:
        source_job: Fetch-OptionSets-Metadata
        target_job: Key-Value-Pair
        condition_type: on_job_success
        enabled: true
      webhook->Fetch-OptionSets-Metadata:
        source_trigger: webhook
        target_job: Fetch-OptionSets-Metadata
        condition_type: always
        enabled: true
  wf1-dhis2-omrs-migration:
    name: wf1-dhis2-omrs-migration
    jobs:
      Fetch-Metadata:
        name: Fetch Metadata
        adaptor: '@openfn/language-http@latest'
        credential: null
        body:
          path: workflows/wf1/1-fetch-metadata.js

      Get-Teis-and-Locations:
        name: Get Teis and Locations
        adaptor: '@openfn/language-dhis2@latest'
        credential: null
        body:
          path: workflows/wf1/2-get-teis-and-locations.js

      Create-Patients:
        name: Create Patients
        adaptor: '@openfn/language-openmrs@latest'
        credential: null
        body:
          path: workflows/wf1/3-create-patients.js

      Update-Teis:
        name: Update Teis
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: null
        body:
          path: workflows/wf1/4-update-teis.js

    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: false
    edges:
      cron->Fetch-Metadata:
        source_trigger: cron
        target_job: Fetch-Metadata
        condition_type: always
        enabled: true
      Get-Teis-and-Locations->Create-Patients:
        source_job: Get-Teis-and-Locations
        target_job: Create-Patients
        condition_type: js_expression
        condition_label: has-teis
        condition_expression: |
          state.teis.length > 0 && !state.errors

        enabled: true
      Fetch-Metadata->Get-Teis-and-Locations:
        source_job: Fetch-Metadata
        target_job: Get-Teis-and-Locations
        condition_type: on_job_success
        enabled: true
      Create-Patients->Update-Teis:
        source_job: Create-Patients
        target_job: Update-Teis
        condition_type: on_job_success
        enabled: true
  wf2-omrs-dhis2:
    name: wf2-omrs-dhis2
    jobs:
      Get-Patients:
        name: Get Patients
        adaptor: '@openfn/language-openmrs@latest'
        credential: mtuchi@openfn.org-OpenMRS-Demo
        body:
          path: workflows/wf2/1-get-patients.js

      Upsert-TEIs:
        name: Upsert TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/2-upsert-teis.js

      Get-Encounters:
        name: Get Encounters
        adaptor: '@openfn/language-http@latest'
        credential: 'mtuchi@openfn.org-OpenMRS-Demo-(HTTP)'
        body:
          path: workflows/wf2/3-get-encounters.js

      Get-TEIs:
        name: Get TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/5-get-teis.js

      Create-Events:
        name: Create Events
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/6-create-events.js

      Mappings:
        name: Mappings
        adaptor: '@openfn/language-http@latest'
        credential: null
        body:
          path: workflows/wf2/2-mappings.js

      Update-TEIs:
        name: Update TEIs
        adaptor: '@openfn/language-dhis2@5.0.1'
        credential: mtuchi@openfn.org-MSF-DHIS2-UAT
        body:
          path: workflows/wf2/7-update-teis.js

    triggers:
      cron:
        type: cron
        cron_expression: '0 0 * * *'
        enabled: false
    edges:
      Get-Patients->Mappings:
        source_job: Get-Patients
        target_job: Mappings
        condition_type: js_expression
        condition_label: has-patients
        condition_expression: |
          state.patients.length > 0 && !state.errors

        enabled: true
      Get-TEIs->Create-Events:
        source_job: Get-TEIs
        target_job: Create-Events
        condition_type: js_expression
        condition_label: has-teis
        condition_expression: |
          state.TEIs && !state.errors

        enabled: true
      Create-Events->Update-TEIs:
        source_job: Create-Events
        target_job: Update-TEIs
        condition_type: js_expression
        condition_label: has-gender-updated
        condition_expression: |
          state?.genderUpdated?.length > 0 && !state.errors

        enabled: true
      cron->Get-Patients:
        source_trigger: cron
        target_job: Get-Patients
        condition_type: always
        enabled: true
      Upsert-TEIs->Get-Encounters:
        source_job: Upsert-TEIs
        target_job: Get-Encounters
        condition_type: js_expression
        condition_label: has-patient-uuids
        condition_expression: |
          state.patientUuids.length > 0 && !state.errors

        enabled: true
      Mappings->Upsert-TEIs:
        source_job: Mappings
        target_job: Upsert-TEIs
        condition_type: on_job_success
        enabled: true
      Get-Encounters->Get-TEIs:
        source_job: Get-Encounters
        target_job: Get-TEIs
        condition_type: on_job_success
        enabled: true
