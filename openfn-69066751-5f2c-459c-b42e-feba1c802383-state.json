{
  "id": "69066751-5f2c-459c-b42e-feba1c802383",
  "name": "msf-lime-test",
  "description": null,
  "inserted_at": "2024-10-30T06:18:14Z",
  "updated_at": "2024-11-05T16:12:43Z",
  "scheduled_deletion": null,
  "project_credentials": {
    "mtuchi@openfn.org-mtuchi-github-token": {
      "id": "55508835-a9c3-4283-813e-ae6f9c4958fd",
      "name": "mtuchi-github-token",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenMRS-Demo": {
      "id": "45634fcb-d146-4a0f-930c-77300393a3c2",
      "name": "OpenMRS Demo",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-OpenFnSharepoint": {
      "id": "3276b5b6-25c8-4a64-b55d-cf02f82d21e3",
      "name": "OpenFnSharepoint",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-googlesheets-(mtuchi@openfn.org)-2": {
      "id": "0d1b019c-dc1e-4eb9-9bff-9bb990f21c03",
      "name": "googlesheets (mtuchi@openfn.org)-2",
      "owner": "mtuchi@openfn.org"
    },
    "mtuchi@openfn.org-MSF-DHIS2-UAT": {
      "id": "9716980f-1b35-4295-adde-b05bc47002da",
      "name": "MSF DHIS2 UAT",
      "owner": "mtuchi@openfn.org"
    },
    "aleksa@openfn.org-AK-Sharepoint": {
      "id": "113aca80-30f8-4137-a27b-f0d9be8b1910",
      "name": "AK Sharepoint",
      "owner": "aleksa@openfn.org"
    }
  },
  "history_retention_period": null,
  "dataclip_retention_period": null,
  "retention_policy": "retain_all",
  "workflows": {
    "fetch-metadata-and-generate-opts-json": {
      "id": "182c38b7-fa91-4bc3-82ed-ebd92e26be8f",
      "name": "fetch-metadata-and-generate-opts-json",
      "inserted_at": "2024-10-30T12:02:03.305779Z",
      "lock_version": 1,
      "triggers": {
        "webhook": {
          "enabled": true,
          "id": "654e0bc2-22ae-4033-9090-18760ab28ea2",
          "type": "webhook"
        }
      },
      "jobs": {
        "Get-metadata-file-from-Sharepoint": {
          "id": "aab663a0-6bcc-42fa-9f53-146d8fa44061",
          "name": "Get metadata file from Sharepoint",
          "body": "const toCamelCase = text => {\n  return text\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase());\n};\n\nconst sheets = [\n  'OptionSets',\n  'F01-MHPSS Baseline',\n  'F02-MHPSS Follow-up',\n  'F03-mhGAP Baseline',\n  'F04-mhGAP Follow-up',\n  'F05-MHPSS Closure',\n];\n\nfn(state => {\n  state.siteId =\n    'openfnorg.sharepoint.com,4724a499-afbc-4ded-a371-34ae40bf5d8d,1d20a7d4-a6f1-407c-aa77-76bd47bb0f32';\n  return state;\n});\n\ngetDrive(\n  {\n    id: $.siteId,\n    owner: 'sites',\n  },\n  'default'\n);\n\ngetFile('/msf-metadata/LIME EMR - Iraq Metadata - Release 1.xlsx', {\n  metadata: true,\n});\n\nfn(state => {\n  const itemId = state.data.id;\n  const driveId = state.drives.default.id;\n  state.workbookBase = `sites/${state.siteId}/drives/${driveId}/items/${itemId}/workbook`;\n  return state;\n});\n\neach(\n  sheets,\n  get(`${$.workbookBase}/worksheets('${$.data}')/usedRange`, {}, state => {\n    const sheetName = toCamelCase(state.references.at(-1));\n    console.log('Fetched sheet: ', sheetName);\n    state[sheetName] = state.data.values;\n    return state;\n  })\n);\n\nfn(state => {\n  delete state.data;\n  delete state.response;\n  delete state.references;\n  return state;\n});\n",
          "adaptor": "@openfn/language-msgraph@latest",
          "project_credential_id": null
        },
        "Map-metadata-file-to-option-set-Json-format": {
          "id": "b5743b64-3250-4dbf-8d74-256a1c7e9623",
          "name": "Map metadata file to option-set Json format",
          "body": "const isValidValue = value => value !== '' && value !== 'NA';\n\nconst mapArrayToObject = (item, keys) => {\n  return item.reduce((acc, value, idx) => {\n    acc[keys[idx]] = value;\n    return acc;\n  }, {});\n};\nfn(state => {\n  const { optionsets } = state;\n  const keys = optionsets[1];\n\n  const optsMap = optionsets.slice(2).map(item => mapArrayToObject(item, keys));\n\n  state.optionSets = optsMap\n    .filter(\n      o =>\n        isValidValue(o['External ID']) && isValidValue(o['DHIS2 DE full name'])\n    )\n    .map(o => {\n      return {\n        'value.display - Answers': o['Answers'],\n        'value.uuid - External ID': o['External ID'],\n        'DHIS2 DE full name': o['DHIS2 DE full name'],\n        'DHIS2 DE UID': o['DHIS2 DE UID'],\n        'OptionSet name': o['OptionSet name'],\n        'DHIS2 Option Set UID': o['DHIS2 Option Set name'],\n        'DHIS2 Option name': o['DHIS2 Option name'],\n        'DHIS2 Option UID': o['DHIS2 Option UID'],\n        'DHIS2 Option Code': o['DHIS2 Option code'],\n      };\n    });\n\n  return state;\n});\n\nconst safeKeyValuePairs = arr => {\n  if (arr === null || arr === undefined) {\n    return arr;\n  }\n  const mappedArr = arr.slice(2).map(item => mapArrayToObject(item, arr[1]));\n  try {\n    return mappedArr\n      .filter(\n        o => isValidValue(o['External ID']) && isValidValue(o['DHIS2 DE UID'])\n      )\n      .reduce((acc, value) => {\n        acc[value['DHIS2 DE UID']] = value['External ID'];\n        return acc;\n      }, {});\n  } catch (error) {\n    console.error(`Error processing ${arr}:`, error);\n    return arr; // Return original value if processing fails\n  }\n};\n\nfn(\n  ({\n    optionSets,\n    f01MhpssBaseline,\n    f02MhpssFollowUp,\n    f03MhgapBaseline,\n    f04MhgapFollowUp,\n    f05MhpssClosure,\n  }) => {\n    const processedState = Object.fromEntries(\n      Object.entries({\n        f01MhpssBaseline,\n        f02MhpssFollowUp,\n        f03MhgapBaseline,\n        f04MhgapFollowUp,\n        f05MhpssClosure,\n      }).map(([key, value]) => [key, safeKeyValuePairs(value)])\n    );\n\n    return {\n      optionSets,\n      ...processedState,\n    };\n  }\n);\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": null
        },
        "Save-option-set-json-to-github": {
          "id": "b224b966-35f4-43ea-90e9-1f5dfcb56416",
          "name": "Save option-set json to github",
          "body": "const metadataPath =\n  'repos/OpenFn/openfn-lime-pilot/contents/metadata/metadata_mapping.json';\n\nget(metadataPath, {\n  headers: {\n    'user-agent': 'OpenFn',\n  },\n});\n\nfn(state => {\n  const {\n    optionSets,\n    f01MhpssBaseline,\n    f02MhpssFollowUp,\n    f03MhgapBaseline,\n    f04MhgapFollowUp,\n    f05MhpssClosure,\n    data,\n  } = state;\n\n  state.body = {\n    message: 'Update metadata content',\n    committer: {\n      name: 'Emmanuel Evance',\n      email: 'mtuchidev@gmail.com',\n    },\n    content: util.encode(\n      JSON.stringify({\n        optionSets,\n        f01MhpssBaseline,\n        f02MhpssFollowUp,\n        f03MhgapBaseline,\n        f04MhgapFollowUp,\n        f05MhpssClosure,\n      })\n    ),\n    sha: data.sha,\n  };\n\n  return state;\n});\n\nput(metadataPath, {\n  body: $.body,\n  headers: {\n    Accept: 'application/vnd.github+json',\n    'X-GitHub-Api-Version': '2022-11-28',\n    'user-agent': 'OpenFn',\n  },\n});\n",
          "adaptor": "@openfn/language-http@latest",
          "project_credential_id": null
        }
      },
      "edges": {
        "Get-metadata-file-from-Sharepoint->Map-metadata-file-to-option-set-Json-format": {
          "enabled": true,
          "id": "4ec86a4d-17b0-447c-a816-42f1d95d7f25",
          "source_job_id": "aab663a0-6bcc-42fa-9f53-146d8fa44061",
          "condition_type": "on_job_success",
          "target_job_id": "b5743b64-3250-4dbf-8d74-256a1c7e9623"
        },
        "Map-metadata-file-to-option-set-Json-format->Save-option-set-json-to-github": {
          "enabled": true,
          "id": "820d203a-1e9c-494d-8fba-c7c962209de7",
          "source_job_id": "b5743b64-3250-4dbf-8d74-256a1c7e9623",
          "condition_type": "on_job_success",
          "target_job_id": "b224b966-35f4-43ea-90e9-1f5dfcb56416"
        },
        "webhook->Get-metadata-file-from-Sharepoint": {
          "enabled": true,
          "id": "441b595b-441a-4938-be44-be49c32f5cc4",
          "source_trigger_id": "654e0bc2-22ae-4033-9090-18760ab28ea2",
          "condition_type": "always",
          "target_job_id": "aab663a0-6bcc-42fa-9f53-146d8fa44061"
        }
      }
    },
    "wf-3-generate-optsmap": {
      "id": "c9d7d47a-5502-4f52-bc30-950746a8b473",
      "name": "wf-3-generate-optsmap",
      "inserted_at": "2024-10-30T12:02:03.315657Z",
      "lock_version": 1,
      "triggers": {
        "webhook": {
          "enabled": false,
          "id": "e62241ef-84ef-4ca7-9fec-c350e849390e",
          "type": "webhook"
        }
      },
      "jobs": {
        "Fetch-OptionSets-Metadata": {
          "id": "ed90907f-3ba3-4a08-ae52-7425e584dae6",
          "name": "Fetch OptionSets Metadata",
          "body": "\ngetValues('1OuR7laA7Oc2QnoiT8S3Thhf-HNh7uFY8ILLEu-idXuk', \n'optionsets_oct1')\n",
          "adaptor": "@openfn/language-googlesheets@latest",
          "project_credential_id": null
        },
        "Key-Value-Pair": {
          "id": "6f832249-fc16-4bab-8ed2-cbaa832611f0",
          "name": "Key Value Pair",
          "body": "fn((state) => {\n  const [keys, ...rows] = state.data.values;\n  state.data = rows.map((item) => {\n    const obj = item.reduce((acc, value, idx) => {\n      acc[keys[idx]] = value;\n      return acc;\n    }, {});\n\n    return obj;\n  });\n\n  return state;\n});\n\nfn((state) => {\n  const isValidValue = value => value !== \"\" && value !== \"NA\";\n  const optsMap = state.data.filter(o =>\n    isValidValue(o[\"External ID\"]) && isValidValue(o[\"DHIS2 DE full name\"])\n  )\n    .map((o) => {\n      return {\n        \"value.display - Answers\": o[\"Answers\"],\n        \"value.uuid - External ID\": o[\"External ID\"],\n        \"DHIS2 DE full name\": o[\"DHIS2 DE full name\"],\n        \"DHIS2 DE UID\": o[\"DHIS2 DE UID\"],\n        \"OptionSet name\": o[\"OptionSet name\"],\n        \"DHIS2 Option Set UID\": o[\"DHIS2 Option Set name\"],\n        \"DHIS2 Option name\": o[\"DHIS2 Option name\"],\n        \"DHIS2 Option UID\": o[\"DHIS2 Option UID\"],\n        \"DHIS2 Option Code\": o[\"DHIS2 Option code\"],\n      };\n    })\n\n  return { optsMap };\n});\n",
          "adaptor": "@openfn/language-common@latest",
          "project_credential_id": null
        }
      },
      "edges": {
        "Fetch-OptionSets-Metadata->Key-Value-Pair": {
          "enabled": true,
          "id": "fa1fc60a-b2b4-48ef-b4b4-a47eb93d58f6",
          "source_job_id": "ed90907f-3ba3-4a08-ae52-7425e584dae6",
          "condition_type": "on_job_success",
          "target_job_id": "6f832249-fc16-4bab-8ed2-cbaa832611f0"
        },
        "webhook->Fetch-OptionSets-Metadata": {
          "enabled": true,
          "id": "f0c1f4e9-2619-46da-b7d6-595bf8ea249a",
          "source_trigger_id": "e62241ef-84ef-4ca7-9fec-c350e849390e",
          "condition_type": "always",
          "target_job_id": "ed90907f-3ba3-4a08-ae52-7425e584dae6"
        }
      }
    },
    "wf1-dhis2-omrs-migration": {
      "id": "73fda9b2-2555-4764-b0f9-388a99583532",
      "name": "wf1-dhis2-omrs-migration",
      "inserted_at": "2024-11-06T09:29:03.923944Z",
      "lock_version": 11,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "f982cc7a-6c9e-4778-9a08-6ddf8469509d",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Fetch-Metadata": {
          "id": "d7c373f4-a503-4fa6-bfdd-ab456860ae78",
          "name": "Fetch Metadata",
          "body": "fn(state => state)\n",
          "adaptor": "@openfn/language-http@latest",
          "project_credential_id": null
        },
        "Get-Teis-and-Locations": {
          "id": "d30561c9-1e9d-467c-b37b-985bcdf1a55c",
          "name": "Get Teis and Locations",
          "body": "fn(state => {\n  // const manualCursor = '2023-06-20T17:00:00.00';\n  state.cursor = state.manualCursor || state.lastRunDateTime;\n  console.log('Date cursor to filter TEI extract ::', state.cursor);\n\n  return state;\n});\n\n// Get trackedEntityInstances that are \"active\" in the target program\nget(\n  'tracker/trackedEntities',\n  {\n    orgUnit: 'OPjuJMZFLop',\n    program: 'w9MSPn5oSqp',\n    programStatus: 'ACTIVE',\n  },\n  {},\n  state => {\n    const trackedEntityInstances = state.data.instances\n      .filter(tei => tei.updatedAt >= state.cursor) //for testing\n      //.filter(tei => tei.createdAt > state.cursor) //for prod\n      //.slice(0, 1); //to limit 1 for testing\n    const offset = 2; // GMT+2 (Geneva time)\n    const currentDateTime = new Date();\n    currentDateTime.setHours(currentDateTime.getHours() + offset);\n\n    const lastRunDateTime = currentDateTime.toISOString().replace('Z', '');\n    //console.log('TEI payload found before filter ::', JSON.stringify(state.data.instances, null, 2));\n    console.log('# of TEIs found before filter ::', state.data.instances.length);\n    //console.log('lastUpdated of TEI eWXRNHtmHB0 :: ', JSON.stringify(state.data.instances.filter(tei => tei.trackedEntity == 'eWXRNHtmHB0'), null, 2)); \n    console.log('# of TEIs to migrate to OMRS ::', trackedEntityInstances.length);\n    // console.log(\n    //   'trackedEntityInstance IDs ::',\n    //   trackedEntityInstances.map(tei => tei.trackedEntityInstance)\n    // );\n\n    console.log('Next sync start date:', lastRunDateTime);\n    return {\n      ...state,\n      // data: {},\n      references: [],\n      trackedEntityInstances,\n      lastRunDateTime,\n    };\n  }\n);\n\n\nget('optionGroups/kdef7pUey9f', {\n  fields: 'id,displayName,options[id,displayName,code]',\n});\n\nfn(({ data, ...state }) => {\n  state.locations = data;\n  return state;\n});\n\nfn(state => {\n  state.nationalityMap = {\n    afghanistan: '84066564-253e-43d8-b141-76730cffa878',\n    albania: 'db21f4f9-faf2-4358-8297-0ae76627b3b8',\n    algeria: '5f6c017f-074c-46b3-92d0-d055e2094366',\n    angola: '8a2e5a03-8a74-41ae-9a98-2310f9ce400d',\n    anguilla: 'c911af8a-171c-4ee9-b1ff-934373e8a819',\n    argentina: 'b83d24e8-34d8-4920-83c0-8ba014467ff4',\n    armenia: '39f1652a-f2b7-4b65-a7e1-7097ac6cdef0',\n    aruba: 'f3f1cba1-7c1e-4234-86a2-f27bb5964fee',\n    azerbaijan: '29750013-0e35-47ca-8f77-9192a923fb07',\n    bangladesh: 'a99de53c-ce76-4b1e-91b2-461094baf79e',\n    belarus: '664baba4-c552-47b9-97c0-ff67dafd27d6',\n    benin: 'cf863e31-bb38-48ed-90dd-f3dedcac304c',\n    bhutan: 'd45a57c9-994f-4deb-8845-9b785860a2ec',\n    bolivia: 'd8800d10-862b-42f1-8e22-cac1ce1bbcae',\n    bosnia_and_herzegovina: '05d8f4ef-45eb-463d-b2f3-8a5a613ee6b9',\n    botswana: '1304a0de-5b70-4d36-a873-e72a82963316',\n    brazil: '353ff388-64e6-434c-b78f-ca9636390389',\n    british_virgin_islands: 'b02c6d20-83a2-4947-8a7d-91d1f9c4d8a2',\n    bulgaria: '91c85a62-2b02-483a-aefd-e29d368565fe',\n    burkina_faso: '6c90c1ae-17a4-4e94-a267-4fba4c94efd8',\n    burundi: '8a2ed0db-eaad-44bc-bf06-5cb1b2a3db0b',\n    cambodia: '4fd14df8-8279-4dfa-bdd3-e1ab26bc0264',\n    cameroon: '873552ac-9850-4cc1-ae09-17eb0fccf405',\n    cape_verde: 'cfbc220a-1d6c-4469-bb6d-a8e3deb4f7e7',\n    central_african_republic: '61a4c4a4-25c2-4459-a874-ec1d24f8323a',\n    chad: '9e41e71c-f5d5-456c-a6f9-2129b8055bfc',\n    chile: '05333883-44e9-4f57-836a-041391803007',\n    china: '15016874-3e20-484a-baa8-9b94e1a3d358',\n    colombia: 'a008dff8-ce96-4662-bf8a-372e43d424f0',\n    comoros: '9d8738c8-40c2-4c66-aabb-ef176a20ffe8',\n    costa_rica: 'fb52f8c9-40ec-4dc4-92a4-d465612de2ff',\n    cote_divoire: '513cb36a-3f67-46ea-a789-fcdaca0e26f5',\n    cuba: '147c2434-5d7e-420c-8053-ba623301f3f5',\n    djibouti: 'cf5b334f-1c0f-41fc-ab54-53ff1e942830',\n    dominica: 'f70e51e5-b76c-4c38-9bf2-ef8e1f308ce1',\n    dominican_republic: 'ce72fc9b-619b-4c32-b865-600e888ad814',\n    drc_congo: '8f6d3d2a-e09f-473b-99c9-e539f97ceab6',\n    east_timor: '854f2f66-40e1-4a6a-9dee-09c832a52289',\n    ecuador: 'f9810f9a-78a7-42a2-99e6-19c629642386',\n    egypt: 'cc7343f8-9243-4d09-b378-58363850d624',\n    el_salvador: '9a34935e-5a8a-45be-8ccd-cb23192e420f',\n    equatorial_guinea: '7e591605-d723-4398-982a-8737af63a2dc',\n    eritrea: 'c61f03c2-0d1f-444f-a974-0a61063aff71',\n    ethiopia: '7478d375-014e-410e-a355-090143e88f5b',\n    gabon: '9f46ae06-114a-47fa-8f8d-e9749f04da25',\n    gambia: '5ec7ddd7-14a5-48ec-9e7c-8896d1010655',\n    georgia: 'bc71788f-db69-4b6f-8d1c-57a74395bdd2',\n    ghana: '2eb4ff46-d908-4148-9b0d-40ccfc1a655a',\n    greece: 'b75d6bcc-fadf-4141-8d0f-2463154b89f7',\n    guam: '51fa502b-98a3-4c42-b5fd-7b4d64489bb9',\n    guatemala: '3725a4d2-b28f-466b-905a-bafeaeb75855',\n    guinea: 'eeaff39c-8afd-43f7-b9a0-53729f5df1d8',\n    guinea_bissau: '14e90203-9197-42ea-9222-acafd2fd6984',\n    guyana: 'ba4dfa7e-f3cd-4e94-8ca7-6b96a93378a8',\n    haiti: 'f76f7dcb-f82e-4257-a627-1685ff3f3586',\n    honduras: 'cdd1336e-495b-4868-aace-57a84442d6fd',\n    india: '378d0107-eb43-485d-930c-0704b4e5aa11',\n    indonesia: '1cbe17e6-adc2-4680-bee0-54d94af75ebf',\n    iran: 'b422270e-d8af-4a32-b523-742545a17a3f',\n    iraq: '03aa7d6e-7656-48e4-8dc0-5e27706722c0',\n    jordan: '842f963c-f84d-4076-a8db-337295fd9b91',\n    kazakhstan: '6f6d0e78-2c81-411d-8d13-367e250dc110',\n    kenya: 'ad351a33-8846-4cad-8195-b07b6041d4a5',\n    kuwait: '4aee7a88-cda9-454e-9f25-4a6420270417',\n    kyrgyzstan: 'ace3b851-042b-46a6-8fea-68aae042d614',\n    laos: 'dfb01b39-c224-459e-b045-dd9461b9a1e5',\n    lebanon: '7de78f22-f53e-48d2-923f-ae1e4d814f46',\n    lesotho: 'b35b29c5-9bb7-4b40-ad33-29eecd28a9e6',\n    liberia: 'a5fd61b4-fd27-433d-8428-7e88a7f27921',\n    libya: '600c6af4-b767-423c-b942-7f06ca467258',\n    macedonia: '5837cc40-9ab5-4088-91c8-ca6e4b57e903',\n    madagascar: '3782bf3c-380e-4b60-b21a-38199073f112',\n    malawi: 'e8b5f188-6a5c-43ae-b4a5-200abb13153e',\n    malaysia: '3facca11-fbaa-4c40-8fac-4751d45c3f1b',\n    mali: '3e844a47-526a-46f9-afea-1af9ff8690aa',\n    martinique: '051ce04e-05e8-4430-8b75-3e499bbffbc8',\n    mauritania: '8acb006b-8596-4a98-8177-acb4cb575956',\n    mauritius: '17ced083-eb2a-4046-a713-26cabc7af95d',\n    mayotte: '1af148fe-2698-4b89-bf7f-87e5c48b6848',\n    mexico: '8381208f-01ca-4ed3-8f2c-f73ed1c316e3',\n    moldova: 'f0e9c8b5-69b5-48df-8cb9-2d089ba04e46',\n    mongolia: '9f341cb1-dcb5-4f6c-bd21-b57db01b4193',\n    morocco: 'ef467a17-91e8-4124-a136-7ed8ff7c7d15',\n    mozambique: '0916133b-4d93-4d60-9c20-e7ee3936f391',\n    myanmar: 'e81ba700-f9fc-4ed0-b248-578a25717cdb',\n    namibia: '0cb123dc-8810-4840-b6ab-6a527c5a79ef',\n    nauru: '3386fe63-2158-4040-a502-9f65fd2079d3',\n    nepal: 'fb01b01a-6775-423c-8012-7d43f587cb6c',\n    new_caledonia: 'e67c072b-7707-491f-8c2e-13c914216b61',\n    nicaragua: 'f6a9521c-596b-49f9-b914-67138e8c17e6',\n    niger: '7561db90-a866-4443-93f4-95cac1d47e9c',\n    nigeria: '4134651a-7f53-45fb-8bc6-7fed9cf36f51',\n    north_korea: '4d3079e4-8568-48e6-9342-665896875a38',\n    oman: '9b0af037-99d1-43b8-ac06-82137ec4b06d',\n    other: 'Other',\n    pakistan: 'f45d93c3-c9b0-4333-a5e6-299b7c425812',\n    palestine: 'e2a19948-49aa-44c0-98ef-67ae1160ef43',\n    panama: '1ef5a828-9d0d-4336-91ab-880d5dc0151c',\n    papua_new_guinea: 'e1e6b451-d7fe-4954-b225-99b2de82a4c0',\n    paraguay: 'd8412016-82f5-4801-a026-1bdc429850b7',\n    peru: 'e74fa87f-8469-46b0-975f-6cb37c394564',\n    philippines: 'bdbd5c9f-1f28-4f4d-a254-4a84f8bb2c8f',\n    puerto_rico: '39fca1d0-d2e7-4b13-82bd-626fbec71252',\n    republic_of_congo: '5db9afa5-b57e-4f45-8b1c-af766f14fc58',\n    reunion: '1dae4b2d-50c9-4bf1-b25a-7063600a5e74',\n    romania: '457e745e-ae97-463d-95a9-8d5689d3ca2b',\n    rwanda: '6bc925a1-7699-496a-85b0-c290699381db',\n    samoa: 'e03b381b-a7f4-40eb-964f-51571dc3c48c',\n    sao_tome_and_principe: 'f66bbb42-684f-42d7-bfcd-95d586eb7dc9',\n    saudi_arabia: 'fdf495a4-e60c-46f7-a8a2-61a216849086',\n    senegal: 'ad948f1b-0733-4f8d-b049-d64289b43a10',\n    serbia: 'd2e69cef-3bff-4220-ba91-a6a678fb606b',\n    sierra_leone: 'ffba9caf-b6aa-4078-845e-578f7a7fd566',\n    somalia: '99c8dccc-4dfa-4d30-86be-42a309ab431f',\n    south_africa: '75882d62-1c55-480d-b411-8ca40c3307df',\n    south_korea: '0603d6b9-334f-4443-ab60-7c5d457b95fc',\n    south_sudan: 'f113e24e-2ea9-49a2-9b28-59241b9adb21',\n    sri_lanka: 'b0031c01-d242-4410-b98b-cc1511590b85',\n    sudan: '2f03a932-2b75-4e8b-9f44-0fcd83c75dc4',\n    suriname: 'c65d3329-98d4-4dd7-89d3-141b70d00eb2',\n    swaziland: '06a2703b-af17-4e44-83f5-6cc9a8a75320',\n    switzerland: 'dcdcdc70-a006-4b0a-bac2-7de89b022b65',\n    syria: '1e34ee55-ef9f-4386-bae6-6995555ded75',\n    tajikistan: '34836c60-5449-48d6-b3c9-c0b3361b9f2c',\n    tanzania: '050a8eb1-0d77-4f65-a2da-776a13bcd2a4',\n    thailand: '289ac5bd-6434-4837-86bf-b54d22970ac8',\n    togo: '6a583e64-869d-477d-a1c1-746320d45fc4',\n    tonga: 'd381f06d-2365-4f40-948b-cfe90d8cb532',\n    tunisia: '56be7864-fde6-4db3-8fa5-b9dd42cd9c53',\n    turkey: '7429c779-1d3a-4aec-8256-d0b1637e1bd1',\n    turkmenistan: '3ef17df5-299b-4385-9ea6-572df4b6f9ca',\n    uganda: 'be3d11d3-446d-440c-a582-d01c7cbb0eda',\n    ukraine: '38c99c8d-2b93-4848-a537-b1865a260bb2',\n    unknown: 'Unknown',\n    uruguay: 'c2e45baf-748b-4d7b-a391-ed6b802b6f94',\n    uzbekistan: '60512350-d79b-41aa-aff0-1b28ca4aa5f1',\n    venezuela: '557cea4a-0049-4b7a-b373-ed63f294a2a0',\n    vietnam: '49509c5f-e533-48a8-bf06-86935e3376b2',\n    western_sahara: '4086dfd2-f4f5-4107-93e8-07bee235af8f',\n    yemen: '6a3214e0-f94b-414c-8148-968e24386671',\n    zambia: '3ec0432d-ea37-4159-a658-29d6f07fe21a',\n    zimbabwe: 'ce1b0d8d-0a2d-4f93-a6ed-64aca2fd0f45',\n  };\n  state.statusMap = {\n    asylum_seeker: 'f921ffdd-72ca-4d58-a89b-1fa2e959d110',\n    no_status: '2bacead2-f280-457c-9d28-e80e106f7d25',\n    refugee: 'MSF-AAAAAA000000000000001929',\n    single: '20b8524e-4c26-4fa0-81f0-fa23ebacc54d',\n    married: 'MSF-AAAAAA000000000000001863',\n    widowed: 'MSF-AAAAAA000000000000001864',\n    divorced_separated: 'MSF-AAAAAA000000000000001865',\n    concubine: '1060AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',\n    not_applicable: 'MSF-AAAAAA000000000000001823',\n    student: 'MSF-AAAAAA000000000000001871',\n    permanent_employee: '4a18a820-f3a1-4bb7-9138-558a9ecc81da',\n    occasional_employee: '2cb73bee-7f94-4695-89c7-c81187dbc90c',\n    unemployed: 'MSF-AAAAAA000000000000001870',\n    housewife: '9b14b4d4-b749-4acf-acfe-79c480f3c4b3',\n    other: 'MSF-AAAAAA000000000000001329',\n    unknown: '1067AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA',\n    idp: 'MSF-AAAAAA000000000000001930',\n    internationally_displaced: '515c5abe-4172-4d0c-a991-0de2888228d7',\n    non_displaced: 'bbdb287c-4ba1-4944-bd87-eb126c5f9d92',\n    returnee: 'fc49acaa-ece2-4365-9dfb-70c2105de8b1',\n  };\n  return state;\n});\n",
          "adaptor": "@openfn/language-dhis2@latest",
          "project_credential_id": "9716980f-1b35-4295-adde-b05bc47002da"
        },
        "Create-Patients": {
          "id": "fe6cdd41-491d-44fd-80af-0ac8891dd766",
          "name": "Create Patients",
          "body": "//Define gender options and prepare newPatientUuid and identifiers\nfn(state => {\n  const genderOptions = {\n    male: 'M',\n    female: 'F',\n    unknown: 'U',\n    transgender_female: 'O',\n    transgender_male: 'O',\n    prefer_not_to_answer: 'O',\n    gender_variant_non_conforming: 'O',\n  };\n\n  const identifiers = [];\n  const newPatientUuid = [];\n\n  const { trackedEntityInstances } = state;\n  if (trackedEntityInstances.length > 0)\n    console.log(\n      '# of TEIs to send to OpenMRS: ',\n      trackedEntityInstances.length\n    );\n  if (trackedEntityInstances.length === 0)\n    console.log('No data fetched in step prior to sync.');\n\n  return {\n    ...state,\n    genderOptions,\n    newPatientUuid,\n    identifiers,\n  };\n});\n\n//First we generate a unique OpenMRS ID for each patient\neach(\n  'trackedEntityInstances[*]',\n  post(\n    'idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier',\n    {}\n  ).then(state => {\n    state.identifiers.push(state.data.identifier);\n    return state;\n  })\n);\n\n// Then we map trackedEntityInstances to openMRS data model\nfn(state => {\n  const {\n    trackedEntityInstances,\n    identifiers,\n    genderOptions,\n    nationalityMap,\n    statusMap,\n    locations,\n  } = state;\n\n  const getValueForCode = (attributes, code) => {\n    const result = attributes.find(attribute => attribute.code === code);\n    return result ? result.value : undefined;\n  };\n\n  const calculateDOB = age => {\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const birthYear = currentYear - age;\n\n    const birthday = new Date(\n      birthYear,\n      currentDate.getMonth(),\n      currentDate.getDay()\n    );\n\n    return birthday.toISOString().replace(/\\.\\d+Z$/, '+0000');\n  };\n\n  state.patients = trackedEntityInstances.map((d, i) => {\n    const patientNumber = getValueForCode(d.attributes, 'patient_number'); // Add random number for testing + Math.random()\n\n    const nationality =\n      nationalityMap[getValueForCode(d.attributes, 'origin_nationality')];\n    const currentStatus =\n      statusMap[getValueForCode(d.attributes, 'current_status')];\n    const legalStatus =\n      getValueForCode(d.attributes, 'legal_status') &&\n      statusMap[getValueForCode(d.attributes, 'legal_status')];\n    const maritalStatus =\n      statusMap[getValueForCode(d.attributes, 'marital_status')];\n    const employmentStatus =\n      statusMap[getValueForCode(d.attributes, 'occupation')];\n\n    const noOfChildren = d.attributes.find(\n      a => a.attribute === 'SVoT2cVLd5O'\n    )?.value;\n\n    const lonlat = d.attributes.find(a => a.attribute === 'rBtrjV1Mqkz')?.value;\n    const location = lonlat\n      ? locations.options.find(o => o.code === lonlat)?.displayName\n      : undefined;\n\n    let countyDistrict, cityVillage;\n\n    if (location) {\n      const match = location.match(/^(.*?)\\s*\\((.*?)\\)/);\n      if (match) {\n        [, countyDistrict, cityVillage] = match;\n        cityVillage = cityVillage.split('-')[0].trim(); // Remove country code and trim\n      }\n    }\n\n    return {\n      patientNumber,\n      person: {\n        age: getValueForCode(d.attributes, 'age'),\n        gender: genderOptions[getValueForCode(d.attributes, 'sex')],\n        birthdate:\n          d.attributes.find(a => a.attribute === 'WDp4nVor9Z7')?.value ??\n          calculateDOB(getValueForCode(d.attributes, 'age')),\n        birthdateEstimated: d.attributes.find(\n          a => a.attribute === 'WDp4nVor9Z7'\n        )\n          ? true\n          : false,\n        names: [\n          {\n            familyName:\n              d.attributes.find(a => a.attribute === 'fa7uwpCKIwa')?.value ??\n              'unknown',\n            givenName:\n              d.attributes.find(a => a.attribute === 'Jt9BhFZkvP2')?.value ??\n              'unknown',\n          },\n        ],\n        addresses: [\n          {\n            country: 'Iraq',\n            stateProvince: 'Ninewa',\n            countyDistrict,\n            cityVillage,\n          },\n        ],\n        attributes: [\n          {\n            attributeType: '24d1fa23-9778-4a8e-9f7b-93f694fc25e2',\n            value: nationality,\n          },\n          {\n            attributeType: 'e0b6ed99-72c4-4847-a442-e9929eac4a0f',\n            value: currentStatus,\n          },\n          legalStatus && {\n            attributeType: 'a9b2c642-097f-43f8-b96b-4d2f50ffd9b1',\n            value: legalStatus,\n          },\n          {\n            attributeType: '3884dc76-c271-4bcb-8df8-81c6fb897f53',\n            value: maritalStatus,\n          },\n          employmentStatus && {\n            attributeType: 'dd1f7f0f-ccea-4228-9aa8-a8c3b0ea4c3e',\n            value: employmentStatus,\n          },\n          noOfChildren && {\n            attributeType: 'e363161a-9d5c-4331-8463-238938f018ed',\n            value: noOfChildren,\n          },\n        ].filter(i => i),\n      },\n\n      identifiers: [\n        {\n          identifier: identifiers[i], //map ID value from DHIS2 attribute\n          identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location old:44c3efb0-2583-4c80-a79e-1f756a03c0a1\n          preferred: true,\n        },\n        {\n          uuid: d.trackedEntity,\n          identifier: patientNumber,\n          identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f', //Old Identification number\n          location: 'cf6fa7d4-1f19-4c85-ac50-ff824805c51c', //default location\n          preferred: false, //default value for this identifiertype\n        },\n      ],\n    };\n  });\n\n  return state;\n});\n\n// Creating patients in openMRS\neach(\n  '$.patients[*]',\n  upsert(\n    'patient',\n    state => {\n      return { q: state.data.patientNumber };\n    },\n    state => {\n      const { patientNumber, ...patient } = state.data;\n      console.log(\n        'Upserting patient record\\n',\n        JSON.stringify(patient, null, 2)\n      );\n      return patient;\n    },\n    state => {\n      state.newPatientUuid.push({\n        patient_number: state.references.at(-1)?.patientNumber,\n        uuid: state.data.uuid,\n      });\n      return state;\n    }\n  )\n);\n\n// Clean up state\nfn(({ data, references, ...state }) => state);\n",
          "adaptor": "@openfn/language-openmrs@latest",
          "project_credential_id": "45634fcb-d146-4a0f-930c-77300393a3c2"
        },
        "Update-Teis": {
          "id": "df3ec9f2-6913-4742-8898-44734deed649",
          "name": "Update Teis",
          "body": "fn(state => {\n  if (state.newPatientUuid.length === 0) {\n    console.log('No data fetched in step prior to sync.');\n  }\n\n  console.log(\n    'newPatientUuid ::',\n    JSON.stringify(state.newPatientUuid, null, 2)\n  );\n  return state;\n});\n\n// Update TEI on DHIS2\neach(\n  'newPatientUuid[*]',\n  upsert(\n    'trackedEntityInstances',\n    state => ({\n      ou: 'OPjuJMZFLop',\n      program: 'w9MSPn5oSqp',\n      filter: [`P4wdYGkldeG:Eq:${state.data.patient_number}`],\n    }),\n    {\n      orgUnit: 'OPjuJMZFLop',\n      program: 'w9MSPn5oSqp',\n      trackedEntityType: 'cHlzCA2MuEF',\n      attributes: [\n        { attribute: 'P4wdYGkldeG', value: `${$.data.patient_number}` }, //DHIS2 patient number to use as lookup key\n        { attribute: 'AYbfTPYMNJH', value: `${$.data.patient.uuid}` }, //OMRS patient uuid\n        {\n          attribute: 'ZBoxuExmxcZ',\n          value: `${$.data.patient.identifier[0].identifier}`,\n        }, //id generated in wf1-2 e.g., \"IQ146-24-000-027\"\n      ],\n    }\n  )\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "9716980f-1b35-4295-adde-b05bc47002da"
        }
      },
      "edges": {
        "cron->Fetch-Metadata": {
          "enabled": true,
          "id": "85b3b59f-90c1-434a-a9a6-1c09dd86ccff",
          "source_trigger_id": "f982cc7a-6c9e-4778-9a08-6ddf8469509d",
          "condition_type": "always",
          "target_job_id": "d7c373f4-a503-4fa6-bfdd-ab456860ae78"
        },
        "Fetch-Metadata->Get-Teis-and-Locations": {
          "enabled": true,
          "id": "cfa7784e-6a3e-4f6f-8578-4dfb410f4a41",
          "source_job_id": "d7c373f4-a503-4fa6-bfdd-ab456860ae78",
          "condition_expression": "state.trackedEntityInstances.length > 0\n",
          "condition_type": "on_job_success",
          "target_job_id": "d30561c9-1e9d-467c-b37b-985bcdf1a55c"
        },
        "Create-Patients->Update-Teis": {
          "enabled": true,
          "id": "22aa79eb-9f8d-404d-9880-09c866470085",
          "source_job_id": "fe6cdd41-491d-44fd-80af-0ac8891dd766",
          "condition_type": "on_job_success",
          "target_job_id": "df3ec9f2-6913-4742-8898-44734deed649"
        },
        "Get-Teis-and-Locations->Create-Patients": {
          "enabled": true,
          "id": "c2122c54-8ddf-4ed1-9e6a-ff86adc4b7d8",
          "source_job_id": "d30561c9-1e9d-467c-b37b-985bcdf1a55c",
          "condition_expression": "state.teis.length > 0 && !state.errors\n",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "target_job_id": "fe6cdd41-491d-44fd-80af-0ac8891dd766"
        }
      }
    },
    "wf2-omrs-dhis2": {
      "id": "c886121c-0a91-45b5-ae30-7d0922b693be",
      "name": "wf2-omrs-dhis2",
      "inserted_at": "2024-11-06T09:32:40.981046Z",
      "lock_version": 16,
      "triggers": {
        "cron": {
          "enabled": false,
          "id": "a38c8cfb-8fad-46b3-b69c-a7f6108a0d8c",
          "type": "cron",
          "cron_expression": "0 0 * * *"
        }
      },
      "jobs": {
        "Get-Patients": {
          "id": "ecaf53cc-fbde-4703-827b-7b8a5126fb82",
          "name": "Get Patients",
          "body": "//Here we define the date cursor\n//$.cursor at beggining of the project 2023-05-20T06:01:24.000+0000\ncursor($.lastRunDateTime || $.manualCursor || '2023-05-20T06:01:24.000+0000');\n// Update the lastRunDateTime for the next run\ncursor('today', {\n  key: 'lastRunDateTime',\n  format: c => dateFns.format(new Date(c), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"),\n});\n\nsearchPatient({ q: 'IQ', v: 'full', limit: '100' });\n//searchPatient({ q: 'Katrina', v: 'full', limit: '100' });\n//Query all patients (q=all) not supported on demo OpenMRS; needs to be configured\n//...so we query all Patients with name \"Patient\" instead\n\nfn(state => {\n  const { cursor, data, lastRunDateTime } = state;\n  console.log('Filtering patients since:', cursor);\n\n  const patients = data.results.filter(({ auditInfo }) => {\n    const lastModified = auditInfo?.dateChanged || auditInfo?.dateCreated;\n    return lastModified > cursor;\n  });\n  console.log('# of patients to sync to dhis2 ::', patients.length);\n  console.log(\n    'uuids of patients to sync to dhis2 ::',\n    patients.map(p => p.uuid)\n  );\n\n  return { cursor, lastRunDateTime, patients };\n});\n",
          "adaptor": "@openfn/language-openmrs@latest",
          "project_credential_id": "45634fcb-d146-4a0f-930c-77300393a3c2"
        },
        "Upsert-TEIs": {
          "id": "5f3d2b64-435a-4df5-9d99-9fc37728d0b8",
          "name": "Upsert TEIs",
          "body": "const buildPatientsUpsert = (state, patient, isNewPatient) => {\n  const { placeOflivingMap, genderOptions } = state;\n  const dateCreated = patient.auditInfo.dateCreated.substring(0, 10);\n  const findIdentifierByUuid = (identifiers, targetUuid) =>\n    identifiers.find(i => i.identifierType.uuid === targetUuid)?.identifier;\n\n  const enrollments = [\n    {\n      orgUnit: state.orgUnit,\n      program: state.program,\n      programStage: state.patientProgramStage, //'MdTtRixaC1B',\n      enrollmentDate: dateCreated,\n    },\n  ];\n\n  const findOptsUuid = uuid =>\n    patient.person.attributes.find(a => a.attributeType.uuid === uuid)?.value\n      ?.uuid;\n\n  const findOptCode = optUuid =>\n    state.optsMap.find(o => o['value.uuid - External ID'] === optUuid)?.[\n      'DHIS2 Option Code'\n    ];\n\n  const patientMap = state.formMaps.patient.dataValueMap;\n  const statusAttrMaps = Object.keys(patientMap).map(d => {\n    const optUid = findOptsUuid(patientMap[d]);\n    return {\n      attribute: d,\n      value: findOptCode(optUid),\n    };\n  });\n\n  const payload = {\n    query: {\n      ou: state.orgUnit,\n      program: state.program,\n      filter: [`AYbfTPYMNJH:Eq:${patient.uuid}`], //upsert on omrs.patient.uid\n    },\n    data: {\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntityType: 'cHlzCA2MuEF',\n      attributes: [\n        {\n          attribute: 'fa7uwpCKIwa',\n          value: patient.person?.names[0]?.givenName,\n        },\n        {\n          attribute: 'Jt9BhFZkvP2',\n          value: patient.person?.names[0]?.familyName,\n        },\n        {\n          attribute: 'P4wdYGkldeG', //DHIS2 ID ==> \"Patient Number\"\n          value:\n            findIdentifierByUuid(\n              patient.identifiers,\n              state.dhis2PatientNumber\n            ) || findIdentifierByUuid(patient.identifiers, state.openmrsAutoId), //map OMRS ID if no DHIS2 id\n        },\n        {\n          attribute: 'ZBoxuExmxcZ', //MSF ID ==> \"OpenMRS Patient Number\"\n          value: findIdentifierByUuid(patient.identifiers, state.openmrsAutoId),\n        },\n        {\n          attribute: 'AYbfTPYMNJH', //\"OpenMRS Patient UID\"\n          value: patient.uuid,\n        },\n        {\n          attribute: 'qptKDiv9uPl',\n          value: genderOptions[patient.person.gender],\n        },\n        {\n          attribute: 'T1iX2NuPyqS',\n          value: patient.person.age,\n        },\n        {\n          attribute: 'WDp4nVor9Z7',\n          value: patient.person.birthdate.slice(0, 10),\n        },\n        {\n          attribute: 'rBtrjV1Mqkz', //Place of living\n          value: placeOflivingMap[patient.person?.addresses[0]?.cityVillage],\n        },\n        ...statusAttrMaps,\n      ],\n    },\n  };\n\n  // TODO: AK do we need this log👇🏾?\n  // console.log('mapped dhis2 payloads:: ', JSON.stringify(payload, null, 2));\n\n  if (isNewPatient) {\n    console.log('create enrollment');\n    payload.data.enrollments = enrollments;\n  }\n\n  return payload;\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\neach(\n  $.patients,\n  get(\n    'tracker/trackedEntities',\n    {\n      orgUnit: $.orgUnit,\n      filter: [`AYbfTPYMNJH:Eq:${$.data?.uuid}`],\n      program: $.program,\n    },\n    {},\n    async state => {\n      const patient = state.references.at(-1);\n      console.log(patient.uuid, 'patient uuid');\n\n      const isNewPatient = state.data.instances.length === 0;\n\n      state.patientsUpsert ??= [];\n      state.patientsUpsert.push(\n        buildPatientsUpsert(state, patient, isNewPatient)\n      );\n      await delay(2000);\n      return state;\n    }\n  )\n);\n\n// Upsert TEIs to DHIS2\neach(\n  $.patientsUpsert,\n  upsert('trackedEntityInstances', $.data.query, state => {\n    // Uncomment👇🏾 for inspecting input payload\n    // console.log('Upserting', state.data.data);\n    return state.data.data;\n  })\n);\nfn(state => {\n  const {\n    data,\n    response,\n    references,\n    patients,\n    patientsUpsert,\n    placeOflivingMap,\n    genderOptions,\n    identifiers,\n    ...next\n  } = state;\n\n  next.patientUuids = patients.map(p => p.uuid);\n  return next;\n});\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "9716980f-1b35-4295-adde-b05bc47002da"
        },
        "Get-Encounters": {
          "id": "a5c005be-2d95-4809-ad77-fd62f93dc976",
          "name": "Get Encounters",
          "body": "// Fetch patient encounters then filter by cursor date\n// OpenMRS demo instance does not support querying ALL records (q=all)\neach(\n  $.patientUuids,\n  getEncounters({ patient: $.data, v: 'full' }, state => {\n    const patientUuid = state.references.at(-1);\n    const filteredEncounters = state.formUuids.map(formUuid =>\n      state.data.results.filter(\n        encounter =>\n          encounter.encounterDatetime >= state.cursor &&\n          encounter?.form?.uuid === formUuid\n      )\n    );\n\n    state.encounters ??= [];\n    state.encounters.push(\n      filteredEncounters.map(encounters => encounters[0]).filter(e => e)\n    );\n\n    console.log(\n      filteredEncounters.flat().length,\n      `# of filtered encounters found in OMRS for ${patientUuid}`\n    );\n\n    return state;\n  })\n);\n\n// Log filtered encounters\nfn(state => {\n  const {\n    data,\n    index,\n    response,\n    encounters,\n    references,\n    patientUuids,\n    ...next\n  } = state;\n  next.encounters = encounters.flat();\n  console.log(next.encounters.length, '# of new encounters to sync to dhis2');\n\n  return next;\n});\n",
          "adaptor": "@openfn/language-openmrs@4.0.0",
          "project_credential_id": "45634fcb-d146-4a0f-930c-77300393a3c2"
        },
        "Get-TEIs": {
          "id": "793f4fe1-d717-4caa-a617-2b5e2b19880d",
          "name": "Get TEIs",
          "body": "const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\neach(\n  $.encounters,\n  get(\n    'tracker/trackedEntities',\n    {\n      orgUnit: $.orgUnit,\n      program: $.program,\n      filter: [`AYbfTPYMNJH:Eq:${$.data.patient.uuid}`],\n      fields: '*',\n    },\n    {},\n    async state => {\n      const encounter = state.references.at(-1);\n      console.log(encounter.patient.uuid, 'Encounter patient uuid');\n\n      const { trackedEntity, enrollments } = state.data?.instances?.[0] || {};\n      if (trackedEntity && enrollments) {\n        state.TEIs ??= {};\n        state.TEIs[encounter.patient.uuid] = {\n          trackedEntity,\n          enrollment: enrollments[0]?.enrollment,\n        };\n      }\n\n      await delay(2000);\n      return state;\n    }\n  )\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "9716980f-1b35-4295-adde-b05bc47002da"
        },
        "Create-Events": {
          "id": "a1176a6e-cdee-4ddc-9fe1-e49aa7b719cd",
          "name": "Create Events",
          "body": "const processAnswer = (answer, conceptUuid, dataElement, optsMap) => {\n  // console.log('Has answer', conceptUuid, dataElement);\n  return typeof answer.value === 'object'\n    ? processObjectAnswer(answer, conceptUuid, dataElement, optsMap)\n    : processOtherAnswer(answer, conceptUuid, dataElement);\n};\n\nconst processObjectAnswer = (answer, conceptUuid, dataElement, optsMap) => {\n  if (isDiagnosisByPsychologist(conceptUuid, dataElement)) {\n    return '' + answer.value.uuid === '278401ee-3d6f-4c65-9455-f1c16d0a7a98';\n  }\n  return findMatchingOption(answer, optsMap);\n};\n\nconst processOtherAnswer = (answer, conceptUuid, dataElement) => {\n  if (isPhq9Score(answer.value, conceptUuid, dataElement)) {\n    return getRangePhq(answer.value);\n  }\n  return answer.value;\n};\n\nconst processNoAnswer = (data, conceptUuid, dataElement) => {\n  // console.log('No answer', conceptUuid, dataElement);\n  if (isEncounterDate(conceptUuid, dataElement)) {\n    return data.encounterDatetime.replace('+0000', '');\n  }\n  return '';\n};\n\nconst findMatchingOption = (answer, optsMap) => {\n  const matchingOption = optsMap.find(\n    o => o['value.uuid - External ID'] === answer.value.uuid\n  )?.['DHIS2 Option Code'];\n\n  return matchingOption || '';\n};\n\nconst isEncounterDate = (conceptUuid, dataElement) => {\n  return (\n    conceptUuid === 'encounter-date' &&\n    ['CXS4qAJH2qD', 'I7phgLmRWQq', 'yUT7HyjWurN'].includes(dataElement)\n  );\n};\n\nconst isDiagnosisByPsychologist = (conceptUuid, dataElement) =>\n  conceptUuid === '722dd83a-c1cf-48ad-ac99-45ac131ccc96' &&\n  dataElement === 'pN4iQH4AEzk';\n\nconst isPhq9Score = (value, conceptUuid, dataElement) =>\n  typeof value === 'number' &&\n  conceptUuid === '5f3d618e-5c89-43bd-8c79-07e4e98c2f23' &&\n  dataElement === 'tsFOVnlc6lz';\n\nconst getRangePhq = input => {\n  if (input >= 20) return '>20';\n  if (input >= 15) return '15_19';\n  if (input >= 10) return '10_14';\n  if (input >= 5) return '5_9';\n  return '0_4';\n};\n\nconst dataValuesMapping = (data, dataValueMap, optsMap) => {\n  return Object.keys(dataValueMap)\n    .map(dataElement => {\n      const conceptUuid = dataValueMap[dataElement];\n      const answer = data.obs.find(o => o.concept.uuid === conceptUuid);\n      const value = answer\n        ? processAnswer(answer, conceptUuid, dataElement, optsMap)\n        : processNoAnswer(data, conceptUuid, dataElement);\n\n      return { dataElement, value };\n    })\n    .filter(d => d);\n};\n\n// Prepare DHIS2 data model for create events\nfn(state => {\n  state.encountersMapping = state.encounters.map(data => {\n    const form = state.formMaps[data.form.uuid];\n    const eventDate = data.encounterDatetime.replace('+0000', '');\n    const { trackedEntity, enrollment } = state.TEIs[data.patient.uuid];\n\n    const event = {\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntityInstance: trackedEntity,\n      enrollment,\n      eventDate,\n    };\n    if (form) {\n      return {\n        ...event,\n        programStage: form.programStage,\n        dataValues: dataValuesMapping(data, form.dataValueMap, state.optsMap),\n      };\n    }\n  });\n\n  return state;\n});\n\n// Create events for each encounter\neach(\n  $.encountersMapping,\n  create(\n    'events',\n    state => {\n      console.log('dhis2 event to import:: ', state.data);\n      return state.data;\n    },\n    {\n      params: {\n        dataElementIdScheme: 'UID',\n      },\n    }\n  )\n);\n\nfn(state => {\n  const latestGenderUpdate = state.encounters.reduce((acc, e) => {\n    const answer = e.obs.find(\n      o => o.concept.uuid === 'ec42d68d-3e23-43de-b8c5-a03bb538e7c7'\n    );\n    if (answer) {\n      const personUuid = answer.person.uuid;\n      if (\n        !acc[personUuid] ||\n        new Date(answer.obsDatetime) > new Date(acc[personUuid].obsDatetime)\n      ) {\n        acc[personUuid] = answer;\n      }\n    }\n    return acc;\n  }, {});\n\n  state.genderUpdated = Object.values(latestGenderUpdate);\n\n  return state;\n});\n\n// Return only lastRunDateTime\nfnIf(\n  state => state.genderUpdated.length === 0,\n  ({ lastRunDateTime }) => ({ lastRunDateTime })\n);\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "9716980f-1b35-4295-adde-b05bc47002da"
        },
        "Mappings": {
          "id": "f022ca80-7da0-4fdb-9728-38e34280c516",
          "name": "Mappings",
          "body": "get(\n  'https://raw.githubusercontent.com/OpenFn/openfn-lime-pilot/refs/heads/next-staging/metadata/collections.json',\n  { parseAs: 'json' },\n  state => {\n    const { cursor, lastRunDateTime, patients, data } = state;\n\n    return {\n      ...data,\n      cursor,\n      patients,\n      lastRunDateTime,\n    };\n  }\n);\n\n// Validates if a string matches UUID v4 format\nconst isValidUUID = id => {\n  if (!id || typeof id !== 'string') return false;\n\n  const UUID_PATTERN =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  return UUID_PATTERN.test(id);\n};\n\nfn(state => {\n  const { formMetadata, identifiers, ...rest } = state;\n\n  rest.formUuids = formMetadata\n    .filter(form => isValidUUID(form['OMRS form.uuid']))\n    .map(form => form['OMRS form.uuid']);\n\n  rest.orgUnit = identifiers.find(i => i.type === 'ORG_UNIT')?.[\n    'dhis2 attribute id'\n  ];\n  rest.program = identifiers.find(i => i.type === 'PROGRAM')?.[\n    'dhis2 attribute id'\n  ];\n\n  rest.patientProgramStage = state.formMaps.patient.programStage;\n\n  rest.dhis2PatientNumber = identifiers.find(\n    i => i.type === 'DHIS2_PATIENT_NUMBER'\n  )?.['omrs identifierType']; //DHIS2 ID or DHIS2 Patient Number\n\n  rest.openmrsAutoId = identifiers.find(i => i.type === 'OPENMRS_AUTO_ID')?.[\n    'omrs identifierType'\n  ]; //MSF ID or OpenMRS Patient Number\n\n  return rest;\n});\n\nfn(state => {\n  state.genderOptions = {\n    M: 'male',\n    F: 'female',\n    U: 'unknown',\n    O: 'prefer_not_to_answer',\n  };\n\n  state.placeOflivingMap = state.optsMap\n    .filter(o => o['OptionSet name'] === 'Place of Living')\n    .reduce((acc, value) => {\n      acc[value['value.display - Answers']] = value['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  return state;\n});\n",
          "adaptor": "@openfn/language-http@latest",
          "project_credential_id": null
        },
        "Update-TEIs": {
          "id": "abe0d282-5209-47b5-9272-4cba048a5ba8",
          "name": "Update TEIs",
          "body": "fn(state => {\n  const { optionSets, genderUpdated, TEIs } = state;\n  const genderMap = optionSets\n    .filter(o => o['DHIS2 DE UID'] === 'qptKDiv9uPl')\n    .reduce((acc, obj) => {\n      acc[obj['value.display - Answers']] = obj['DHIS2 Option Code'];\n      return acc;\n    }, {});\n\n  state.teisToUpdate = genderUpdated.map(answer => {\n    const { trackedEntity } = TEIs[answer.person.uuid];\n    return {\n      trackedEntity,\n      program: state.program,\n      orgUnit: state.orgUnit,\n      trackedEntityType: 'cHlzCA2MuEF',\n      attributes: [\n        {\n          attribute: 'qptKDiv9uPl', //gender\n          value: genderMap[answer.value.display],\n        },\n        {\n          attribute: 'AYbfTPYMNJH', //OpenMRS Patient UID to use to upsert TEI\n          value: answer.person.uuid,\n        },\n      ],\n    };\n  });\n  return state;\n});\n\n// Update TEIs\ncreate(\n  'tracker',\n  { trackedEntities: $.teisToUpdate },\n  { params: { async: false, importStrategy: 'UPDATE' } }\n);\n// Return only lastRunDateTime\nfn(({ lastRunDateTime }) => ({ lastRunDateTime }));\n",
          "adaptor": "@openfn/language-dhis2@5.0.1",
          "project_credential_id": "9716980f-1b35-4295-adde-b05bc47002da"
        }
      },
      "edges": {
        "cron->Get-Patients": {
          "enabled": true,
          "id": "60f8f83d-7e0d-402f-90ee-8d8d85488097",
          "source_trigger_id": "a38c8cfb-8fad-46b3-b69c-a7f6108a0d8c",
          "condition_type": "always",
          "target_job_id": "ecaf53cc-fbde-4703-827b-7b8a5126fb82"
        },
        "Upsert-TEIs->Get-Encounters": {
          "enabled": true,
          "id": "0075ae81-bef3-4fe9-969a-847f8bcde8fa",
          "source_job_id": "5f3d2b64-435a-4df5-9d99-9fc37728d0b8",
          "condition_expression": "state.patientUuids.length > 0 && !state.errors\n",
          "condition_type": "js_expression",
          "condition_label": "has-patient-uuids",
          "target_job_id": "a5c005be-2d95-4809-ad77-fd62f93dc976"
        },
        "Mappings->Upsert-TEIs": {
          "enabled": true,
          "id": "e45c7204-ae45-438f-ad71-4c663bc72850",
          "source_job_id": "f022ca80-7da0-4fdb-9728-38e34280c516",
          "condition_type": "on_job_success",
          "target_job_id": "5f3d2b64-435a-4df5-9d99-9fc37728d0b8"
        },
        "Get-Patients->Mappings": {
          "enabled": true,
          "id": "ff6aff74-ffd9-48cc-8441-94a77f847418",
          "source_job_id": "ecaf53cc-fbde-4703-827b-7b8a5126fb82",
          "condition_expression": "state.patients.length > 0 && !state.errors\n",
          "condition_type": "js_expression",
          "condition_label": "has-patients",
          "target_job_id": "f022ca80-7da0-4fdb-9728-38e34280c516"
        },
        "Create-Events->Update-TEIs": {
          "enabled": true,
          "id": "63cd0a29-5d94-489e-9ba0-8a6690a555bc",
          "source_job_id": "a1176a6e-cdee-4ddc-9fe1-e49aa7b719cd",
          "condition_expression": "state.genderUpdated.length > 0 && !state.errors\n",
          "condition_type": "js_expression",
          "condition_label": "has-gender-updated",
          "target_job_id": "abe0d282-5209-47b5-9272-4cba048a5ba8"
        },
        "Get-TEIs->Create-Events": {
          "enabled": true,
          "id": "5384f7c8-7b38-44cd-8055-e3f6c46932e7",
          "source_job_id": "793f4fe1-d717-4caa-a617-2b5e2b19880d",
          "condition_expression": "state.TEIs && !state.errors\n",
          "condition_type": "js_expression",
          "condition_label": "has-teis",
          "target_job_id": "a1176a6e-cdee-4ddc-9fe1-e49aa7b719cd"
        },
        "Get-Encounters->Get-TEIs": {
          "enabled": true,
          "id": "2332a5e2-aa7b-4646-8193-958923e235f3",
          "source_job_id": "a5c005be-2d95-4809-ad77-fd62f93dc976",
          "condition_type": "on_job_success",
          "target_job_id": "793f4fe1-d717-4caa-a617-2b5e2b19880d"
        }
      }
    }
  },
  "requires_mfa": false
}